
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000517c  08007c58  08007c58  00017c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdd4  0800cdd4  000202e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdd4  0800cdd4  0001cdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cddc  0800cddc  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cddc  0800cddc  0001cddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0800cdec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200002e4  0800d0d0  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800d0d0  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bad3  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004356  00000000  00000000  0006bde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029d8  00000000  00000000  00070140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a28  00000000  00000000  00072b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024367  00000000  00000000  00075540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6f0  00000000  00000000  000998a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116046  00000000  00000000  000b8f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cefdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf98  00000000  00000000  001cf030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e4 	.word	0x200002e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c40 	.word	0x08007c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	08007c40 	.word	0x08007c40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f001 fa8e 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f80d 	bl	8000f70 <HAL_InitTick>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	e001      	b.n	8000f66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f62:	f003 fed5 	bl	8004d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d023      	beq.n	8000fcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_InitTick+0x70>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fa8d 	bl	80024ba <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d809      	bhi.n	8000fc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f001 fa65 	bl	8002482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_InitTick+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e007      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e004      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e001      	b.n	8000fd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	20000110 	.word	0x20000110
 8000fe4:	20000000 	.word	0x20000000

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000004 	.word	0x20000004
 800100c:	20000328 	.word	0x20000328

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000328 	.word	0x20000328

08001028 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3360      	adds	r3, #96	; 0x60
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <LL_ADC_SetOffset+0x44>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	4313      	orrs	r3, r2
 80010c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	03fff000 	.word	0x03fff000

080010d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3360      	adds	r3, #96	; 0x60
 80010e6:	461a      	mov	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3360      	adds	r3, #96	; 0x60
 8001114:	461a      	mov	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	431a      	orrs	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800112e:	bf00      	nop
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3330      	adds	r3, #48	; 0x30
 8001170:	461a      	mov	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	211f      	movs	r1, #31
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0e9b      	lsrs	r3, r3, #26
 8001198:	f003 011f 	and.w	r1, r3, #31
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	431a      	orrs	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3314      	adds	r3, #20
 80011c8:	461a      	mov	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	0e5b      	lsrs	r3, r3, #25
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	0d1b      	lsrs	r3, r3, #20
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	2107      	movs	r1, #7
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	401a      	ands	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	0d1b      	lsrs	r3, r3, #20
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001202:	bf00      	nop
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001228:	43db      	mvns	r3, r3
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0318 	and.w	r3, r3, #24
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001234:	40d9      	lsrs	r1, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	400b      	ands	r3, r1
 800123a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800123e:	431a      	orrs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	0007ffff 	.word	0x0007ffff

08001258 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6093      	str	r3, [r2, #8]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800128c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001290:	d101      	bne.n	8001296 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001308:	f043 0201 	orr.w	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800132c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001330:	f043 0202 	orr.w	r2, r3, #2
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <LL_ADC_IsEnabled+0x18>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <LL_ADC_IsEnabled+0x1a>
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b02      	cmp	r3, #2
 800137c:	d101      	bne.n	8001382 <LL_ADC_IsDisableOngoing+0x18>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <LL_ADC_IsDisableOngoing+0x1a>
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013a4:	f043 0204 	orr.w	r2, r3, #4
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d101      	bne.n	80013d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e12c      	b.n	8001678 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	2b00      	cmp	r3, #0
 800142a:	d109      	bne.n	8001440 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f003 fad1 	bl	80049d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff19 	bl	800127c <LL_ADC_IsDeepPowerDownEnabled>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff feff 	bl	8001258 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff34 	bl	80012cc <LL_ADC_IsInternalRegulatorEnabled>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d115      	bne.n	8001496 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff18 	bl	80012a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001474:	4b82      	ldr	r3, [pc, #520]	; (8001680 <HAL_ADC_Init+0x27c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	4a82      	ldr	r2, [pc, #520]	; (8001684 <HAL_ADC_Init+0x280>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	099b      	lsrs	r3, r3, #6
 8001482:	3301      	adds	r3, #1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001488:	e002      	b.n	8001490 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	3b01      	subs	r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f9      	bne.n	800148a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff16 	bl	80012cc <LL_ADC_IsInternalRegulatorEnabled>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	f043 0210 	orr.w	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff76 	bl	80013b8 <LL_ADC_REG_IsConversionOngoing>
 80014cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 80c5 	bne.w	8001666 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 80c1 	bne.w	8001666 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014ec:	f043 0202 	orr.w	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff23 	bl	8001344 <LL_ADC_IsEnabled>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10b      	bne.n	800151c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001504:	4860      	ldr	r0, [pc, #384]	; (8001688 <HAL_ADC_Init+0x284>)
 8001506:	f7ff ff1d 	bl	8001344 <LL_ADC_IsEnabled>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4619      	mov	r1, r3
 8001516:	485d      	ldr	r0, [pc, #372]	; (800168c <HAL_ADC_Init+0x288>)
 8001518:	f7ff fd86 	bl	8001028 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e5b      	ldrb	r3, [r3, #25]
 8001520:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001526:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800152c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001532:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d106      	bne.n	8001558 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	3b01      	subs	r3, #1
 8001550:	045b      	lsls	r3, r3, #17
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	4b45      	ldr	r3, [pc, #276]	; (8001690 <HAL_ADC_Init+0x28c>)
 800157c:	4013      	ands	r3, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	430b      	orrs	r3, r1
 8001586:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff13 	bl	80013b8 <LL_ADC_REG_IsConversionOngoing>
 8001592:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff20 	bl	80013de <LL_ADC_INJ_IsConversionOngoing>
 800159e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d13d      	bne.n	8001622 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d13a      	bne.n	8001622 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015c8:	f023 0302 	bic.w	r3, r3, #2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	69b9      	ldr	r1, [r7, #24]
 80015d2:	430b      	orrs	r3, r1
 80015d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d118      	bne.n	8001612 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015ea:	f023 0304 	bic.w	r3, r3, #4
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015f6:	4311      	orrs	r1, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015fc:	4311      	orrs	r1, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001602:	430a      	orrs	r2, r1
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	e007      	b.n	8001622 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10c      	bne.n	8001644 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	f023 010f 	bic.w	r1, r3, #15
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
 8001642:	e007      	b.n	8001654 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020f 	bic.w	r2, r2, #15
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	f023 0303 	bic.w	r3, r3, #3
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	655a      	str	r2, [r3, #84]	; 0x54
 8001664:	e007      	b.n	8001676 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	f043 0210 	orr.w	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001676:	7ffb      	ldrb	r3, [r7, #31]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000110 	.word	0x20000110
 8001684:	053e2d63 	.word	0x053e2d63
 8001688:	50040000 	.word	0x50040000
 800168c:	50040300 	.word	0x50040300
 8001690:	fff0c007 	.word	0xfff0c007

08001694 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fe89 	bl	80013b8 <LL_ADC_REG_IsConversionOngoing>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d14f      	bne.n	800174c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_ADC_Start+0x26>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e04b      	b.n	8001752 <HAL_ADC_Start+0xbe>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fcd2 	bl	800206c <ADC_Enable>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d137      	bne.n	8001742 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f2:	d106      	bne.n	8001702 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	f023 0206 	bic.w	r2, r3, #6
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	221c      	movs	r2, #28
 800170e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800172e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fe28 	bl	8001390 <LL_ADC_REG_StartConversion>
 8001740:	e006      	b.n	8001750 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800174a:	e001      	b.n	8001750 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800174c:	2302      	movs	r3, #2
 800174e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d102      	bne.n	8001772 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800176c:	2308      	movs	r3, #8
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e010      	b.n	8001794 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001784:	f043 0220 	orr.w	r2, r3, #32
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e06f      	b.n	8001870 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001790:	2304      	movs	r3, #4
 8001792:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001794:	f7ff fc3c 	bl	8001010 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800179a:	e021      	b.n	80017e0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a2:	d01d      	beq.n	80017e0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017a4:	f7ff fc34 	bl	8001010 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d302      	bcc.n	80017ba <HAL_ADC_PollForConversion+0x60>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d112      	bne.n	80017e0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	f043 0204 	orr.w	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e047      	b.n	8001870 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0d6      	beq.n	800179c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fc9b 	bl	800113a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01c      	beq.n	8001844 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7e5b      	ldrb	r3, [r3, #25]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d111      	bne.n	8001844 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d105      	bne.n	8001844 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b08      	cmp	r3, #8
 8001850:	d104      	bne.n	800185c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2208      	movs	r2, #8
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e008      	b.n	800186e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	220c      	movs	r2, #12
 800186c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b0b6      	sub	sp, #216	; 0xd8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x22>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e3b9      	b.n	800202a <HAL_ADC_ConfigChannel+0x796>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fd78 	bl	80013b8 <LL_ADC_REG_IsConversionOngoing>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 839e 	bne.w	800200c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d824      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	3b02      	subs	r3, #2
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d81b      	bhi.n	800191a <HAL_ADC_ConfigChannel+0x86>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_ADC_ConfigChannel+0x54>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001901 	.word	0x08001901
 80018f0:	08001909 	.word	0x08001909
 80018f4:	08001911 	.word	0x08001911
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	220c      	movs	r2, #12
 80018fc:	605a      	str	r2, [r3, #4]
          break;
 80018fe:	e011      	b.n	8001924 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2212      	movs	r2, #18
 8001904:	605a      	str	r2, [r3, #4]
          break;
 8001906:	e00d      	b.n	8001924 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2218      	movs	r2, #24
 800190c:	605a      	str	r2, [r3, #4]
          break;
 800190e:	e009      	b.n	8001924 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001916:	605a      	str	r2, [r3, #4]
          break;
 8001918:	e004      	b.n	8001924 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2206      	movs	r2, #6
 800191e:	605a      	str	r2, [r3, #4]
          break;
 8001920:	e000      	b.n	8001924 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001922:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	f7ff fc15 	bl	8001160 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fd3c 	bl	80013b8 <LL_ADC_REG_IsConversionOngoing>
 8001940:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fd48 	bl	80013de <LL_ADC_INJ_IsConversionOngoing>
 800194e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001952:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 81a6 	bne.w	8001ca8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800195c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 81a1 	bne.w	8001ca8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6819      	ldr	r1, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	461a      	mov	r2, r3
 8001974:	f7ff fc20 	bl	80011b8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	08db      	lsrs	r3, r3, #3
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b04      	cmp	r3, #4
 8001998:	d00a      	beq.n	80019b0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6919      	ldr	r1, [r3, #16]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019aa:	f7ff fb71 	bl	8001090 <LL_ADC_SetOffset>
 80019ae:	e17b      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fb8e 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10a      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x148>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fb83 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	0e9b      	lsrs	r3, r3, #26
 80019d6:	f003 021f 	and.w	r2, r3, #31
 80019da:	e01e      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x186>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fb78 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e004      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001a0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x19e>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0e9b      	lsrs	r3, r3, #26
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	e018      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x1d0>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001a56:	2320      	movs	r3, #32
 8001a58:	e004      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d106      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fb47 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fb2b 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x20e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fb20 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	0e9b      	lsrs	r3, r3, #26
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	e01e      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x24c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb15 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ac0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	e004      	b.n	8001ade <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001ad4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x264>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0e9b      	lsrs	r3, r3, #26
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	e018      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x296>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	e004      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d106      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	2101      	movs	r1, #1
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fae4 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2102      	movs	r1, #2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fac8 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10a      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x2d4>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2102      	movs	r1, #2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fabd 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	0e9b      	lsrs	r3, r3, #26
 8001b62:	f003 021f 	and.w	r2, r3, #31
 8001b66:	e01e      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x312>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fab2 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b96:	2320      	movs	r3, #32
 8001b98:	e004      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x32a>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	e016      	b.n	8001bec <HAL_ADC_ConfigChannel+0x358>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001bd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001bde:	2320      	movs	r3, #32
 8001be0:	e004      	b.n	8001bec <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d106      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fa83 	bl	8001104 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2103      	movs	r1, #3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fa67 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10a      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x396>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2103      	movs	r1, #3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fa5c 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	e017      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x3c6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2103      	movs	r1, #3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fa51 	bl	80010d8 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c44:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e003      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x3de>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0e9b      	lsrs	r3, r3, #26
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	e011      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x402>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e003      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d106      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2103      	movs	r1, #3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fa2e 	bl	8001104 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fb49 	bl	8001344 <LL_ADC_IsEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 813f 	bne.w	8001f38 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6819      	ldr	r1, [r3, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f7ff faa2 	bl	8001210 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a8e      	ldr	r2, [pc, #568]	; (8001f0c <HAL_ADC_ConfigChannel+0x678>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	f040 8130 	bne.w	8001f38 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10b      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x46c>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	bf94      	ite	ls
 8001cf8:	2301      	movls	r3, #1
 8001cfa:	2300      	movhi	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e019      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x4a0>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d10:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e003      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	bf94      	ite	ls
 8001d2e:	2301      	movls	r3, #1
 8001d30:	2300      	movhi	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d079      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x4c0>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0e9b      	lsrs	r3, r3, #26
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	069b      	lsls	r3, r3, #26
 8001d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d52:	e015      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x4ec>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d64:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	e003      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	069b      	lsls	r3, r3, #26
 8001d7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x50c>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	3301      	adds	r3, #1
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	e017      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x53c>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	ea42 0103 	orr.w	r1, r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10a      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x562>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	3301      	adds	r3, #1
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	051b      	lsls	r3, r3, #20
 8001df4:	e018      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x594>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e003      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	e080      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x5b4>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	3301      	adds	r3, #1
 8001e40:	069b      	lsls	r3, r3, #26
 8001e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e46:	e015      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x5e0>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e003      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x600>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	3301      	adds	r3, #1
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	e017      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x630>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	61fb      	str	r3, [r7, #28]
  return result;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	ea42 0103 	orr.w	r1, r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x65c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	3301      	adds	r3, #1
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	051b      	lsls	r3, r3, #20
 8001eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eee:	e01d      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x698>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	613b      	str	r3, [r7, #16]
  return result;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	e005      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x684>
 8001f0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f003 021f 	and.w	r2, r3, #31
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	3b1e      	subs	r3, #30
 8001f26:	051b      	lsls	r3, r3, #20
 8001f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	6892      	ldr	r2, [r2, #8]
 8001f32:	4619      	mov	r1, r3
 8001f34:	f7ff f940 	bl	80011b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_ADC_ConfigChannel+0x7a0>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d06c      	beq.n	800201e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f44:	483c      	ldr	r0, [pc, #240]	; (8002038 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f46:	f7ff f895 	bl	8001074 <LL_ADC_GetCommonPathInternalCh>
 8001f4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_ADC_ConfigChannel+0x7a8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d127      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d121      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a35      	ldr	r2, [pc, #212]	; (8002040 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d157      	bne.n	800201e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f76:	4619      	mov	r1, r3
 8001f78:	482f      	ldr	r0, [pc, #188]	; (8002038 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f7a:	f7ff f868 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	099b      	lsrs	r3, r3, #6
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f98:	e002      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fa6:	e03a      	b.n	800201e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_ADC_ConfigChannel+0x7b8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d113      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x746>
 8001fb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_ADC_ConfigChannel+0x7ac>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d12a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4819      	ldr	r0, [pc, #100]	; (8002038 <HAL_ADC_ConfigChannel+0x7a4>)
 8001fd4:	f7ff f83b 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fd8:	e021      	b.n	800201e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_ADC_ConfigChannel+0x7bc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d11c      	bne.n	800201e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d116      	bne.n	800201e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <HAL_ADC_ConfigChannel+0x7ac>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d111      	bne.n	800201e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002002:	4619      	mov	r1, r3
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <HAL_ADC_ConfigChannel+0x7a4>)
 8002006:	f7ff f822 	bl	800104e <LL_ADC_SetCommonPathInternalCh>
 800200a:	e008      	b.n	800201e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002026:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800202a:	4618      	mov	r0, r3
 800202c:	37d8      	adds	r7, #216	; 0xd8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	80080000 	.word	0x80080000
 8002038:	50040300 	.word	0x50040300
 800203c:	c7520000 	.word	0xc7520000
 8002040:	50040000 	.word	0x50040000
 8002044:	20000110 	.word	0x20000110
 8002048:	053e2d63 	.word	0x053e2d63
 800204c:	cb840000 	.word	0xcb840000
 8002050:	80000001 	.word	0x80000001

08002054 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f963 	bl	8001344 <LL_ADC_IsEnabled>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d14d      	bne.n	8002120 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	4b28      	ldr	r3, [pc, #160]	; (800212c <ADC_Enable+0xc0>)
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f043 0210 	orr.w	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e039      	b.n	8002122 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f91e 	bl	80012f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020b8:	f7fe ffaa 	bl	8001010 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020be:	e028      	b.n	8002112 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f93d 	bl	8001344 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d104      	bne.n	80020da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f90d 	bl	80012f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020da:	f7fe ff99 	bl	8001010 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d914      	bls.n	8002112 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d00d      	beq.n	8002112 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e007      	b.n	8002122 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d1cf      	bne.n	80020c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	8000003f 	.word	0x8000003f

08002130 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff f914 	bl	800136a <LL_ADC_IsDisableOngoing>
 8002142:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f8fb 	bl	8001344 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d047      	beq.n	80021e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d144      	bne.n	80021e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030d 	and.w	r3, r3, #13
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10c      	bne.n	8002182 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff f8d5 	bl	800131c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2203      	movs	r2, #3
 8002178:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800217a:	f7fe ff49 	bl	8001010 <HAL_GetTick>
 800217e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002180:	e029      	b.n	80021d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e023      	b.n	80021e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800219e:	f7fe ff37 	bl	8001010 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d914      	bls.n	80021d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1dc      	bne.n	800219e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <LL_ADC_StartCalibration>:
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800220a:	4313      	orrs	r3, r2
 800220c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_IsCalibrationOnGoing>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002234:	d101      	bne.n	800223a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_ADCEx_Calibration_Start+0x1c>
 8002260:	2302      	movs	r3, #2
 8002262:	e04d      	b.n	8002300 <HAL_ADCEx_Calibration_Start+0xb8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff5f 	bl	8002130 <ADC_Disable>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d136      	bne.n	80022ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002284:	f023 0302 	bic.w	r3, r3, #2
 8002288:	f043 0202 	orr.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ffa9 	bl	80021ee <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800229c:	e014      	b.n	80022c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3301      	adds	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80022aa:	d30d      	bcc.n	80022c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f023 0312 	bic.w	r3, r3, #18
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e01b      	b.n	8002300 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ffa7 	bl	8002220 <LL_ADC_IsCalibrationOnGoing>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e2      	bne.n	800229e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f023 0303 	bic.w	r3, r3, #3
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
 80022e8:	e005      	b.n	80022f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff47 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff5c 	bl	8002350 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffb0 	bl	8002428 <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e2:	e154      	b.n	800278e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8146 	beq.w	8002788 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d00b      	beq.n	800251c <HAL_GPIO_Init+0x48>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d007      	beq.n	800251c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002510:	2b11      	cmp	r3, #17
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b12      	cmp	r3, #18
 800251a:	d130      	bne.n	800257e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002552:	2201      	movs	r2, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 0201 	and.w	r2, r3, #1
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0xea>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d123      	bne.n	8002606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80a0 	beq.w	8002788 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002648:	4b58      	ldr	r3, [pc, #352]	; (80027ac <HAL_GPIO_Init+0x2d8>)
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	4a57      	ldr	r2, [pc, #348]	; (80027ac <HAL_GPIO_Init+0x2d8>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6613      	str	r3, [r2, #96]	; 0x60
 8002654:	4b55      	ldr	r3, [pc, #340]	; (80027ac <HAL_GPIO_Init+0x2d8>)
 8002656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002660:	4a53      	ldr	r2, [pc, #332]	; (80027b0 <HAL_GPIO_Init+0x2dc>)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800268a:	d019      	beq.n	80026c0 <HAL_GPIO_Init+0x1ec>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_GPIO_Init+0x2e0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_GPIO_Init+0x1e8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a48      	ldr	r2, [pc, #288]	; (80027b8 <HAL_GPIO_Init+0x2e4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00d      	beq.n	80026b8 <HAL_GPIO_Init+0x1e4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a47      	ldr	r2, [pc, #284]	; (80027bc <HAL_GPIO_Init+0x2e8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d007      	beq.n	80026b4 <HAL_GPIO_Init+0x1e0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <HAL_GPIO_Init+0x2ec>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_GPIO_Init+0x1dc>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e008      	b.n	80026c2 <HAL_GPIO_Init+0x1ee>
 80026b0:	2307      	movs	r3, #7
 80026b2:	e006      	b.n	80026c2 <HAL_GPIO_Init+0x1ee>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e004      	b.n	80026c2 <HAL_GPIO_Init+0x1ee>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e002      	b.n	80026c2 <HAL_GPIO_Init+0x1ee>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_GPIO_Init+0x1ee>
 80026c0:	2300      	movs	r3, #0
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	f002 0203 	and.w	r2, r2, #3
 80026c8:	0092      	lsls	r2, r2, #2
 80026ca:	4093      	lsls	r3, r2
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026d2:	4937      	ldr	r1, [pc, #220]	; (80027b0 <HAL_GPIO_Init+0x2dc>)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3302      	adds	r3, #2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026e0:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002704:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800272e:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002734:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43db      	mvns	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002758:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002782:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <HAL_GPIO_Init+0x2f0>)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3301      	adds	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	f47f aea3 	bne.w	80024e4 <HAL_GPIO_Init+0x10>
  }
}
 800279e:	bf00      	nop
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010000 	.word	0x40010000
 80027b4:	48000400 	.word	0x48000400
 80027b8:	48000800 	.word	0x48000800
 80027bc:	48000c00 	.word	0x48000c00
 80027c0:	48001000 	.word	0x48001000
 80027c4:	40010400 	.word	0x40010400

080027c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40007000 	.word	0x40007000

080027e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_PWREx_GetVoltageRange+0x18>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40007000 	.word	0x40007000

08002804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002812:	d130      	bne.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800281c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002820:	d038      	beq.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2232      	movs	r2, #50	; 0x32
 8002838:	fb02 f303 	mul.w	r3, r2, r3
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0c9b      	lsrs	r3, r3, #18
 8002844:	3301      	adds	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002848:	e002      	b.n	8002850 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b01      	subs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285c:	d102      	bne.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x60>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f2      	bne.n	800284a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d110      	bne.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e00f      	b.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d007      	beq.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800288c:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002892:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40007000 	.word	0x40007000
 80028a8:	20000110 	.word	0x20000110
 80028ac:	431bde83 	.word	0x431bde83

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f000 bc11 	b.w	80030e6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c4:	4ba0      	ldr	r3, [pc, #640]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ce:	4b9e      	ldr	r3, [pc, #632]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80e4 	beq.w	8002aae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_RCC_OscConfig+0x4c>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	f040 808b 	bne.w	8002a0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	f040 8087 	bne.w	8002a0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x64>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e3e8      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_RCC_OscConfig+0x7e>
 8002924:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800292c:	e005      	b.n	800293a <HAL_RCC_OscConfig+0x8a>
 800292e:	4b86      	ldr	r3, [pc, #536]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293a:	4293      	cmp	r3, r2
 800293c:	d223      	bcs.n	8002986 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fd7a 	bl	800343c <RCC_SetFlashLatencyFromMSIRange>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e3c9      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002952:	4b7d      	ldr	r3, [pc, #500]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7c      	ldr	r2, [pc, #496]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002958:	f043 0308 	orr.w	r3, r3, #8
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b7a      	ldr	r3, [pc, #488]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4977      	ldr	r1, [pc, #476]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002970:	4b75      	ldr	r3, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	4972      	ldr	r1, [pc, #456]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
 8002984:	e025      	b.n	80029d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	496a      	ldr	r1, [pc, #424]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a4:	4b68      	ldr	r3, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	4965      	ldr	r1, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fd3a 	bl	800343c <RCC_SetFlashLatencyFromMSIRange>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e389      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d2:	f000 fc6f 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	495a      	ldr	r1, [pc, #360]	; (8002b4c <HAL_RCC_OscConfig+0x29c>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_OscConfig+0x2a0>)
 80029f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029f2:	4b58      	ldr	r3, [pc, #352]	; (8002b54 <HAL_RCC_OscConfig+0x2a4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe faba 	bl	8000f70 <HAL_InitTick>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d052      	beq.n	8002aac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	e36d      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d032      	beq.n	8002a78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a12:	4b4d      	ldr	r3, [pc, #308]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe faf7 	bl	8001010 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a26:	f7fe faf3 	bl	8001010 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e356      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a44:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	493a      	ldr	r1, [pc, #232]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	4935      	ldr	r1, [pc, #212]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
 8002a76:	e01a      	b.n	8002aae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a78:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a32      	ldr	r2, [pc, #200]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fac4 	bl	8001010 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fac0 	bl	8001010 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e323      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a9e:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x1dc>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d073      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_OscConfig+0x21c>
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d10b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d063      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d15f      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e300      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x24c>
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e01d      	b.n	8002b38 <HAL_RCC_OscConfig+0x288>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x270>
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x288>
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <HAL_RCC_OscConfig+0x298>)
 8002b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fa66 	bl	8001010 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b46:	e010      	b.n	8002b6a <HAL_RCC_OscConfig+0x2ba>
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	0800c9a4 	.word	0x0800c9a4
 8002b50:	20000110 	.word	0x20000110
 8002b54:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fa5a 	bl	8001010 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e2bd      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6a:	4baf      	ldr	r3, [pc, #700]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2a8>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fa4a 	bl	8001010 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe fa46 	bl	8001010 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e2a9      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b92:	4ba5      	ldr	r3, [pc, #660]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2d0>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d060      	beq.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x310>
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d119      	bne.n	8002bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d116      	bne.n	8002bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc0:	4b99      	ldr	r3, [pc, #612]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x328>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e286      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd8:	4b93      	ldr	r3, [pc, #588]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	4990      	ldr	r1, [pc, #576]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bec:	e040      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d023      	beq.n	8002c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf6:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a8b      	ldr	r2, [pc, #556]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe fa05 	bl	8001010 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fa01 	bl	8001010 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e264      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1c:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	497c      	ldr	r1, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
 8002c3c:	e018      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	4b7a      	ldr	r3, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a79      	ldr	r2, [pc, #484]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f9e1 	bl	8001010 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe f9dd 	bl	8001010 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e240      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c64:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d03c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8a:	4a67      	ldr	r2, [pc, #412]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe f9bc 	bl	8001010 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe f9b8 	bl	8001010 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e21b      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cae:	4b5e      	ldr	r3, [pc, #376]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCC_OscConfig+0x3ec>
 8002cbc:	e01b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbe:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe f99f 	bl	8001010 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd6:	f7fe f99b 	bl	8001010 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e1fe      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce8:	4b4f      	ldr	r3, [pc, #316]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ef      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80a6 	beq.w	8002e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d08:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	4a43      	ldr	r2, [pc, #268]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d20:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d30:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <HAL_RCC_OscConfig+0x57c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d118      	bne.n	8002d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d3c:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_OscConfig+0x57c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a3a      	ldr	r2, [pc, #232]	; (8002e2c <HAL_RCC_OscConfig+0x57c>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d48:	f7fe f962 	bl	8001010 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7fe f95e 	bl	8001010 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1c1      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d62:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <HAL_RCC_OscConfig+0x57c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <HAL_RCC_OscConfig+0x4d8>
 8002d76:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d86:	e024      	b.n	8002dd2 <HAL_RCC_OscConfig+0x522>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d110      	bne.n	8002db2 <HAL_RCC_OscConfig+0x502>
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	4a20      	ldr	r2, [pc, #128]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db0:	e00f      	b.n	8002dd2 <HAL_RCC_OscConfig+0x522>
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002dca:	f023 0304 	bic.w	r3, r3, #4
 8002dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fe f919 	bl	8001010 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe f915 	bl	8001010 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e176      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x578>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ed      	beq.n	8002de2 <HAL_RCC_OscConfig+0x532>
 8002e06:	e01a      	b.n	8002e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe f902 	bl	8001010 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e0e:	e00f      	b.n	8002e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe f8fe 	bl	8001010 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d906      	bls.n	8002e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e15f      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e30:	4baa      	ldr	r3, [pc, #680]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e8      	bne.n	8002e10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e3e:	7ffb      	ldrb	r3, [r7, #31]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e44:	4ba5      	ldr	r3, [pc, #660]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	4aa4      	ldr	r2, [pc, #656]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d03c      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e64:	4b9d      	ldr	r3, [pc, #628]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e6a:	4a9c      	ldr	r2, [pc, #624]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe f8cc 	bl	8001010 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e7c:	f7fe f8c8 	bl	8001010 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e12b      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e8e:	4b93      	ldr	r3, [pc, #588]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ef      	beq.n	8002e7c <HAL_RCC_OscConfig+0x5cc>
 8002e9c:	e01b      	b.n	8002ed6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e9e:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ea4:	4a8d      	ldr	r2, [pc, #564]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7fe f8af 	bl	8001010 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb6:	f7fe f8ab 	bl	8001010 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e10e      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec8:	4b84      	ldr	r3, [pc, #528]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1ef      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8102 	beq.w	80030e4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	f040 80c5 	bne.w	8003074 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eea:	4b7c      	ldr	r3, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 0203 	and.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d12c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d123      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d11b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d113      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d109      	bne.n	8002f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	3b01      	subs	r3, #1
 8002f52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d067      	beq.n	8003028 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d062      	beq.n	8003024 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f5e:	4b5f      	ldr	r3, [pc, #380]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0bb      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f7a:	f7fe f849 	bl	8001010 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe f845 	bl	8001010 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0a8      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f94:	4b51      	ldr	r3, [pc, #324]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa0:	4b4e      	ldr	r3, [pc, #312]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4b4e      	ldr	r3, [pc, #312]	; (80030e0 <HAL_RCC_OscConfig+0x830>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fba:	0212      	lsls	r2, r2, #8
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fc2:	0852      	lsrs	r2, r2, #1
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	0552      	lsls	r2, r2, #21
 8002fc8:	4311      	orrs	r1, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fce:	0852      	lsrs	r2, r2, #1
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	0652      	lsls	r2, r2, #25
 8002fd4:	4311      	orrs	r1, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fda:	06d2      	lsls	r2, r2, #27
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	493f      	ldr	r1, [pc, #252]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3c      	ldr	r2, [pc, #240]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a39      	ldr	r2, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8002ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ffc:	f7fe f808 	bl	8001010 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe f804 	bl	8001010 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e067      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003022:	e05f      	b.n	80030e4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e05e      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d157      	bne.n	80030e4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a25      	ldr	r2, [pc, #148]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800304c:	f7fd ffe0 	bl	8001010 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fd ffdc 	bl	8001010 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e03f      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x7a4>
 8003072:	e037      	b.n	80030e4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d02d      	beq.n	80030d6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003084:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4a11      	ldr	r2, [pc, #68]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 8003098:	f023 0303 	bic.w	r3, r3, #3
 800309c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 80030a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fd ffaf 	bl	8001010 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fd ffab 	bl	8001010 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e00e      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <HAL_RCC_OscConfig+0x82c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x806>
 80030d4:	e006      	b.n	80030e4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e005      	b.n	80030e6 <HAL_RCC_OscConfig+0x836>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0c8      	b.n	8003296 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d910      	bls.n	8003134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 0207 	bic.w	r2, r3, #7
 800311a:	4961      	ldr	r1, [pc, #388]	; (80032a0 <HAL_RCC_ClockConfig+0x1b0>)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b0      	b.n	8003296 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d04c      	beq.n	80031da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d107      	bne.n	8003158 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003148:	4b56      	ldr	r3, [pc, #344]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d121      	bne.n	8003198 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e09e      	b.n	8003296 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d107      	bne.n	8003170 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003160:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d115      	bne.n	8003198 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e092      	b.n	8003296 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003178:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d109      	bne.n	8003198 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e086      	b.n	8003296 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003188:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e07e      	b.n	8003296 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003198:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 0203 	bic.w	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	493f      	ldr	r1, [pc, #252]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031aa:	f7fd ff31 	bl	8001010 <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b2:	f7fd ff2d 	bl	8001010 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e066      	b.n	8003296 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 020c 	and.w	r2, r3, #12
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d1eb      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	492c      	ldr	r1, [pc, #176]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <HAL_RCC_ClockConfig+0x1b0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d210      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	4924      	ldr	r1, [pc, #144]	; (80032a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e036      	b.n	8003296 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4918      	ldr	r1, [pc, #96]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4910      	ldr	r1, [pc, #64]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003266:	f000 f825 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCC_ClockConfig+0x1b4>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	490c      	ldr	r1, [pc, #48]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd fe70 	bl	8000f70 <HAL_InitTick>
 8003290:	4603      	mov	r3, r0
 8003292:	72fb      	strb	r3, [r7, #11]

  return status;
 8003294:	7afb      	ldrb	r3, [r7, #11]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	0800c9a4 	.word	0x0800c9a4
 80032ac:	20000110 	.word	0x20000110
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	; 0x24
 80032b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c2:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032cc:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x34>
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d11e      	bne.n	8003326 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032e8:	4b34      	ldr	r3, [pc, #208]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	e005      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003304:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003310:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003324:	e00a      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d102      	bne.n	8003332 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e004      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d101      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800333a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d134      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0xa6>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d003      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xac>
 8003358:	e005      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800335c:	617b      	str	r3, [r7, #20]
      break;
 800335e:	e005      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003362:	617b      	str	r3, [r7, #20]
      break;
 8003364:	e002      	b.n	800336c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	617b      	str	r3, [r7, #20]
      break;
 800336a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	3301      	adds	r3, #1
 8003378:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	fb02 f203 	mul.w	r2, r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	0e5b      	lsrs	r3, r3, #25
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	3301      	adds	r3, #1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033ac:	69bb      	ldr	r3, [r7, #24]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	0800c9bc 	.word	0x0800c9bc
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	007a1200 	.word	0x007a1200

080033cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000110 	.word	0x20000110

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033e8:	f7ff fff0 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4904      	ldr	r1, [pc, #16]	; (800340c <HAL_RCC_GetPCLK1Freq+0x28>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	0800c9b4 	.word	0x0800c9b4

08003410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003414:	f7ff ffda 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0adb      	lsrs	r3, r3, #11
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4904      	ldr	r1, [pc, #16]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	0800c9b4 	.word	0x0800c9b4

0800343c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003454:	f7ff f9c8 	bl	80027e8 <HAL_PWREx_GetVoltageRange>
 8003458:	6178      	str	r0, [r7, #20]
 800345a:	e014      	b.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	4a24      	ldr	r2, [pc, #144]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
 8003468:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003474:	f7ff f9b8 	bl	80027e8 <HAL_PWREx_GetVoltageRange>
 8003478:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003484:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348c:	d10b      	bne.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d919      	bls.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2ba0      	cmp	r3, #160	; 0xa0
 8003498:	d902      	bls.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800349a:	2302      	movs	r3, #2
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	e013      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034a0:	2301      	movs	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	e010      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d902      	bls.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034ac:	2303      	movs	r3, #3
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	e00a      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	d102      	bne.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b8:	2302      	movs	r3, #2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	e004      	b.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b70      	cmp	r3, #112	; 0x70
 80034c2:	d101      	bne.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034c4:	2301      	movs	r3, #1
 80034c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 0207 	bic.w	r2, r3, #7
 80034d0:	4909      	ldr	r1, [pc, #36]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d001      	beq.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40022000 	.word	0x40022000

080034fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003504:	2300      	movs	r3, #0
 8003506:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003508:	2300      	movs	r3, #0
 800350a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003514:	2b00      	cmp	r3, #0
 8003516:	d031      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003520:	d01a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003522:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003526:	d814      	bhi.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800352c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003530:	d10f      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003532:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	4a5c      	ldr	r2, [pc, #368]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800353e:	e00c      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa00 	bl	800394c <RCCEx_PLLSAI1_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003550:	e003      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	74fb      	strb	r3, [r7, #19]
      break;
 8003556:	e000      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003560:	4b51      	ldr	r3, [pc, #324]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	494e      	ldr	r1, [pc, #312]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003576:	e001      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 809e 	beq.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	4b40      	ldr	r3, [pc, #256]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	4a3f      	ldr	r2, [pc, #252]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ae:	6593      	str	r3, [r2, #88]	; 0x58
 80035b0:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035bc:	2301      	movs	r3, #1
 80035be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a39      	ldr	r2, [pc, #228]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035cc:	f7fd fd20 	bl	8001010 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d2:	e009      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d4:	f7fd fd1c 	bl	8001010 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d902      	bls.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	74fb      	strb	r3, [r7, #19]
        break;
 80035e6:	e005      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035e8:	4b30      	ldr	r3, [pc, #192]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ef      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d15a      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01e      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	429a      	cmp	r2, r3
 8003614:	d019      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003620:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d016      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fcdc 	bl	8001010 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365a:	e00b      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fd fcd8 	bl	8001010 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d902      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	74fb      	strb	r3, [r7, #19]
            break;
 8003672:	e006      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ec      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	4904      	ldr	r1, [pc, #16]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800369e:	e009      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
 80036a4:	e006      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b4:	7c7b      	ldrb	r3, [r7, #17]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ba:	4b9b      	ldr	r3, [pc, #620]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	4a9a      	ldr	r2, [pc, #616]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d2:	4b95      	ldr	r3, [pc, #596]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f023 0203 	bic.w	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4991      	ldr	r1, [pc, #580]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036f4:	4b8c      	ldr	r3, [pc, #560]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 020c 	bic.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	4989      	ldr	r1, [pc, #548]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003716:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	4980      	ldr	r1, [pc, #512]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003738:	4b7b      	ldr	r3, [pc, #492]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4978      	ldr	r1, [pc, #480]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800375a:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	496f      	ldr	r1, [pc, #444]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4967      	ldr	r1, [pc, #412]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	495e      	ldr	r1, [pc, #376]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	4956      	ldr	r1, [pc, #344]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	494d      	ldr	r1, [pc, #308]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d028      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003804:	4b48      	ldr	r3, [pc, #288]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	4945      	ldr	r1, [pc, #276]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003822:	d106      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800382a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382e:	60d3      	str	r3, [r2, #12]
 8003830:	e011      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800383a:	d10c      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f882 	bl	800394c <RCCEx_PLLSAI1_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d028      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003862:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	492d      	ldr	r1, [pc, #180]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003880:	d106      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003882:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4a28      	ldr	r2, [pc, #160]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388c:	60d3      	str	r3, [r2, #12]
 800388e:	e011      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003898:	d10c      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f853 	bl	800394c <RCCEx_PLLSAI1_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01c      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	4916      	ldr	r1, [pc, #88]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038de:	d10c      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	2102      	movs	r1, #2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f830 	bl	800394c <RCCEx_PLLSAI1_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	4904      	ldr	r1, [pc, #16]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800391c:	7cbb      	ldrb	r3, [r7, #18]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800395a:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003966:	4b71      	ldr	r3, [pc, #452]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d10d      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
       ||
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800397e:	4b6b      	ldr	r3, [pc, #428]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
       ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d047      	beq.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e044      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d018      	beq.n	80039d2 <RCCEx_PLLSAI1_Config+0x86>
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d825      	bhi.n	80039f0 <RCCEx_PLLSAI1_Config+0xa4>
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d002      	beq.n	80039ae <RCCEx_PLLSAI1_Config+0x62>
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d009      	beq.n	80039c0 <RCCEx_PLLSAI1_Config+0x74>
 80039ac:	e020      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039ae:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11d      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039be:	e01a      	b.n	80039f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c0:	4b5a      	ldr	r3, [pc, #360]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d116      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d0:	e013      	b.n	80039fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d2:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039de:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ee:	e006      	b.n	80039fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	e004      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a06:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	4943      	ldr	r1, [pc, #268]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d17c      	bne.n	8003b22 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a28:	4b40      	ldr	r3, [pc, #256]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3f      	ldr	r2, [pc, #252]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd faec 	bl	8001010 <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a3a:	e009      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a3c:	f7fd fae8 	bl	8001010 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4e:	e005      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a50:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ef      	bne.n	8003a3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d15f      	bne.n	8003b22 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d110      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a68:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	0211      	lsls	r1, r2, #8
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	06d2      	lsls	r2, r2, #27
 8003a80:	430a      	orrs	r2, r1
 8003a82:	492a      	ldr	r1, [pc, #168]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	610b      	str	r3, [r1, #16]
 8003a88:	e027      	b.n	8003ada <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d112      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6892      	ldr	r2, [r2, #8]
 8003aa0:	0211      	lsls	r1, r2, #8
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6912      	ldr	r2, [r2, #16]
 8003aa6:	0852      	lsrs	r2, r2, #1
 8003aa8:	3a01      	subs	r2, #1
 8003aaa:	0552      	lsls	r2, r2, #21
 8003aac:	430a      	orrs	r2, r1
 8003aae:	491f      	ldr	r1, [pc, #124]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	610b      	str	r3, [r1, #16]
 8003ab4:	e011      	b.n	8003ada <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003abe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6892      	ldr	r2, [r2, #8]
 8003ac6:	0211      	lsls	r1, r2, #8
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6952      	ldr	r2, [r2, #20]
 8003acc:	0852      	lsrs	r2, r2, #1
 8003ace:	3a01      	subs	r2, #1
 8003ad0:	0652      	lsls	r2, r2, #25
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	4915      	ldr	r1, [pc, #84]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae6:	f7fd fa93 	bl	8001010 <HAL_GetTick>
 8003aea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aec:	e009      	b.n	8003b02 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aee:	f7fd fa8f 	bl	8001010 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d902      	bls.n	8003b02 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	73fb      	strb	r3, [r7, #15]
          break;
 8003b00:	e005      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ef      	beq.n	8003aee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e040      	b.n	8003bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 fa5a 	bl	800500c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8c0 	bl	8003cf4 <UART_SetConfig>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e022      	b.n	8003bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fae8 	bl	800415c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fb6f 	bl	80042a0 <UART_CheckIdleState>
 8003bc2:	4603      	mov	r3, r0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	f040 8082 	bne.w	8003cea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_Transmit+0x26>
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e07a      	b.n	8003cec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_UART_Transmit+0x38>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e073      	b.n	8003cec <HAL_UART_Transmit+0x120>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2221      	movs	r2, #33	; 0x21
 8003c18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1a:	f7fd f9f9 	bl	8001010 <HAL_GetTick>
 8003c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d108      	bne.n	8003c4c <HAL_UART_Transmit+0x80>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e003      	b.n	8003c54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c5c:	e02d      	b.n	8003cba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fb62 	bl	8004332 <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e039      	b.n	8003cec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	881a      	ldrh	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3302      	adds	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e008      	b.n	8003ca8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1cb      	bne.n	8003c5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2140      	movs	r1, #64	; 0x40
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fb2e 	bl	8004332 <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e005      	b.n	8003cec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e000      	b.n	8003cec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
  }
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4baa      	ldr	r3, [pc, #680]	; (8003fc8 <UART_SetConfig+0x2d4>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	69f9      	ldr	r1, [r7, #28]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a9f      	ldr	r2, [pc, #636]	; (8003fcc <UART_SetConfig+0x2d8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a96      	ldr	r2, [pc, #600]	; (8003fd0 <UART_SetConfig+0x2dc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d121      	bne.n	8003dbe <UART_SetConfig+0xca>
 8003d7a:	4b96      	ldr	r3, [pc, #600]	; (8003fd4 <UART_SetConfig+0x2e0>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d817      	bhi.n	8003db8 <UART_SetConfig+0xc4>
 8003d88:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <UART_SetConfig+0x9c>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003dad 	.word	0x08003dad
 8003d98:	08003da7 	.word	0x08003da7
 8003d9c:	08003db3 	.word	0x08003db3
 8003da0:	2301      	movs	r3, #1
 8003da2:	76fb      	strb	r3, [r7, #27]
 8003da4:	e096      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003da6:	2302      	movs	r3, #2
 8003da8:	76fb      	strb	r3, [r7, #27]
 8003daa:	e093      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003dac:	2304      	movs	r3, #4
 8003dae:	76fb      	strb	r3, [r7, #27]
 8003db0:	e090      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003db2:	2308      	movs	r3, #8
 8003db4:	76fb      	strb	r3, [r7, #27]
 8003db6:	e08d      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003db8:	2310      	movs	r3, #16
 8003dba:	76fb      	strb	r3, [r7, #27]
 8003dbc:	e08a      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a85      	ldr	r2, [pc, #532]	; (8003fd8 <UART_SetConfig+0x2e4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d132      	bne.n	8003e2e <UART_SetConfig+0x13a>
 8003dc8:	4b82      	ldr	r3, [pc, #520]	; (8003fd4 <UART_SetConfig+0x2e0>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d828      	bhi.n	8003e28 <UART_SetConfig+0x134>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <UART_SetConfig+0xe8>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e11 	.word	0x08003e11
 8003de0:	08003e29 	.word	0x08003e29
 8003de4:	08003e29 	.word	0x08003e29
 8003de8:	08003e29 	.word	0x08003e29
 8003dec:	08003e1d 	.word	0x08003e1d
 8003df0:	08003e29 	.word	0x08003e29
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003e17 	.word	0x08003e17
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e29 	.word	0x08003e29
 8003e0c:	08003e23 	.word	0x08003e23
 8003e10:	2300      	movs	r3, #0
 8003e12:	76fb      	strb	r3, [r7, #27]
 8003e14:	e05e      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e16:	2302      	movs	r3, #2
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e05b      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	e058      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e22:	2308      	movs	r3, #8
 8003e24:	76fb      	strb	r3, [r7, #27]
 8003e26:	e055      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	76fb      	strb	r3, [r7, #27]
 8003e2c:	e052      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a6a      	ldr	r2, [pc, #424]	; (8003fdc <UART_SetConfig+0x2e8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d120      	bne.n	8003e7a <UART_SetConfig+0x186>
 8003e38:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <UART_SetConfig+0x2e0>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e42:	2b30      	cmp	r3, #48	; 0x30
 8003e44:	d013      	beq.n	8003e6e <UART_SetConfig+0x17a>
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d814      	bhi.n	8003e74 <UART_SetConfig+0x180>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d009      	beq.n	8003e62 <UART_SetConfig+0x16e>
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d810      	bhi.n	8003e74 <UART_SetConfig+0x180>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <UART_SetConfig+0x168>
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d006      	beq.n	8003e68 <UART_SetConfig+0x174>
 8003e5a:	e00b      	b.n	8003e74 <UART_SetConfig+0x180>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	76fb      	strb	r3, [r7, #27]
 8003e60:	e038      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e62:	2302      	movs	r3, #2
 8003e64:	76fb      	strb	r3, [r7, #27]
 8003e66:	e035      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	76fb      	strb	r3, [r7, #27]
 8003e6c:	e032      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	76fb      	strb	r3, [r7, #27]
 8003e72:	e02f      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e74:	2310      	movs	r3, #16
 8003e76:	76fb      	strb	r3, [r7, #27]
 8003e78:	e02c      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a53      	ldr	r2, [pc, #332]	; (8003fcc <UART_SetConfig+0x2d8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d125      	bne.n	8003ed0 <UART_SetConfig+0x1dc>
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <UART_SetConfig+0x2e0>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e92:	d017      	beq.n	8003ec4 <UART_SetConfig+0x1d0>
 8003e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e98:	d817      	bhi.n	8003eca <UART_SetConfig+0x1d6>
 8003e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e9e:	d00b      	beq.n	8003eb8 <UART_SetConfig+0x1c4>
 8003ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea4:	d811      	bhi.n	8003eca <UART_SetConfig+0x1d6>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <UART_SetConfig+0x1be>
 8003eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eae:	d006      	beq.n	8003ebe <UART_SetConfig+0x1ca>
 8003eb0:	e00b      	b.n	8003eca <UART_SetConfig+0x1d6>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	76fb      	strb	r3, [r7, #27]
 8003eb6:	e00d      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	76fb      	strb	r3, [r7, #27]
 8003ebc:	e00a      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	76fb      	strb	r3, [r7, #27]
 8003ec2:	e007      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003ec4:	2308      	movs	r3, #8
 8003ec6:	76fb      	strb	r3, [r7, #27]
 8003ec8:	e004      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003eca:	2310      	movs	r3, #16
 8003ecc:	76fb      	strb	r3, [r7, #27]
 8003ece:	e001      	b.n	8003ed4 <UART_SetConfig+0x1e0>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <UART_SetConfig+0x2d8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	f040 8082 	bne.w	8003fe4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ee0:	7efb      	ldrb	r3, [r7, #27]
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d823      	bhi.n	8003f2e <UART_SetConfig+0x23a>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0x1f8>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f1f 	.word	0x08003f1f
 8003f00:	08003f2f 	.word	0x08003f2f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f2f 	.word	0x08003f2f
 8003f0c:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7ff fa68 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8003f14:	6178      	str	r0, [r7, #20]
        break;
 8003f16:	e00f      	b.n	8003f38 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <UART_SetConfig+0x2ec>)
 8003f1a:	617b      	str	r3, [r7, #20]
        break;
 8003f1c:	e00c      	b.n	8003f38 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7ff f9c9 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003f22:	6178      	str	r0, [r7, #20]
        break;
 8003f24:	e008      	b.n	8003f38 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2a:	617b      	str	r3, [r7, #20]
        break;
 8003f2c:	e004      	b.n	8003f38 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	76bb      	strb	r3, [r7, #26]
        break;
 8003f36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8100 	beq.w	8004140 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d305      	bcc.n	8003f5c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d902      	bls.n	8003f62 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	76bb      	strb	r3, [r7, #26]
 8003f60:	e0ee      	b.n	8004140 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	020b      	lsls	r3, r1, #8
 8003f74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f78:	0202      	lsls	r2, r0, #8
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	6849      	ldr	r1, [r1, #4]
 8003f7e:	0849      	lsrs	r1, r1, #1
 8003f80:	4608      	mov	r0, r1
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	1814      	adds	r4, r2, r0
 8003f88:	eb43 0501 	adc.w	r5, r3, r1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f7fc fe55 	bl	8000c48 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fac:	d308      	bcc.n	8003fc0 <UART_SetConfig+0x2cc>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb4:	d204      	bcs.n	8003fc0 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	e0bf      	b.n	8004140 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	76bb      	strb	r3, [r7, #26]
 8003fc4:	e0bc      	b.n	8004140 <UART_SetConfig+0x44c>
 8003fc6:	bf00      	nop
 8003fc8:	efff69f3 	.word	0xefff69f3
 8003fcc:	40008000 	.word	0x40008000
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40004400 	.word	0x40004400
 8003fdc:	40004800 	.word	0x40004800
 8003fe0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	d15c      	bne.n	80040a8 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8003fee:	7efb      	ldrb	r3, [r7, #27]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d828      	bhi.n	8004046 <UART_SetConfig+0x352>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <UART_SetConfig+0x308>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	08004021 	.word	0x08004021
 8004000:	08004029 	.word	0x08004029
 8004004:	08004031 	.word	0x08004031
 8004008:	08004047 	.word	0x08004047
 800400c:	08004037 	.word	0x08004037
 8004010:	08004047 	.word	0x08004047
 8004014:	08004047 	.word	0x08004047
 8004018:	08004047 	.word	0x08004047
 800401c:	0800403f 	.word	0x0800403f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004020:	f7ff f9e0 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8004024:	6178      	str	r0, [r7, #20]
        break;
 8004026:	e013      	b.n	8004050 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7ff f9f2 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 800402c:	6178      	str	r0, [r7, #20]
        break;
 800402e:	e00f      	b.n	8004050 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004030:	4b49      	ldr	r3, [pc, #292]	; (8004158 <UART_SetConfig+0x464>)
 8004032:	617b      	str	r3, [r7, #20]
        break;
 8004034:	e00c      	b.n	8004050 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004036:	f7ff f93d 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 800403a:	6178      	str	r0, [r7, #20]
        break;
 800403c:	e008      	b.n	8004050 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004042:	617b      	str	r3, [r7, #20]
        break;
 8004044:	e004      	b.n	8004050 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	76bb      	strb	r3, [r7, #26]
        break;
 800404e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d074      	beq.n	8004140 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005a      	lsls	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	b29b      	uxth	r3, r3
 800406c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b0f      	cmp	r3, #15
 8004072:	d916      	bls.n	80040a2 <UART_SetConfig+0x3ae>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407a:	d212      	bcs.n	80040a2 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f023 030f 	bic.w	r3, r3, #15
 8004084:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	b29b      	uxth	r3, r3
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	b29a      	uxth	r2, r3
 8004092:	89fb      	ldrh	r3, [r7, #14]
 8004094:	4313      	orrs	r3, r2
 8004096:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	89fa      	ldrh	r2, [r7, #14]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	e04e      	b.n	8004140 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	76bb      	strb	r3, [r7, #26]
 80040a6:	e04b      	b.n	8004140 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040a8:	7efb      	ldrb	r3, [r7, #27]
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d827      	bhi.n	80040fe <UART_SetConfig+0x40a>
 80040ae:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <UART_SetConfig+0x3c0>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	080040d9 	.word	0x080040d9
 80040b8:	080040e1 	.word	0x080040e1
 80040bc:	080040e9 	.word	0x080040e9
 80040c0:	080040ff 	.word	0x080040ff
 80040c4:	080040ef 	.word	0x080040ef
 80040c8:	080040ff 	.word	0x080040ff
 80040cc:	080040ff 	.word	0x080040ff
 80040d0:	080040ff 	.word	0x080040ff
 80040d4:	080040f7 	.word	0x080040f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d8:	f7ff f984 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 80040dc:	6178      	str	r0, [r7, #20]
        break;
 80040de:	e013      	b.n	8004108 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e0:	f7ff f996 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 80040e4:	6178      	str	r0, [r7, #20]
        break;
 80040e6:	e00f      	b.n	8004108 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e8:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <UART_SetConfig+0x464>)
 80040ea:	617b      	str	r3, [r7, #20]
        break;
 80040ec:	e00c      	b.n	8004108 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ee:	f7ff f8e1 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80040f2:	6178      	str	r0, [r7, #20]
        break;
 80040f4:	e008      	b.n	8004108 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fa:	617b      	str	r3, [r7, #20]
        break;
 80040fc:	e004      	b.n	8004108 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	76bb      	strb	r3, [r7, #26]
        break;
 8004106:	bf00      	nop
    }

    if (pclk != 0U)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d018      	beq.n	8004140 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	085a      	lsrs	r2, r3, #1
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	441a      	add	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	b29b      	uxth	r3, r3
 8004122:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b0f      	cmp	r3, #15
 8004128:	d908      	bls.n	800413c <UART_SetConfig+0x448>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d204      	bcs.n	800413c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	e001      	b.n	8004140 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800414c:	7ebb      	ldrb	r3, [r7, #26]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bdb0      	pop	{r4, r5, r7, pc}
 8004156:	bf00      	nop
 8004158:	00f42400 	.word	0x00f42400

0800415c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01a      	beq.n	8004272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425a:	d10a      	bne.n	8004272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  }
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b0:	f7fc feae 	bl	8001010 <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d10e      	bne.n	80042e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f82d 	bl	8004332 <UART_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e023      	b.n	800432a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d10e      	bne.n	800430e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f817 	bl	8004332 <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e00d      	b.n	800432a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4613      	mov	r3, r2
 8004340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004342:	e05e      	b.n	8004402 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d05a      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434c:	f7fc fe60 	bl	8001010 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <UART_WaitOnFlagUntilTimeout+0x30>
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11b      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004370:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e043      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d02c      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b6:	d124      	bne.n	8004402 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e00f      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	bf0c      	ite	eq
 8004412:	2301      	moveq	r3, #1
 8004414:	2300      	movne	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	429a      	cmp	r2, r3
 800441e:	d091      	beq.n	8004344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f855 	bl	80044e2 <_ZNSaIPvED1Ev>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 f838 	bl	80044c2 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZNSt6vectorIPvSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ffeb 	bl	8004442 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f864 	bl	800454c <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f847 	bl	800452c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff ffeb 	bl	800448e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f863 	bl	8004596 <_ZNSaIPvEC1Ev>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f86b 	bl	80045ae <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <_ZNSaIPvED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f873 	bl	80045d6 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8004512:	461a      	mov	r2, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f869 	bl	80045ec <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff84 	bl	800442a <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f86c 	bl	8004612 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f874 	bl	800462a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f87c 	bl	8004652 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800457c:	461a      	mov	r2, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f872 	bl	8004668 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff75 	bl	8004476 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f875 	bl	800468e <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
	{ }
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
	if (__p)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f84d 	bl	80046a4 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f86a 	bl	80046f4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	609a      	str	r2, [r3, #8]
	{ }
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
	if (__p)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	4618      	mov	r0, r3
 8004682:	f000 f842 	bl	800470a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f850 	bl	800475a <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f844 	bl	8004774 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f837 	bl	800478e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f82b 	bl	80047a8 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8004766:	68b8      	ldr	r0, [r7, #8]
 8004768:	f000 fccf 	bl	800510a <_ZdlPv>
      }
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f81e 	bl	80047c2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800479a:	68b8      	ldr	r0, [r7, #8]
 800479c:	f000 fcb5 	bl	800510a <_ZdlPv>
      }
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f80f 	bl	80047d8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <_Z41__static_initialization_and_destruction_0ii>:
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d125      	bne.n	800484c <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004806:	4293      	cmp	r3, r2
 8004808:	d120      	bne.n	800484c <_Z41__static_initialization_and_destruction_0ii+0x5c>
};const NodeInfo_t nodeData[] = {
 800480a:	4b19      	ldr	r3, [pc, #100]	; (8004870 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004810:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 848, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 8004812:	4b17      	ldr	r3, [pc, #92]	; (8004870 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f503 7354 	add.w	r3, r3, #848	; 0x350
};const NodeInfo_t nodeData[] = {
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800481c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8004820:	4b13      	ldr	r3, [pc, #76]	; (8004870 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a13      	ldr	r2, [pc, #76]	; (8004874 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004826:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 8004830:	4a10      	ldr	r2, [pc, #64]	; (8004874 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004832:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a0e      	ldr	r2, [pc, #56]	; (8004874 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800483c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
static std::vector<void*> overflow_buffers;
 8004840:	480d      	ldr	r0, [pc, #52]	; (8004878 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004842:	f7ff fe0b 	bl	800445c <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8004846:	480d      	ldr	r0, [pc, #52]	; (800487c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004848:	f7ff fe2e 	bl	80044a8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004858:	4293      	cmp	r3, r2
 800485a:	d105      	bne.n	8004868 <_Z41__static_initialization_and_destruction_0ii+0x78>
 800485c:	4807      	ldr	r0, [pc, #28]	; (800487c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800485e:	f000 f80f 	bl	8004880 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8004862:	4805      	ldr	r0, [pc, #20]	; (8004878 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004864:	f000 f827 	bl	80048b6 <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000300 	.word	0x20000300
 8004874:	20000008 	.word	0x20000008
 8004878:	20000304 	.word	0x20000304
 800487c:	20000310 	.word	0x20000310

08004880 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8004880:	b5b0      	push	{r4, r5, r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681c      	ldr	r4, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff ff48 	bl	8004728 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8004898:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800489a:	461a      	mov	r2, r3
 800489c:	4629      	mov	r1, r5
 800489e:	4620      	mov	r0, r4
 80048a0:	f7ff ff4d 	bl	800473e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fe5c 	bl	8004564 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bdb0      	pop	{r4, r5, r7, pc}

080048b6 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80048b6:	b5b0      	push	{r4, r5, r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681c      	ldr	r4, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff fefa 	bl	80046c2 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80048ce:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80048d0:	461a      	mov	r2, r3
 80048d2:	4629      	mov	r1, r5
 80048d4:	4620      	mov	r0, r4
 80048d6:	f7ff feff 	bl	80046d8 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fe0c 	bl	80044fa <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bdb0      	pop	{r4, r5, r7, pc}

080048ec <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7ff ff7b 	bl	80047f0 <_Z41__static_initialization_and_destruction_0ii>
 80048fa:	bd80      	pop	{r7, pc}

080048fc <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
 8004900:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004904:	2000      	movs	r0, #0
 8004906:	f7ff ff73 	bl	80047f0 <_Z41__static_initialization_and_destruction_0ii>
 800490a:	bd80      	pop	{r7, pc}

0800490c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004912:	463b      	mov	r3, r7
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	611a      	str	r2, [r3, #16]
 8004920:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8004922:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004924:	4a29      	ldr	r2, [pc, #164]	; (80049cc <MX_ADC1_Init+0xc0>)
 8004926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004928:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <MX_ADC1_Init+0xbc>)
 800492a:	2200      	movs	r2, #0
 800492c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004930:	2200      	movs	r2, #0
 8004932:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004936:	2200      	movs	r2, #0
 8004938:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800493a:	4b23      	ldr	r3, [pc, #140]	; (80049c8 <MX_ADC1_Init+0xbc>)
 800493c:	2200      	movs	r2, #0
 800493e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004940:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004942:	2204      	movs	r2, #4
 8004944:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004948:	2200      	movs	r2, #0
 800494a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800494c:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <MX_ADC1_Init+0xbc>)
 800494e:	2200      	movs	r2, #0
 8004950:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004954:	2201      	movs	r2, #1
 8004956:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004958:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <MX_ADC1_Init+0xbc>)
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004962:	2200      	movs	r2, #0
 8004964:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004968:	2200      	movs	r2, #0
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800496c:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <MX_ADC1_Init+0xbc>)
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004974:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004976:	2200      	movs	r2, #0
 8004978:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <MX_ADC1_Init+0xbc>)
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004982:	4811      	ldr	r0, [pc, #68]	; (80049c8 <MX_ADC1_Init+0xbc>)
 8004984:	f7fc fd3e 	bl	8001404 <HAL_ADC_Init>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800498e:	f000 f9bb 	bl	8004d08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <MX_ADC1_Init+0xc4>)
 8004994:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004996:	2306      	movs	r3, #6
 8004998:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800499e:	237f      	movs	r3, #127	; 0x7f
 80049a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80049a2:	2304      	movs	r3, #4
 80049a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049aa:	463b      	mov	r3, r7
 80049ac:	4619      	mov	r1, r3
 80049ae:	4806      	ldr	r0, [pc, #24]	; (80049c8 <MX_ADC1_Init+0xbc>)
 80049b0:	f7fc ff70 	bl	8001894 <HAL_ADC_ConfigChannel>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80049ba:	f000 f9a5 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80049be:	bf00      	nop
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	2000032c 	.word	0x2000032c
 80049cc:	50040000 	.word	0x50040000
 80049d0:	14f00020 	.word	0x14f00020

080049d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	; 0x28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <HAL_ADC_MspInit+0x74>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d124      	bne.n	8004a40 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <HAL_ADC_MspInit+0x78>)
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <HAL_ADC_MspInit+0x78>)
 80049fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a02:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <HAL_ADC_MspInit+0x78>)
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <HAL_ADC_MspInit+0x78>)
 8004a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a12:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <HAL_ADC_MspInit+0x78>)
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <HAL_ADC_MspInit+0x78>)
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a26:	2301      	movs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004a2a:	230b      	movs	r3, #11
 8004a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a32:	f107 0314 	add.w	r3, r7, #20
 8004a36:	4619      	mov	r1, r3
 8004a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a3c:	f7fd fd4a 	bl	80024d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004a40:	bf00      	nop
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	50040000 	.word	0x50040000
 8004a4c:	40021000 	.word	0x40021000

08004a50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	4a14      	ldr	r2, [pc, #80]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a5c:	f043 0304 	orr.w	r3, r3, #4
 8004a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a7a:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	4a08      	ldr	r2, [pc, #32]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <MX_GPIO_Init+0x5c>)
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]

}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000

08004ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ab0:	b5b0      	push	{r4, r5, r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ab6:	f7fc fa43 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aba:	f000 f87d 	bl	8004bb8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004abe:	f7ff ffc7 	bl	8004a50 <MX_GPIO_Init>
  MX_ADC1_Init();
 8004ac2:	f7ff ff23 	bl	800490c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8004ac6:	f000 fa71 	bl	8004fac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8004aca:	217f      	movs	r1, #127	; 0x7f
 8004acc:	4836      	ldr	r0, [pc, #216]	; (8004ba8 <main+0xf8>)
 8004ace:	f7fd fbbb 	bl	8002248 <HAL_ADCEx_Calibration_Start>
  printf("Hello Wang.Wei\r\n");
 8004ad2:	4836      	ldr	r0, [pc, #216]	; (8004bac <main+0xfc>)
 8004ad4:	f001 faaa 	bl	800602c <puts>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_ADC_Start(&hadc1);
 8004ad8:	4833      	ldr	r0, [pc, #204]	; (8004ba8 <main+0xf8>)
 8004ada:	f7fc fddb 	bl	8001694 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 30);    //
 8004ade:	211e      	movs	r1, #30
 8004ae0:	4831      	ldr	r0, [pc, #196]	; (8004ba8 <main+0xf8>)
 8004ae2:	f7fc fe3a 	bl	800175a <HAL_ADC_PollForConversion>
    if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
 8004ae6:	4830      	ldr	r0, [pc, #192]	; (8004ba8 <main+0xf8>)
 8004ae8:	f7fd fab4 	bl	8002054 <HAL_ADC_GetState>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0ea      	beq.n	8004ad8 <main+0x28>
	{
		ADCvalue=HAL_ADC_GetValue(&hadc1);
 8004b02:	4829      	ldr	r0, [pc, #164]	; (8004ba8 <main+0xf8>)
 8004b04:	f7fc feb8 	bl	8001878 <HAL_ADC_GetValue>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	81fb      	strh	r3, [r7, #14]
		Voltage=ADCvalue*3.3/4096;   //2^12=4096
 8004b0c:	89fb      	ldrh	r3, [r7, #14]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fb fd08 	bl	8000524 <__aeabi_i2d>
 8004b14:	a322      	add	r3, pc, #136	; (adr r3, 8004ba0 <main+0xf0>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fd6d 	bl	80005f8 <__aeabi_dmul>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <main+0x100>)
 8004b2c:	f7fb fe8e 	bl	800084c <__aeabi_ddiv>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	f7fc f836 	bl	8000ba8 <__aeabi_d2f>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	60bb      	str	r3, [r7, #8]
		Rest = Voltage*10/(3.3-Voltage);
 8004b40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b4c:	ee17 0a90 	vmov	r0, s15
 8004b50:	f7fb fcfa 	bl	8000548 <__aeabi_f2d>
 8004b54:	4604      	mov	r4, r0
 8004b56:	460d      	mov	r5, r1
 8004b58:	68b8      	ldr	r0, [r7, #8]
 8004b5a:	f7fb fcf5 	bl	8000548 <__aeabi_f2d>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	a10f      	add	r1, pc, #60	; (adr r1, 8004ba0 <main+0xf0>)
 8004b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b68:	f7fb fb8e 	bl	8000288 <__aeabi_dsub>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4620      	mov	r0, r4
 8004b72:	4629      	mov	r1, r5
 8004b74:	f7fb fe6a 	bl	800084c <__aeabi_ddiv>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f7fc f812 	bl	8000ba8 <__aeabi_d2f>
 8004b84:	4603      	mov	r3, r0
 8004b86:	607b      	str	r3, [r7, #4]
		//printf("ADCvalue:%d  Voltage:%f  Rest:%f \n",ADCvalue,Voltage,Rest);
		//HAL_Delay(200);
		printf("%f\t\r\n",Voltage);
 8004b88:	68b8      	ldr	r0, [r7, #8]
 8004b8a:	f7fb fcdd 	bl	8000548 <__aeabi_f2d>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4808      	ldr	r0, [pc, #32]	; (8004bb4 <main+0x104>)
 8004b94:	f001 f9c4 	bl	8005f20 <iprintf>
    HAL_ADC_Start(&hadc1);
 8004b98:	e79e      	b.n	8004ad8 <main+0x28>
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w
 8004ba0:	66666666 	.word	0x66666666
 8004ba4:	400a6666 	.word	0x400a6666
 8004ba8:	2000032c 	.word	0x2000032c
 8004bac:	0800843c 	.word	0x0800843c
 8004bb0:	40b00000 	.word	0x40b00000
 8004bb4:	0800844c 	.word	0x0800844c

08004bb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b0ae      	sub	sp, #184	; 0xb8
 8004bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bbe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004bc2:	2244      	movs	r2, #68	; 0x44
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fb24 	bl	8005214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bcc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	605a      	str	r2, [r3, #4]
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bdc:	1d3b      	adds	r3, r7, #4
 8004bde:	225c      	movs	r2, #92	; 0x5c
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fb16 	bl	8005214 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004be8:	f7fd fdee 	bl	80027c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004bec:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <_Z18SystemClock_Configv+0x14c>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	4a44      	ldr	r2, [pc, #272]	; (8004d04 <_Z18SystemClock_Configv+0x14c>)
 8004bf4:	f023 0318 	bic.w	r3, r3, #24
 8004bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004bfc:	2314      	movs	r3, #20
 8004bfe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004c00:	2301      	movs	r3, #1
 8004c02:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004c10:	2360      	movs	r3, #96	; 0x60
 8004c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c16:	2302      	movs	r3, #2
 8004c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004c28:	2328      	movs	r3, #40	; 0x28
 8004c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004c2e:	2307      	movs	r3, #7
 8004c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004c34:	2302      	movs	r3, #2
 8004c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fd fe33 	bl	80028b0 <HAL_RCC_OscConfig>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8004c5a:	f000 f855 	bl	8004d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c5e:	230f      	movs	r3, #15
 8004c60:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c62:	2303      	movs	r3, #3
 8004c64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c66:	2300      	movs	r3, #0
 8004c68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004c72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c76:	2104      	movs	r1, #4
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fe fa39 	bl	80030f0 <HAL_RCC_ClockConfig>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8004c8e:	f000 f83b 	bl	8004d08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8004c92:	f244 0301 	movw	r3, #16385	; 0x4001
 8004c96:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ca0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 18;
 8004caa:	2312      	movs	r3, #18
 8004cac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004cae:	2307      	movs	r3, #7
 8004cb0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV6;
 8004cb6:	2306      	movs	r3, #6
 8004cb8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cbe:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cc0:	1d3b      	adds	r3, r7, #4
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fc1a 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <_Z18SystemClock_Configv+0x124>
  {
    Error_Handler();
 8004cd8:	f000 f816 	bl	8004d08 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004cdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ce0:	f7fd fd90 	bl	8002804 <HAL_PWREx_ControlVoltageScaling>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <_Z18SystemClock_Configv+0x140>
  {
    Error_Handler();
 8004cf4:	f000 f808 	bl	8004d08 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004cf8:	f7fe fe18 	bl	800392c <HAL_RCCEx_EnableMSIPLLMode>
}
 8004cfc:	bf00      	nop
 8004cfe:	37b8      	adds	r7, #184	; 0xb8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000

08004d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8004d0c:	e7fe      	b.n	8004d0c <Error_Handler+0x4>
	...

08004d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_MspInit+0x44>)
 8004d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <HAL_MspInit+0x44>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6613      	str	r3, [r2, #96]	; 0x60
 8004d22:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_MspInit+0x44>)
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_MspInit+0x44>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <HAL_MspInit+0x44>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6593      	str	r3, [r2, #88]	; 0x58
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_MspInit+0x44>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40021000 	.word	0x40021000

08004d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d6a:	e7fe      	b.n	8004d6a <HardFault_Handler+0x4>

08004d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d70:	e7fe      	b.n	8004d70 <MemManage_Handler+0x4>

08004d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d72:	b480      	push	{r7}
 8004d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d76:	e7fe      	b.n	8004d76 <BusFault_Handler+0x4>

08004d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d7c:	e7fe      	b.n	8004d7c <UsageFault_Handler+0x4>

08004d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dac:	f7fc f91c 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
	return 1;
 8004db8:	2301      	movs	r3, #1
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <_kill>:

int _kill(int pid, int sig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004dce:	f000 f9c3 	bl	8005158 <__errno>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2216      	movs	r2, #22
 8004dd6:	601a      	str	r2, [r3, #0]
	return -1;
 8004dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_exit>:

void _exit (int status)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004dec:	f04f 31ff 	mov.w	r1, #4294967295
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ffe7 	bl	8004dc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004df6:	e7fe      	b.n	8004df6 <_exit+0x12>

08004df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e00a      	b.n	8004e20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e0a:	f3af 8000 	nop.w
 8004e0e:	4601      	mov	r1, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	60ba      	str	r2, [r7, #8]
 8004e16:	b2ca      	uxtb	r2, r1
 8004e18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	dbf0      	blt.n	8004e0a <_read+0x12>
	}

return len;
 8004e28:	687b      	ldr	r3, [r7, #4]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b086      	sub	sp, #24
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e009      	b.n	8004e58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	60ba      	str	r2, [r7, #8]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 f921 	bl	8005094 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3301      	adds	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	dbf1      	blt.n	8004e44 <_write+0x12>
	}
	return len;
 8004e60:	687b      	ldr	r3, [r7, #4]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <_close>:

int _close(int file)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
	return -1;
 8004e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e92:	605a      	str	r2, [r3, #4]
	return 0;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <_isatty>:

int _isatty(int file)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
	return 1;
 8004eaa:	2301      	movs	r3, #1
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004edc:	4a14      	ldr	r2, [pc, #80]	; (8004f30 <_sbrk+0x5c>)
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <_sbrk+0x60>)
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ee8:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <_sbrk+0x64>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ef0:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <_sbrk+0x64>)
 8004ef2:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <_sbrk+0x68>)
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <_sbrk+0x64>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d207      	bcs.n	8004f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f04:	f000 f928 	bl	8005158 <__errno>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	220c      	movs	r2, #12
 8004f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f12:	e009      	b.n	8004f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f14:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <_sbrk+0x64>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <_sbrk+0x64>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <_sbrk+0x64>)
 8004f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f26:	68fb      	ldr	r3, [r7, #12]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20010000 	.word	0x20010000
 8004f34:	00000400 	.word	0x00000400
 8004f38:	2000031c 	.word	0x2000031c
 8004f3c:	20000428 	.word	0x20000428

08004f40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f44:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <SystemInit+0x64>)
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4a:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <SystemInit+0x64>)
 8004f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004f54:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <SystemInit+0x68>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <SystemInit+0x68>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <SystemInit+0x68>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <SystemInit+0x68>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a0f      	ldr	r2, [pc, #60]	; (8004fa8 <SystemInit+0x68>)
 8004f6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004f70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004f74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <SystemInit+0x68>)
 8004f78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <SystemInit+0x68>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <SystemInit+0x68>)
 8004f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <SystemInit+0x68>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <SystemInit+0x64>)
 8004f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f96:	609a      	str	r2, [r3, #8]
#endif
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	e000ed00 	.word	0xe000ed00
 8004fa8:	40021000 	.word	0x40021000

08004fac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fb2:	4a15      	ldr	r2, [pc, #84]	; (8005008 <MX_USART1_UART_Init+0x5c>)
 8004fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004fb6:	4b13      	ldr	r3, [pc, #76]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fca:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fd2:	220c      	movs	r2, #12
 8004fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fe2:	4b08      	ldr	r3, [pc, #32]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fee:	4805      	ldr	r0, [pc, #20]	; (8005004 <MX_USART1_UART_Init+0x58>)
 8004ff0:	f7fe fd9e 	bl	8003b30 <HAL_UART_Init>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004ffa:	f7ff fe85 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000390 	.word	0x20000390
 8005008:	40013800 	.word	0x40013800

0800500c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	605a      	str	r2, [r3, #4]
 800501e:	609a      	str	r2, [r3, #8]
 8005020:	60da      	str	r2, [r3, #12]
 8005022:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_UART_MspInit+0x80>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d129      	bne.n	8005082 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800502e:	4b18      	ldr	r3, [pc, #96]	; (8005090 <HAL_UART_MspInit+0x84>)
 8005030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005032:	4a17      	ldr	r2, [pc, #92]	; (8005090 <HAL_UART_MspInit+0x84>)
 8005034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005038:	6613      	str	r3, [r2, #96]	; 0x60
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <HAL_UART_MspInit+0x84>)
 800503c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <HAL_UART_MspInit+0x84>)
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	4a11      	ldr	r2, [pc, #68]	; (8005090 <HAL_UART_MspInit+0x84>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <HAL_UART_MspInit+0x84>)
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800505e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	2300      	movs	r3, #0
 800506a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506c:	2303      	movs	r3, #3
 800506e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005070:	2307      	movs	r3, #7
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005074:	f107 0314 	add.w	r3, r7, #20
 8005078:	4619      	mov	r1, r3
 800507a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800507e:	f7fd fa29 	bl	80024d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005082:	bf00      	nop
 8005084:	3728      	adds	r7, #40	; 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40013800 	.word	0x40013800
 8005090:	40021000 	.word	0x40021000

08005094 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800509c:	1d39      	adds	r1, r7, #4
 800509e:	f04f 33ff 	mov.w	r3, #4294967295
 80050a2:	2201      	movs	r2, #1
 80050a4:	4803      	ldr	r0, [pc, #12]	; (80050b4 <__io_putchar+0x20>)
 80050a6:	f7fe fd91 	bl	8003bcc <HAL_UART_Transmit>
  return ch;
 80050aa:	687b      	ldr	r3, [r7, #4]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000390 	.word	0x20000390

080050b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80050b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80050bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80050be:	e003      	b.n	80050c8 <LoopCopyDataInit>

080050c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80050c0:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80050c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80050c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80050c6:	3104      	adds	r1, #4

080050c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80050c8:	480b      	ldr	r0, [pc, #44]	; (80050f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80050ca:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80050cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80050ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80050d0:	d3f6      	bcc.n	80050c0 <CopyDataInit>
	ldr	r2, =_sbss
 80050d2:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <LoopForever+0x12>)
	b	LoopFillZerobss
 80050d4:	e002      	b.n	80050dc <LoopFillZerobss>

080050d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80050d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80050d8:	f842 3b04 	str.w	r3, [r2], #4

080050dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <LoopForever+0x16>)
	cmp	r2, r3
 80050de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80050e0:	d3f9      	bcc.n	80050d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80050e2:	f7ff ff2d 	bl	8004f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050e6:	f000 f84f 	bl	8005188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050ea:	f7ff fce1 	bl	8004ab0 <main>

080050ee <LoopForever>:

LoopForever:
    b LoopForever
 80050ee:	e7fe      	b.n	80050ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80050f0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80050f4:	0800cdec 	.word	0x0800cdec
	ldr	r0, =_sdata
 80050f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80050fc:	200002e4 	.word	0x200002e4
	ldr	r2, =_sbss
 8005100:	200002e4 	.word	0x200002e4
	ldr	r3, = _ebss
 8005104:	20000424 	.word	0x20000424

08005108 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005108:	e7fe      	b.n	8005108 <ADC1_IRQHandler>

0800510a <_ZdlPv>:
 800510a:	f000 b86d 	b.w	80051e8 <free>

0800510e <abort>:
 800510e:	b508      	push	{r3, lr}
 8005110:	2006      	movs	r0, #6
 8005112:	f000 ffcb 	bl	80060ac <raise>
 8005116:	2001      	movs	r0, #1
 8005118:	f7ff fe64 	bl	8004de4 <_exit>

0800511c <__assert_func>:
 800511c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800511e:	4614      	mov	r4, r2
 8005120:	461a      	mov	r2, r3
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <__assert_func+0x2c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4605      	mov	r5, r0
 8005128:	68d8      	ldr	r0, [r3, #12]
 800512a:	b14c      	cbz	r4, 8005140 <__assert_func+0x24>
 800512c:	4b07      	ldr	r3, [pc, #28]	; (800514c <__assert_func+0x30>)
 800512e:	9100      	str	r1, [sp, #0]
 8005130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005134:	4906      	ldr	r1, [pc, #24]	; (8005150 <__assert_func+0x34>)
 8005136:	462b      	mov	r3, r5
 8005138:	f000 f814 	bl	8005164 <fiprintf>
 800513c:	f7ff ffe7 	bl	800510e <abort>
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <__assert_func+0x38>)
 8005142:	461c      	mov	r4, r3
 8005144:	e7f3      	b.n	800512e <__assert_func+0x12>
 8005146:	bf00      	nop
 8005148:	20000114 	.word	0x20000114
 800514c:	0800c9ec 	.word	0x0800c9ec
 8005150:	0800c9f9 	.word	0x0800c9f9
 8005154:	0800ca27 	.word	0x0800ca27

08005158 <__errno>:
 8005158:	4b01      	ldr	r3, [pc, #4]	; (8005160 <__errno+0x8>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000114 	.word	0x20000114

08005164 <fiprintf>:
 8005164:	b40e      	push	{r1, r2, r3}
 8005166:	b503      	push	{r0, r1, lr}
 8005168:	4601      	mov	r1, r0
 800516a:	ab03      	add	r3, sp, #12
 800516c:	4805      	ldr	r0, [pc, #20]	; (8005184 <fiprintf+0x20>)
 800516e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005172:	6800      	ldr	r0, [r0, #0]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	f000 f939 	bl	80053ec <_vfiprintf_r>
 800517a:	b002      	add	sp, #8
 800517c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005180:	b003      	add	sp, #12
 8005182:	4770      	bx	lr
 8005184:	20000114 	.word	0x20000114

08005188 <__libc_init_array>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	4d0d      	ldr	r5, [pc, #52]	; (80051c0 <__libc_init_array+0x38>)
 800518c:	4c0d      	ldr	r4, [pc, #52]	; (80051c4 <__libc_init_array+0x3c>)
 800518e:	1b64      	subs	r4, r4, r5
 8005190:	10a4      	asrs	r4, r4, #2
 8005192:	2600      	movs	r6, #0
 8005194:	42a6      	cmp	r6, r4
 8005196:	d109      	bne.n	80051ac <__libc_init_array+0x24>
 8005198:	4d0b      	ldr	r5, [pc, #44]	; (80051c8 <__libc_init_array+0x40>)
 800519a:	4c0c      	ldr	r4, [pc, #48]	; (80051cc <__libc_init_array+0x44>)
 800519c:	f002 fd50 	bl	8007c40 <_init>
 80051a0:	1b64      	subs	r4, r4, r5
 80051a2:	10a4      	asrs	r4, r4, #2
 80051a4:	2600      	movs	r6, #0
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	d105      	bne.n	80051b6 <__libc_init_array+0x2e>
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b0:	4798      	blx	r3
 80051b2:	3601      	adds	r6, #1
 80051b4:	e7ee      	b.n	8005194 <__libc_init_array+0xc>
 80051b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ba:	4798      	blx	r3
 80051bc:	3601      	adds	r6, #1
 80051be:	e7f2      	b.n	80051a6 <__libc_init_array+0x1e>
 80051c0:	0800cddc 	.word	0x0800cddc
 80051c4:	0800cddc 	.word	0x0800cddc
 80051c8:	0800cddc 	.word	0x0800cddc
 80051cc:	0800cde4 	.word	0x0800cde4

080051d0 <__retarget_lock_init_recursive>:
 80051d0:	4770      	bx	lr

080051d2 <__retarget_lock_acquire_recursive>:
 80051d2:	4770      	bx	lr

080051d4 <__retarget_lock_release_recursive>:
 80051d4:	4770      	bx	lr
	...

080051d8 <malloc>:
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <malloc+0xc>)
 80051da:	4601      	mov	r1, r0
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	f000 b881 	b.w	80052e4 <_malloc_r>
 80051e2:	bf00      	nop
 80051e4:	20000114 	.word	0x20000114

080051e8 <free>:
 80051e8:	4b02      	ldr	r3, [pc, #8]	; (80051f4 <free+0xc>)
 80051ea:	4601      	mov	r1, r0
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	f000 b829 	b.w	8005244 <_free_r>
 80051f2:	bf00      	nop
 80051f4:	20000114 	.word	0x20000114

080051f8 <memcpy>:
 80051f8:	440a      	add	r2, r1
 80051fa:	4291      	cmp	r1, r2
 80051fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005200:	d100      	bne.n	8005204 <memcpy+0xc>
 8005202:	4770      	bx	lr
 8005204:	b510      	push	{r4, lr}
 8005206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800520a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800520e:	4291      	cmp	r1, r2
 8005210:	d1f9      	bne.n	8005206 <memcpy+0xe>
 8005212:	bd10      	pop	{r4, pc}

08005214 <memset>:
 8005214:	4402      	add	r2, r0
 8005216:	4603      	mov	r3, r0
 8005218:	4293      	cmp	r3, r2
 800521a:	d100      	bne.n	800521e <memset+0xa>
 800521c:	4770      	bx	lr
 800521e:	f803 1b01 	strb.w	r1, [r3], #1
 8005222:	e7f9      	b.n	8005218 <memset+0x4>

08005224 <_calloc_r>:
 8005224:	b513      	push	{r0, r1, r4, lr}
 8005226:	434a      	muls	r2, r1
 8005228:	4611      	mov	r1, r2
 800522a:	9201      	str	r2, [sp, #4]
 800522c:	f000 f85a 	bl	80052e4 <_malloc_r>
 8005230:	4604      	mov	r4, r0
 8005232:	b118      	cbz	r0, 800523c <_calloc_r+0x18>
 8005234:	9a01      	ldr	r2, [sp, #4]
 8005236:	2100      	movs	r1, #0
 8005238:	f7ff ffec 	bl	8005214 <memset>
 800523c:	4620      	mov	r0, r4
 800523e:	b002      	add	sp, #8
 8005240:	bd10      	pop	{r4, pc}
	...

08005244 <_free_r>:
 8005244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005246:	2900      	cmp	r1, #0
 8005248:	d048      	beq.n	80052dc <_free_r+0x98>
 800524a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800524e:	9001      	str	r0, [sp, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f1a1 0404 	sub.w	r4, r1, #4
 8005256:	bfb8      	it	lt
 8005258:	18e4      	addlt	r4, r4, r3
 800525a:	f002 f8af 	bl	80073bc <__malloc_lock>
 800525e:	4a20      	ldr	r2, [pc, #128]	; (80052e0 <_free_r+0x9c>)
 8005260:	9801      	ldr	r0, [sp, #4]
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	4615      	mov	r5, r2
 8005266:	b933      	cbnz	r3, 8005276 <_free_r+0x32>
 8005268:	6063      	str	r3, [r4, #4]
 800526a:	6014      	str	r4, [r2, #0]
 800526c:	b003      	add	sp, #12
 800526e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005272:	f002 b8a9 	b.w	80073c8 <__malloc_unlock>
 8005276:	42a3      	cmp	r3, r4
 8005278:	d90b      	bls.n	8005292 <_free_r+0x4e>
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	1862      	adds	r2, r4, r1
 800527e:	4293      	cmp	r3, r2
 8005280:	bf04      	itt	eq
 8005282:	681a      	ldreq	r2, [r3, #0]
 8005284:	685b      	ldreq	r3, [r3, #4]
 8005286:	6063      	str	r3, [r4, #4]
 8005288:	bf04      	itt	eq
 800528a:	1852      	addeq	r2, r2, r1
 800528c:	6022      	streq	r2, [r4, #0]
 800528e:	602c      	str	r4, [r5, #0]
 8005290:	e7ec      	b.n	800526c <_free_r+0x28>
 8005292:	461a      	mov	r2, r3
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b10b      	cbz	r3, 800529c <_free_r+0x58>
 8005298:	42a3      	cmp	r3, r4
 800529a:	d9fa      	bls.n	8005292 <_free_r+0x4e>
 800529c:	6811      	ldr	r1, [r2, #0]
 800529e:	1855      	adds	r5, r2, r1
 80052a0:	42a5      	cmp	r5, r4
 80052a2:	d10b      	bne.n	80052bc <_free_r+0x78>
 80052a4:	6824      	ldr	r4, [r4, #0]
 80052a6:	4421      	add	r1, r4
 80052a8:	1854      	adds	r4, r2, r1
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	d1dd      	bne.n	800526c <_free_r+0x28>
 80052b0:	681c      	ldr	r4, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	6053      	str	r3, [r2, #4]
 80052b6:	4421      	add	r1, r4
 80052b8:	6011      	str	r1, [r2, #0]
 80052ba:	e7d7      	b.n	800526c <_free_r+0x28>
 80052bc:	d902      	bls.n	80052c4 <_free_r+0x80>
 80052be:	230c      	movs	r3, #12
 80052c0:	6003      	str	r3, [r0, #0]
 80052c2:	e7d3      	b.n	800526c <_free_r+0x28>
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	1961      	adds	r1, r4, r5
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf04      	itt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	6063      	str	r3, [r4, #4]
 80052d2:	bf04      	itt	eq
 80052d4:	1949      	addeq	r1, r1, r5
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	6054      	str	r4, [r2, #4]
 80052da:	e7c7      	b.n	800526c <_free_r+0x28>
 80052dc:	b003      	add	sp, #12
 80052de:	bd30      	pop	{r4, r5, pc}
 80052e0:	20000320 	.word	0x20000320

080052e4 <_malloc_r>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	1ccd      	adds	r5, r1, #3
 80052e8:	f025 0503 	bic.w	r5, r5, #3
 80052ec:	3508      	adds	r5, #8
 80052ee:	2d0c      	cmp	r5, #12
 80052f0:	bf38      	it	cc
 80052f2:	250c      	movcc	r5, #12
 80052f4:	2d00      	cmp	r5, #0
 80052f6:	4606      	mov	r6, r0
 80052f8:	db01      	blt.n	80052fe <_malloc_r+0x1a>
 80052fa:	42a9      	cmp	r1, r5
 80052fc:	d903      	bls.n	8005306 <_malloc_r+0x22>
 80052fe:	230c      	movs	r3, #12
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	2000      	movs	r0, #0
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005306:	f002 f859 	bl	80073bc <__malloc_lock>
 800530a:	4921      	ldr	r1, [pc, #132]	; (8005390 <_malloc_r+0xac>)
 800530c:	680a      	ldr	r2, [r1, #0]
 800530e:	4614      	mov	r4, r2
 8005310:	b99c      	cbnz	r4, 800533a <_malloc_r+0x56>
 8005312:	4f20      	ldr	r7, [pc, #128]	; (8005394 <_malloc_r+0xb0>)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	b923      	cbnz	r3, 8005322 <_malloc_r+0x3e>
 8005318:	4621      	mov	r1, r4
 800531a:	4630      	mov	r0, r6
 800531c:	f000 fe8e 	bl	800603c <_sbrk_r>
 8005320:	6038      	str	r0, [r7, #0]
 8005322:	4629      	mov	r1, r5
 8005324:	4630      	mov	r0, r6
 8005326:	f000 fe89 	bl	800603c <_sbrk_r>
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	d123      	bne.n	8005376 <_malloc_r+0x92>
 800532e:	230c      	movs	r3, #12
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	4630      	mov	r0, r6
 8005334:	f002 f848 	bl	80073c8 <__malloc_unlock>
 8005338:	e7e3      	b.n	8005302 <_malloc_r+0x1e>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	1b5b      	subs	r3, r3, r5
 800533e:	d417      	bmi.n	8005370 <_malloc_r+0x8c>
 8005340:	2b0b      	cmp	r3, #11
 8005342:	d903      	bls.n	800534c <_malloc_r+0x68>
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	441c      	add	r4, r3
 8005348:	6025      	str	r5, [r4, #0]
 800534a:	e004      	b.n	8005356 <_malloc_r+0x72>
 800534c:	6863      	ldr	r3, [r4, #4]
 800534e:	42a2      	cmp	r2, r4
 8005350:	bf0c      	ite	eq
 8005352:	600b      	streq	r3, [r1, #0]
 8005354:	6053      	strne	r3, [r2, #4]
 8005356:	4630      	mov	r0, r6
 8005358:	f002 f836 	bl	80073c8 <__malloc_unlock>
 800535c:	f104 000b 	add.w	r0, r4, #11
 8005360:	1d23      	adds	r3, r4, #4
 8005362:	f020 0007 	bic.w	r0, r0, #7
 8005366:	1ac2      	subs	r2, r0, r3
 8005368:	d0cc      	beq.n	8005304 <_malloc_r+0x20>
 800536a:	1a1b      	subs	r3, r3, r0
 800536c:	50a3      	str	r3, [r4, r2]
 800536e:	e7c9      	b.n	8005304 <_malloc_r+0x20>
 8005370:	4622      	mov	r2, r4
 8005372:	6864      	ldr	r4, [r4, #4]
 8005374:	e7cc      	b.n	8005310 <_malloc_r+0x2c>
 8005376:	1cc4      	adds	r4, r0, #3
 8005378:	f024 0403 	bic.w	r4, r4, #3
 800537c:	42a0      	cmp	r0, r4
 800537e:	d0e3      	beq.n	8005348 <_malloc_r+0x64>
 8005380:	1a21      	subs	r1, r4, r0
 8005382:	4630      	mov	r0, r6
 8005384:	f000 fe5a 	bl	800603c <_sbrk_r>
 8005388:	3001      	adds	r0, #1
 800538a:	d1dd      	bne.n	8005348 <_malloc_r+0x64>
 800538c:	e7cf      	b.n	800532e <_malloc_r+0x4a>
 800538e:	bf00      	nop
 8005390:	20000320 	.word	0x20000320
 8005394:	20000324 	.word	0x20000324

08005398 <__sfputc_r>:
 8005398:	6893      	ldr	r3, [r2, #8]
 800539a:	3b01      	subs	r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	b410      	push	{r4}
 80053a0:	6093      	str	r3, [r2, #8]
 80053a2:	da08      	bge.n	80053b6 <__sfputc_r+0x1e>
 80053a4:	6994      	ldr	r4, [r2, #24]
 80053a6:	42a3      	cmp	r3, r4
 80053a8:	db01      	blt.n	80053ae <__sfputc_r+0x16>
 80053aa:	290a      	cmp	r1, #10
 80053ac:	d103      	bne.n	80053b6 <__sfputc_r+0x1e>
 80053ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b2:	f000 be97 	b.w	80060e4 <__swbuf_r>
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	1c58      	adds	r0, r3, #1
 80053ba:	6010      	str	r0, [r2, #0]
 80053bc:	7019      	strb	r1, [r3, #0]
 80053be:	4608      	mov	r0, r1
 80053c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <__sfputs_r>:
 80053c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c8:	4606      	mov	r6, r0
 80053ca:	460f      	mov	r7, r1
 80053cc:	4614      	mov	r4, r2
 80053ce:	18d5      	adds	r5, r2, r3
 80053d0:	42ac      	cmp	r4, r5
 80053d2:	d101      	bne.n	80053d8 <__sfputs_r+0x12>
 80053d4:	2000      	movs	r0, #0
 80053d6:	e007      	b.n	80053e8 <__sfputs_r+0x22>
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	463a      	mov	r2, r7
 80053de:	4630      	mov	r0, r6
 80053e0:	f7ff ffda 	bl	8005398 <__sfputc_r>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d1f3      	bne.n	80053d0 <__sfputs_r+0xa>
 80053e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053ec <_vfiprintf_r>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	460d      	mov	r5, r1
 80053f2:	b09d      	sub	sp, #116	; 0x74
 80053f4:	4614      	mov	r4, r2
 80053f6:	4698      	mov	r8, r3
 80053f8:	4606      	mov	r6, r0
 80053fa:	b118      	cbz	r0, 8005404 <_vfiprintf_r+0x18>
 80053fc:	6983      	ldr	r3, [r0, #24]
 80053fe:	b90b      	cbnz	r3, 8005404 <_vfiprintf_r+0x18>
 8005400:	f001 fec4 	bl	800718c <__sinit>
 8005404:	4b89      	ldr	r3, [pc, #548]	; (800562c <_vfiprintf_r+0x240>)
 8005406:	429d      	cmp	r5, r3
 8005408:	d11b      	bne.n	8005442 <_vfiprintf_r+0x56>
 800540a:	6875      	ldr	r5, [r6, #4]
 800540c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800540e:	07d9      	lsls	r1, r3, #31
 8005410:	d405      	bmi.n	800541e <_vfiprintf_r+0x32>
 8005412:	89ab      	ldrh	r3, [r5, #12]
 8005414:	059a      	lsls	r2, r3, #22
 8005416:	d402      	bmi.n	800541e <_vfiprintf_r+0x32>
 8005418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800541a:	f7ff feda 	bl	80051d2 <__retarget_lock_acquire_recursive>
 800541e:	89ab      	ldrh	r3, [r5, #12]
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	d501      	bpl.n	8005428 <_vfiprintf_r+0x3c>
 8005424:	692b      	ldr	r3, [r5, #16]
 8005426:	b9eb      	cbnz	r3, 8005464 <_vfiprintf_r+0x78>
 8005428:	4629      	mov	r1, r5
 800542a:	4630      	mov	r0, r6
 800542c:	f000 feac 	bl	8006188 <__swsetup_r>
 8005430:	b1c0      	cbz	r0, 8005464 <_vfiprintf_r+0x78>
 8005432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005434:	07dc      	lsls	r4, r3, #31
 8005436:	d50e      	bpl.n	8005456 <_vfiprintf_r+0x6a>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	b01d      	add	sp, #116	; 0x74
 800543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005442:	4b7b      	ldr	r3, [pc, #492]	; (8005630 <_vfiprintf_r+0x244>)
 8005444:	429d      	cmp	r5, r3
 8005446:	d101      	bne.n	800544c <_vfiprintf_r+0x60>
 8005448:	68b5      	ldr	r5, [r6, #8]
 800544a:	e7df      	b.n	800540c <_vfiprintf_r+0x20>
 800544c:	4b79      	ldr	r3, [pc, #484]	; (8005634 <_vfiprintf_r+0x248>)
 800544e:	429d      	cmp	r5, r3
 8005450:	bf08      	it	eq
 8005452:	68f5      	ldreq	r5, [r6, #12]
 8005454:	e7da      	b.n	800540c <_vfiprintf_r+0x20>
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	0598      	lsls	r0, r3, #22
 800545a:	d4ed      	bmi.n	8005438 <_vfiprintf_r+0x4c>
 800545c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800545e:	f7ff feb9 	bl	80051d4 <__retarget_lock_release_recursive>
 8005462:	e7e9      	b.n	8005438 <_vfiprintf_r+0x4c>
 8005464:	2300      	movs	r3, #0
 8005466:	9309      	str	r3, [sp, #36]	; 0x24
 8005468:	2320      	movs	r3, #32
 800546a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800546e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005472:	2330      	movs	r3, #48	; 0x30
 8005474:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005638 <_vfiprintf_r+0x24c>
 8005478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800547c:	f04f 0901 	mov.w	r9, #1
 8005480:	4623      	mov	r3, r4
 8005482:	469a      	mov	sl, r3
 8005484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005488:	b10a      	cbz	r2, 800548e <_vfiprintf_r+0xa2>
 800548a:	2a25      	cmp	r2, #37	; 0x25
 800548c:	d1f9      	bne.n	8005482 <_vfiprintf_r+0x96>
 800548e:	ebba 0b04 	subs.w	fp, sl, r4
 8005492:	d00b      	beq.n	80054ac <_vfiprintf_r+0xc0>
 8005494:	465b      	mov	r3, fp
 8005496:	4622      	mov	r2, r4
 8005498:	4629      	mov	r1, r5
 800549a:	4630      	mov	r0, r6
 800549c:	f7ff ff93 	bl	80053c6 <__sfputs_r>
 80054a0:	3001      	adds	r0, #1
 80054a2:	f000 80aa 	beq.w	80055fa <_vfiprintf_r+0x20e>
 80054a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054a8:	445a      	add	r2, fp
 80054aa:	9209      	str	r2, [sp, #36]	; 0x24
 80054ac:	f89a 3000 	ldrb.w	r3, [sl]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80a2 	beq.w	80055fa <_vfiprintf_r+0x20e>
 80054b6:	2300      	movs	r3, #0
 80054b8:	f04f 32ff 	mov.w	r2, #4294967295
 80054bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054c0:	f10a 0a01 	add.w	sl, sl, #1
 80054c4:	9304      	str	r3, [sp, #16]
 80054c6:	9307      	str	r3, [sp, #28]
 80054c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054cc:	931a      	str	r3, [sp, #104]	; 0x68
 80054ce:	4654      	mov	r4, sl
 80054d0:	2205      	movs	r2, #5
 80054d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d6:	4858      	ldr	r0, [pc, #352]	; (8005638 <_vfiprintf_r+0x24c>)
 80054d8:	f7fa fe7a 	bl	80001d0 <memchr>
 80054dc:	9a04      	ldr	r2, [sp, #16]
 80054de:	b9d8      	cbnz	r0, 8005518 <_vfiprintf_r+0x12c>
 80054e0:	06d1      	lsls	r1, r2, #27
 80054e2:	bf44      	itt	mi
 80054e4:	2320      	movmi	r3, #32
 80054e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ea:	0713      	lsls	r3, r2, #28
 80054ec:	bf44      	itt	mi
 80054ee:	232b      	movmi	r3, #43	; 0x2b
 80054f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054f4:	f89a 3000 	ldrb.w	r3, [sl]
 80054f8:	2b2a      	cmp	r3, #42	; 0x2a
 80054fa:	d015      	beq.n	8005528 <_vfiprintf_r+0x13c>
 80054fc:	9a07      	ldr	r2, [sp, #28]
 80054fe:	4654      	mov	r4, sl
 8005500:	2000      	movs	r0, #0
 8005502:	f04f 0c0a 	mov.w	ip, #10
 8005506:	4621      	mov	r1, r4
 8005508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800550c:	3b30      	subs	r3, #48	; 0x30
 800550e:	2b09      	cmp	r3, #9
 8005510:	d94e      	bls.n	80055b0 <_vfiprintf_r+0x1c4>
 8005512:	b1b0      	cbz	r0, 8005542 <_vfiprintf_r+0x156>
 8005514:	9207      	str	r2, [sp, #28]
 8005516:	e014      	b.n	8005542 <_vfiprintf_r+0x156>
 8005518:	eba0 0308 	sub.w	r3, r0, r8
 800551c:	fa09 f303 	lsl.w	r3, r9, r3
 8005520:	4313      	orrs	r3, r2
 8005522:	9304      	str	r3, [sp, #16]
 8005524:	46a2      	mov	sl, r4
 8005526:	e7d2      	b.n	80054ce <_vfiprintf_r+0xe2>
 8005528:	9b03      	ldr	r3, [sp, #12]
 800552a:	1d19      	adds	r1, r3, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	9103      	str	r1, [sp, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	bfbb      	ittet	lt
 8005534:	425b      	neglt	r3, r3
 8005536:	f042 0202 	orrlt.w	r2, r2, #2
 800553a:	9307      	strge	r3, [sp, #28]
 800553c:	9307      	strlt	r3, [sp, #28]
 800553e:	bfb8      	it	lt
 8005540:	9204      	strlt	r2, [sp, #16]
 8005542:	7823      	ldrb	r3, [r4, #0]
 8005544:	2b2e      	cmp	r3, #46	; 0x2e
 8005546:	d10c      	bne.n	8005562 <_vfiprintf_r+0x176>
 8005548:	7863      	ldrb	r3, [r4, #1]
 800554a:	2b2a      	cmp	r3, #42	; 0x2a
 800554c:	d135      	bne.n	80055ba <_vfiprintf_r+0x1ce>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	1d1a      	adds	r2, r3, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	9203      	str	r2, [sp, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	bfb8      	it	lt
 800555a:	f04f 33ff 	movlt.w	r3, #4294967295
 800555e:	3402      	adds	r4, #2
 8005560:	9305      	str	r3, [sp, #20]
 8005562:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005648 <_vfiprintf_r+0x25c>
 8005566:	7821      	ldrb	r1, [r4, #0]
 8005568:	2203      	movs	r2, #3
 800556a:	4650      	mov	r0, sl
 800556c:	f7fa fe30 	bl	80001d0 <memchr>
 8005570:	b140      	cbz	r0, 8005584 <_vfiprintf_r+0x198>
 8005572:	2340      	movs	r3, #64	; 0x40
 8005574:	eba0 000a 	sub.w	r0, r0, sl
 8005578:	fa03 f000 	lsl.w	r0, r3, r0
 800557c:	9b04      	ldr	r3, [sp, #16]
 800557e:	4303      	orrs	r3, r0
 8005580:	3401      	adds	r4, #1
 8005582:	9304      	str	r3, [sp, #16]
 8005584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005588:	482c      	ldr	r0, [pc, #176]	; (800563c <_vfiprintf_r+0x250>)
 800558a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800558e:	2206      	movs	r2, #6
 8005590:	f7fa fe1e 	bl	80001d0 <memchr>
 8005594:	2800      	cmp	r0, #0
 8005596:	d03f      	beq.n	8005618 <_vfiprintf_r+0x22c>
 8005598:	4b29      	ldr	r3, [pc, #164]	; (8005640 <_vfiprintf_r+0x254>)
 800559a:	bb1b      	cbnz	r3, 80055e4 <_vfiprintf_r+0x1f8>
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	3307      	adds	r3, #7
 80055a0:	f023 0307 	bic.w	r3, r3, #7
 80055a4:	3308      	adds	r3, #8
 80055a6:	9303      	str	r3, [sp, #12]
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	443b      	add	r3, r7
 80055ac:	9309      	str	r3, [sp, #36]	; 0x24
 80055ae:	e767      	b.n	8005480 <_vfiprintf_r+0x94>
 80055b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80055b4:	460c      	mov	r4, r1
 80055b6:	2001      	movs	r0, #1
 80055b8:	e7a5      	b.n	8005506 <_vfiprintf_r+0x11a>
 80055ba:	2300      	movs	r3, #0
 80055bc:	3401      	adds	r4, #1
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	4619      	mov	r1, r3
 80055c2:	f04f 0c0a 	mov.w	ip, #10
 80055c6:	4620      	mov	r0, r4
 80055c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055cc:	3a30      	subs	r2, #48	; 0x30
 80055ce:	2a09      	cmp	r2, #9
 80055d0:	d903      	bls.n	80055da <_vfiprintf_r+0x1ee>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0c5      	beq.n	8005562 <_vfiprintf_r+0x176>
 80055d6:	9105      	str	r1, [sp, #20]
 80055d8:	e7c3      	b.n	8005562 <_vfiprintf_r+0x176>
 80055da:	fb0c 2101 	mla	r1, ip, r1, r2
 80055de:	4604      	mov	r4, r0
 80055e0:	2301      	movs	r3, #1
 80055e2:	e7f0      	b.n	80055c6 <_vfiprintf_r+0x1da>
 80055e4:	ab03      	add	r3, sp, #12
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	462a      	mov	r2, r5
 80055ea:	4b16      	ldr	r3, [pc, #88]	; (8005644 <_vfiprintf_r+0x258>)
 80055ec:	a904      	add	r1, sp, #16
 80055ee:	4630      	mov	r0, r6
 80055f0:	f000 f8cc 	bl	800578c <_printf_float>
 80055f4:	4607      	mov	r7, r0
 80055f6:	1c78      	adds	r0, r7, #1
 80055f8:	d1d6      	bne.n	80055a8 <_vfiprintf_r+0x1bc>
 80055fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055fc:	07d9      	lsls	r1, r3, #31
 80055fe:	d405      	bmi.n	800560c <_vfiprintf_r+0x220>
 8005600:	89ab      	ldrh	r3, [r5, #12]
 8005602:	059a      	lsls	r2, r3, #22
 8005604:	d402      	bmi.n	800560c <_vfiprintf_r+0x220>
 8005606:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005608:	f7ff fde4 	bl	80051d4 <__retarget_lock_release_recursive>
 800560c:	89ab      	ldrh	r3, [r5, #12]
 800560e:	065b      	lsls	r3, r3, #25
 8005610:	f53f af12 	bmi.w	8005438 <_vfiprintf_r+0x4c>
 8005614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005616:	e711      	b.n	800543c <_vfiprintf_r+0x50>
 8005618:	ab03      	add	r3, sp, #12
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	462a      	mov	r2, r5
 800561e:	4b09      	ldr	r3, [pc, #36]	; (8005644 <_vfiprintf_r+0x258>)
 8005620:	a904      	add	r1, sp, #16
 8005622:	4630      	mov	r0, r6
 8005624:	f000 fb56 	bl	8005cd4 <_printf_i>
 8005628:	e7e4      	b.n	80055f4 <_vfiprintf_r+0x208>
 800562a:	bf00      	nop
 800562c:	0800cc28 	.word	0x0800cc28
 8005630:	0800cc48 	.word	0x0800cc48
 8005634:	0800cc08 	.word	0x0800cc08
 8005638:	0800ca2c 	.word	0x0800ca2c
 800563c:	0800ca36 	.word	0x0800ca36
 8005640:	0800578d 	.word	0x0800578d
 8005644:	080053c7 	.word	0x080053c7
 8005648:	0800ca32 	.word	0x0800ca32

0800564c <__cvt>:
 800564c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	ec55 4b10 	vmov	r4, r5, d0
 8005654:	2d00      	cmp	r5, #0
 8005656:	460e      	mov	r6, r1
 8005658:	4619      	mov	r1, r3
 800565a:	462b      	mov	r3, r5
 800565c:	bfbb      	ittet	lt
 800565e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005662:	461d      	movlt	r5, r3
 8005664:	2300      	movge	r3, #0
 8005666:	232d      	movlt	r3, #45	; 0x2d
 8005668:	700b      	strb	r3, [r1, #0]
 800566a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800566c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005670:	4691      	mov	r9, r2
 8005672:	f023 0820 	bic.w	r8, r3, #32
 8005676:	bfbc      	itt	lt
 8005678:	4622      	movlt	r2, r4
 800567a:	4614      	movlt	r4, r2
 800567c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005680:	d005      	beq.n	800568e <__cvt+0x42>
 8005682:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005686:	d100      	bne.n	800568a <__cvt+0x3e>
 8005688:	3601      	adds	r6, #1
 800568a:	2102      	movs	r1, #2
 800568c:	e000      	b.n	8005690 <__cvt+0x44>
 800568e:	2103      	movs	r1, #3
 8005690:	ab03      	add	r3, sp, #12
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	ab02      	add	r3, sp, #8
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	ec45 4b10 	vmov	d0, r4, r5
 800569c:	4653      	mov	r3, sl
 800569e:	4632      	mov	r2, r6
 80056a0:	f000 fe6e 	bl	8006380 <_dtoa_r>
 80056a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056a8:	4607      	mov	r7, r0
 80056aa:	d102      	bne.n	80056b2 <__cvt+0x66>
 80056ac:	f019 0f01 	tst.w	r9, #1
 80056b0:	d022      	beq.n	80056f8 <__cvt+0xac>
 80056b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056b6:	eb07 0906 	add.w	r9, r7, r6
 80056ba:	d110      	bne.n	80056de <__cvt+0x92>
 80056bc:	783b      	ldrb	r3, [r7, #0]
 80056be:	2b30      	cmp	r3, #48	; 0x30
 80056c0:	d10a      	bne.n	80056d8 <__cvt+0x8c>
 80056c2:	2200      	movs	r2, #0
 80056c4:	2300      	movs	r3, #0
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fb f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80056ce:	b918      	cbnz	r0, 80056d8 <__cvt+0x8c>
 80056d0:	f1c6 0601 	rsb	r6, r6, #1
 80056d4:	f8ca 6000 	str.w	r6, [sl]
 80056d8:	f8da 3000 	ldr.w	r3, [sl]
 80056dc:	4499      	add	r9, r3
 80056de:	2200      	movs	r2, #0
 80056e0:	2300      	movs	r3, #0
 80056e2:	4620      	mov	r0, r4
 80056e4:	4629      	mov	r1, r5
 80056e6:	f7fb f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80056ea:	b108      	cbz	r0, 80056f0 <__cvt+0xa4>
 80056ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80056f0:	2230      	movs	r2, #48	; 0x30
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	454b      	cmp	r3, r9
 80056f6:	d307      	bcc.n	8005708 <__cvt+0xbc>
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056fc:	1bdb      	subs	r3, r3, r7
 80056fe:	4638      	mov	r0, r7
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	b004      	add	sp, #16
 8005704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	9103      	str	r1, [sp, #12]
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e7f0      	b.n	80056f2 <__cvt+0xa6>

08005710 <__exponent>:
 8005710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005712:	4603      	mov	r3, r0
 8005714:	2900      	cmp	r1, #0
 8005716:	bfb8      	it	lt
 8005718:	4249      	neglt	r1, r1
 800571a:	f803 2b02 	strb.w	r2, [r3], #2
 800571e:	bfb4      	ite	lt
 8005720:	222d      	movlt	r2, #45	; 0x2d
 8005722:	222b      	movge	r2, #43	; 0x2b
 8005724:	2909      	cmp	r1, #9
 8005726:	7042      	strb	r2, [r0, #1]
 8005728:	dd2a      	ble.n	8005780 <__exponent+0x70>
 800572a:	f10d 0407 	add.w	r4, sp, #7
 800572e:	46a4      	mov	ip, r4
 8005730:	270a      	movs	r7, #10
 8005732:	46a6      	mov	lr, r4
 8005734:	460a      	mov	r2, r1
 8005736:	fb91 f6f7 	sdiv	r6, r1, r7
 800573a:	fb07 1516 	mls	r5, r7, r6, r1
 800573e:	3530      	adds	r5, #48	; 0x30
 8005740:	2a63      	cmp	r2, #99	; 0x63
 8005742:	f104 34ff 	add.w	r4, r4, #4294967295
 8005746:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800574a:	4631      	mov	r1, r6
 800574c:	dcf1      	bgt.n	8005732 <__exponent+0x22>
 800574e:	3130      	adds	r1, #48	; 0x30
 8005750:	f1ae 0502 	sub.w	r5, lr, #2
 8005754:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005758:	1c44      	adds	r4, r0, #1
 800575a:	4629      	mov	r1, r5
 800575c:	4561      	cmp	r1, ip
 800575e:	d30a      	bcc.n	8005776 <__exponent+0x66>
 8005760:	f10d 0209 	add.w	r2, sp, #9
 8005764:	eba2 020e 	sub.w	r2, r2, lr
 8005768:	4565      	cmp	r5, ip
 800576a:	bf88      	it	hi
 800576c:	2200      	movhi	r2, #0
 800576e:	4413      	add	r3, r2
 8005770:	1a18      	subs	r0, r3, r0
 8005772:	b003      	add	sp, #12
 8005774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800577a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800577e:	e7ed      	b.n	800575c <__exponent+0x4c>
 8005780:	2330      	movs	r3, #48	; 0x30
 8005782:	3130      	adds	r1, #48	; 0x30
 8005784:	7083      	strb	r3, [r0, #2]
 8005786:	70c1      	strb	r1, [r0, #3]
 8005788:	1d03      	adds	r3, r0, #4
 800578a:	e7f1      	b.n	8005770 <__exponent+0x60>

0800578c <_printf_float>:
 800578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005790:	ed2d 8b02 	vpush	{d8}
 8005794:	b08d      	sub	sp, #52	; 0x34
 8005796:	460c      	mov	r4, r1
 8005798:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800579c:	4616      	mov	r6, r2
 800579e:	461f      	mov	r7, r3
 80057a0:	4605      	mov	r5, r0
 80057a2:	f001 fd91 	bl	80072c8 <_localeconv_r>
 80057a6:	f8d0 a000 	ldr.w	sl, [r0]
 80057aa:	4650      	mov	r0, sl
 80057ac:	f7fa fd60 	bl	8000270 <strlen>
 80057b0:	2300      	movs	r3, #0
 80057b2:	930a      	str	r3, [sp, #40]	; 0x28
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	f8d8 3000 	ldr.w	r3, [r8]
 80057bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057c0:	3307      	adds	r3, #7
 80057c2:	f023 0307 	bic.w	r3, r3, #7
 80057c6:	f103 0208 	add.w	r2, r3, #8
 80057ca:	f8c8 2000 	str.w	r2, [r8]
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057de:	9307      	str	r3, [sp, #28]
 80057e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80057e4:	ee08 0a10 	vmov	s16, r0
 80057e8:	4b9f      	ldr	r3, [pc, #636]	; (8005a68 <_printf_float+0x2dc>)
 80057ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295
 80057f2:	f7fb f99b 	bl	8000b2c <__aeabi_dcmpun>
 80057f6:	bb88      	cbnz	r0, 800585c <_printf_float+0xd0>
 80057f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057fc:	4b9a      	ldr	r3, [pc, #616]	; (8005a68 <_printf_float+0x2dc>)
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	f7fb f975 	bl	8000af0 <__aeabi_dcmple>
 8005806:	bb48      	cbnz	r0, 800585c <_printf_float+0xd0>
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	4640      	mov	r0, r8
 800580e:	4649      	mov	r1, r9
 8005810:	f7fb f964 	bl	8000adc <__aeabi_dcmplt>
 8005814:	b110      	cbz	r0, 800581c <_printf_float+0x90>
 8005816:	232d      	movs	r3, #45	; 0x2d
 8005818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581c:	4b93      	ldr	r3, [pc, #588]	; (8005a6c <_printf_float+0x2e0>)
 800581e:	4894      	ldr	r0, [pc, #592]	; (8005a70 <_printf_float+0x2e4>)
 8005820:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005824:	bf94      	ite	ls
 8005826:	4698      	movls	r8, r3
 8005828:	4680      	movhi	r8, r0
 800582a:	2303      	movs	r3, #3
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	9b05      	ldr	r3, [sp, #20]
 8005830:	f023 0204 	bic.w	r2, r3, #4
 8005834:	6022      	str	r2, [r4, #0]
 8005836:	f04f 0900 	mov.w	r9, #0
 800583a:	9700      	str	r7, [sp, #0]
 800583c:	4633      	mov	r3, r6
 800583e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f9d8 	bl	8005bf8 <_printf_common>
 8005848:	3001      	adds	r0, #1
 800584a:	f040 8090 	bne.w	800596e <_printf_float+0x1e2>
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	b00d      	add	sp, #52	; 0x34
 8005854:	ecbd 8b02 	vpop	{d8}
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	4640      	mov	r0, r8
 8005862:	4649      	mov	r1, r9
 8005864:	f7fb f962 	bl	8000b2c <__aeabi_dcmpun>
 8005868:	b140      	cbz	r0, 800587c <_printf_float+0xf0>
 800586a:	464b      	mov	r3, r9
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfbc      	itt	lt
 8005870:	232d      	movlt	r3, #45	; 0x2d
 8005872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005876:	487f      	ldr	r0, [pc, #508]	; (8005a74 <_printf_float+0x2e8>)
 8005878:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <_printf_float+0x2ec>)
 800587a:	e7d1      	b.n	8005820 <_printf_float+0x94>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005882:	9206      	str	r2, [sp, #24]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	d13f      	bne.n	8005908 <_printf_float+0x17c>
 8005888:	2306      	movs	r3, #6
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	9b05      	ldr	r3, [sp, #20]
 800588e:	6861      	ldr	r1, [r4, #4]
 8005890:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005894:	2300      	movs	r3, #0
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	ab0a      	add	r3, sp, #40	; 0x28
 800589a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800589e:	ab09      	add	r3, sp, #36	; 0x24
 80058a0:	ec49 8b10 	vmov	d0, r8, r9
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	6022      	str	r2, [r4, #0]
 80058a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058ac:	4628      	mov	r0, r5
 80058ae:	f7ff fecd 	bl	800564c <__cvt>
 80058b2:	9b06      	ldr	r3, [sp, #24]
 80058b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b6:	2b47      	cmp	r3, #71	; 0x47
 80058b8:	4680      	mov	r8, r0
 80058ba:	d108      	bne.n	80058ce <_printf_float+0x142>
 80058bc:	1cc8      	adds	r0, r1, #3
 80058be:	db02      	blt.n	80058c6 <_printf_float+0x13a>
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	4299      	cmp	r1, r3
 80058c4:	dd41      	ble.n	800594a <_printf_float+0x1be>
 80058c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80058ca:	fa5f fb8b 	uxtb.w	fp, fp
 80058ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058d2:	d820      	bhi.n	8005916 <_printf_float+0x18a>
 80058d4:	3901      	subs	r1, #1
 80058d6:	465a      	mov	r2, fp
 80058d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058dc:	9109      	str	r1, [sp, #36]	; 0x24
 80058de:	f7ff ff17 	bl	8005710 <__exponent>
 80058e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e4:	1813      	adds	r3, r2, r0
 80058e6:	2a01      	cmp	r2, #1
 80058e8:	4681      	mov	r9, r0
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	dc02      	bgt.n	80058f4 <_printf_float+0x168>
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	07d2      	lsls	r2, r2, #31
 80058f2:	d501      	bpl.n	80058f8 <_printf_float+0x16c>
 80058f4:	3301      	adds	r3, #1
 80058f6:	6123      	str	r3, [r4, #16]
 80058f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d09c      	beq.n	800583a <_printf_float+0xae>
 8005900:	232d      	movs	r3, #45	; 0x2d
 8005902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005906:	e798      	b.n	800583a <_printf_float+0xae>
 8005908:	9a06      	ldr	r2, [sp, #24]
 800590a:	2a47      	cmp	r2, #71	; 0x47
 800590c:	d1be      	bne.n	800588c <_printf_float+0x100>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1bc      	bne.n	800588c <_printf_float+0x100>
 8005912:	2301      	movs	r3, #1
 8005914:	e7b9      	b.n	800588a <_printf_float+0xfe>
 8005916:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800591a:	d118      	bne.n	800594e <_printf_float+0x1c2>
 800591c:	2900      	cmp	r1, #0
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	dd0b      	ble.n	800593a <_printf_float+0x1ae>
 8005922:	6121      	str	r1, [r4, #16]
 8005924:	b913      	cbnz	r3, 800592c <_printf_float+0x1a0>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	07d0      	lsls	r0, r2, #31
 800592a:	d502      	bpl.n	8005932 <_printf_float+0x1a6>
 800592c:	3301      	adds	r3, #1
 800592e:	440b      	add	r3, r1
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	65a1      	str	r1, [r4, #88]	; 0x58
 8005934:	f04f 0900 	mov.w	r9, #0
 8005938:	e7de      	b.n	80058f8 <_printf_float+0x16c>
 800593a:	b913      	cbnz	r3, 8005942 <_printf_float+0x1b6>
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	07d2      	lsls	r2, r2, #31
 8005940:	d501      	bpl.n	8005946 <_printf_float+0x1ba>
 8005942:	3302      	adds	r3, #2
 8005944:	e7f4      	b.n	8005930 <_printf_float+0x1a4>
 8005946:	2301      	movs	r3, #1
 8005948:	e7f2      	b.n	8005930 <_printf_float+0x1a4>
 800594a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800594e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005950:	4299      	cmp	r1, r3
 8005952:	db05      	blt.n	8005960 <_printf_float+0x1d4>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	6121      	str	r1, [r4, #16]
 8005958:	07d8      	lsls	r0, r3, #31
 800595a:	d5ea      	bpl.n	8005932 <_printf_float+0x1a6>
 800595c:	1c4b      	adds	r3, r1, #1
 800595e:	e7e7      	b.n	8005930 <_printf_float+0x1a4>
 8005960:	2900      	cmp	r1, #0
 8005962:	bfd4      	ite	le
 8005964:	f1c1 0202 	rsble	r2, r1, #2
 8005968:	2201      	movgt	r2, #1
 800596a:	4413      	add	r3, r2
 800596c:	e7e0      	b.n	8005930 <_printf_float+0x1a4>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	055a      	lsls	r2, r3, #21
 8005972:	d407      	bmi.n	8005984 <_printf_float+0x1f8>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	4642      	mov	r2, r8
 8005978:	4631      	mov	r1, r6
 800597a:	4628      	mov	r0, r5
 800597c:	47b8      	blx	r7
 800597e:	3001      	adds	r0, #1
 8005980:	d12c      	bne.n	80059dc <_printf_float+0x250>
 8005982:	e764      	b.n	800584e <_printf_float+0xc2>
 8005984:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005988:	f240 80e0 	bls.w	8005b4c <_printf_float+0x3c0>
 800598c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005990:	2200      	movs	r2, #0
 8005992:	2300      	movs	r3, #0
 8005994:	f7fb f898 	bl	8000ac8 <__aeabi_dcmpeq>
 8005998:	2800      	cmp	r0, #0
 800599a:	d034      	beq.n	8005a06 <_printf_float+0x27a>
 800599c:	4a37      	ldr	r2, [pc, #220]	; (8005a7c <_printf_float+0x2f0>)
 800599e:	2301      	movs	r3, #1
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f af51 	beq.w	800584e <_printf_float+0xc2>
 80059ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b0:	429a      	cmp	r2, r3
 80059b2:	db02      	blt.n	80059ba <_printf_float+0x22e>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	07d8      	lsls	r0, r3, #31
 80059b8:	d510      	bpl.n	80059dc <_printf_float+0x250>
 80059ba:	ee18 3a10 	vmov	r3, s16
 80059be:	4652      	mov	r2, sl
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f af41 	beq.w	800584e <_printf_float+0xc2>
 80059cc:	f04f 0800 	mov.w	r8, #0
 80059d0:	f104 091a 	add.w	r9, r4, #26
 80059d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4543      	cmp	r3, r8
 80059da:	dc09      	bgt.n	80059f0 <_printf_float+0x264>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	079b      	lsls	r3, r3, #30
 80059e0:	f100 8105 	bmi.w	8005bee <_printf_float+0x462>
 80059e4:	68e0      	ldr	r0, [r4, #12]
 80059e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e8:	4298      	cmp	r0, r3
 80059ea:	bfb8      	it	lt
 80059ec:	4618      	movlt	r0, r3
 80059ee:	e730      	b.n	8005852 <_printf_float+0xc6>
 80059f0:	2301      	movs	r3, #1
 80059f2:	464a      	mov	r2, r9
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af27 	beq.w	800584e <_printf_float+0xc2>
 8005a00:	f108 0801 	add.w	r8, r8, #1
 8005a04:	e7e6      	b.n	80059d4 <_printf_float+0x248>
 8005a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dc39      	bgt.n	8005a80 <_printf_float+0x2f4>
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <_printf_float+0x2f0>)
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f af19 	beq.w	800584e <_printf_float+0xc2>
 8005a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d102      	bne.n	8005a2a <_printf_float+0x29e>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	07d9      	lsls	r1, r3, #31
 8005a28:	d5d8      	bpl.n	80059dc <_printf_float+0x250>
 8005a2a:	ee18 3a10 	vmov	r3, s16
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af09 	beq.w	800584e <_printf_float+0xc2>
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	f104 0a1a 	add.w	sl, r4, #26
 8005a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a46:	425b      	negs	r3, r3
 8005a48:	454b      	cmp	r3, r9
 8005a4a:	dc01      	bgt.n	8005a50 <_printf_float+0x2c4>
 8005a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4e:	e792      	b.n	8005976 <_printf_float+0x1ea>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4652      	mov	r2, sl
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f aef7 	beq.w	800584e <_printf_float+0xc2>
 8005a60:	f109 0901 	add.w	r9, r9, #1
 8005a64:	e7ee      	b.n	8005a44 <_printf_float+0x2b8>
 8005a66:	bf00      	nop
 8005a68:	7fefffff 	.word	0x7fefffff
 8005a6c:	0800ca3d 	.word	0x0800ca3d
 8005a70:	0800ca41 	.word	0x0800ca41
 8005a74:	0800ca49 	.word	0x0800ca49
 8005a78:	0800ca45 	.word	0x0800ca45
 8005a7c:	0800ca4d 	.word	0x0800ca4d
 8005a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a84:	429a      	cmp	r2, r3
 8005a86:	bfa8      	it	ge
 8005a88:	461a      	movge	r2, r3
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	4691      	mov	r9, r2
 8005a8e:	dc37      	bgt.n	8005b00 <_printf_float+0x374>
 8005a90:	f04f 0b00 	mov.w	fp, #0
 8005a94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a98:	f104 021a 	add.w	r2, r4, #26
 8005a9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	eba3 0309 	sub.w	r3, r3, r9
 8005aa4:	455b      	cmp	r3, fp
 8005aa6:	dc33      	bgt.n	8005b10 <_printf_float+0x384>
 8005aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aac:	429a      	cmp	r2, r3
 8005aae:	db3b      	blt.n	8005b28 <_printf_float+0x39c>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	07da      	lsls	r2, r3, #31
 8005ab4:	d438      	bmi.n	8005b28 <_printf_float+0x39c>
 8005ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab8:	9b05      	ldr	r3, [sp, #20]
 8005aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	eba2 0901 	sub.w	r9, r2, r1
 8005ac2:	4599      	cmp	r9, r3
 8005ac4:	bfa8      	it	ge
 8005ac6:	4699      	movge	r9, r3
 8005ac8:	f1b9 0f00 	cmp.w	r9, #0
 8005acc:	dc35      	bgt.n	8005b3a <_printf_float+0x3ae>
 8005ace:	f04f 0800 	mov.w	r8, #0
 8005ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ad6:	f104 0a1a 	add.w	sl, r4, #26
 8005ada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	eba3 0309 	sub.w	r3, r3, r9
 8005ae4:	4543      	cmp	r3, r8
 8005ae6:	f77f af79 	ble.w	80059dc <_printf_float+0x250>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4652      	mov	r2, sl
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	f43f aeaa 	beq.w	800584e <_printf_float+0xc2>
 8005afa:	f108 0801 	add.w	r8, r8, #1
 8005afe:	e7ec      	b.n	8005ada <_printf_float+0x34e>
 8005b00:	4613      	mov	r3, r2
 8005b02:	4631      	mov	r1, r6
 8005b04:	4642      	mov	r2, r8
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d1c0      	bne.n	8005a90 <_printf_float+0x304>
 8005b0e:	e69e      	b.n	800584e <_printf_float+0xc2>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	9205      	str	r2, [sp, #20]
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f ae97 	beq.w	800584e <_printf_float+0xc2>
 8005b20:	9a05      	ldr	r2, [sp, #20]
 8005b22:	f10b 0b01 	add.w	fp, fp, #1
 8005b26:	e7b9      	b.n	8005a9c <_printf_float+0x310>
 8005b28:	ee18 3a10 	vmov	r3, s16
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	d1be      	bne.n	8005ab6 <_printf_float+0x32a>
 8005b38:	e689      	b.n	800584e <_printf_float+0xc2>
 8005b3a:	9a05      	ldr	r2, [sp, #20]
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	4442      	add	r2, r8
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	d1c1      	bne.n	8005ace <_printf_float+0x342>
 8005b4a:	e680      	b.n	800584e <_printf_float+0xc2>
 8005b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b4e:	2a01      	cmp	r2, #1
 8005b50:	dc01      	bgt.n	8005b56 <_printf_float+0x3ca>
 8005b52:	07db      	lsls	r3, r3, #31
 8005b54:	d538      	bpl.n	8005bc8 <_printf_float+0x43c>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4642      	mov	r2, r8
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f ae74 	beq.w	800584e <_printf_float+0xc2>
 8005b66:	ee18 3a10 	vmov	r3, s16
 8005b6a:	4652      	mov	r2, sl
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f ae6b 	beq.w	800584e <_printf_float+0xc2>
 8005b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f7fa ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b84:	b9d8      	cbnz	r0, 8005bbe <_printf_float+0x432>
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b88:	f108 0201 	add.w	r2, r8, #1
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	d10e      	bne.n	8005bb6 <_printf_float+0x42a>
 8005b98:	e659      	b.n	800584e <_printf_float+0xc2>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	f43f ae52 	beq.w	800584e <_printf_float+0xc2>
 8005baa:	f108 0801 	add.w	r8, r8, #1
 8005bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4543      	cmp	r3, r8
 8005bb4:	dcf1      	bgt.n	8005b9a <_printf_float+0x40e>
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bbc:	e6dc      	b.n	8005978 <_printf_float+0x1ec>
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	f104 0a1a 	add.w	sl, r4, #26
 8005bc6:	e7f2      	b.n	8005bae <_printf_float+0x422>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4642      	mov	r2, r8
 8005bcc:	e7df      	b.n	8005b8e <_printf_float+0x402>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	464a      	mov	r2, r9
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	47b8      	blx	r7
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f43f ae38 	beq.w	800584e <_printf_float+0xc2>
 8005bde:	f108 0801 	add.w	r8, r8, #1
 8005be2:	68e3      	ldr	r3, [r4, #12]
 8005be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005be6:	1a5b      	subs	r3, r3, r1
 8005be8:	4543      	cmp	r3, r8
 8005bea:	dcf0      	bgt.n	8005bce <_printf_float+0x442>
 8005bec:	e6fa      	b.n	80059e4 <_printf_float+0x258>
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	f104 0919 	add.w	r9, r4, #25
 8005bf6:	e7f4      	b.n	8005be2 <_printf_float+0x456>

08005bf8 <_printf_common>:
 8005bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	4699      	mov	r9, r3
 8005c00:	688a      	ldr	r2, [r1, #8]
 8005c02:	690b      	ldr	r3, [r1, #16]
 8005c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	bfb8      	it	lt
 8005c0c:	4613      	movlt	r3, r2
 8005c0e:	6033      	str	r3, [r6, #0]
 8005c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c14:	4607      	mov	r7, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	b10a      	cbz	r2, 8005c1e <_printf_common+0x26>
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	6033      	str	r3, [r6, #0]
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	0699      	lsls	r1, r3, #26
 8005c22:	bf42      	ittt	mi
 8005c24:	6833      	ldrmi	r3, [r6, #0]
 8005c26:	3302      	addmi	r3, #2
 8005c28:	6033      	strmi	r3, [r6, #0]
 8005c2a:	6825      	ldr	r5, [r4, #0]
 8005c2c:	f015 0506 	ands.w	r5, r5, #6
 8005c30:	d106      	bne.n	8005c40 <_printf_common+0x48>
 8005c32:	f104 0a19 	add.w	sl, r4, #25
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	6832      	ldr	r2, [r6, #0]
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	42ab      	cmp	r3, r5
 8005c3e:	dc26      	bgt.n	8005c8e <_printf_common+0x96>
 8005c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c44:	1e13      	subs	r3, r2, #0
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	bf18      	it	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	0692      	lsls	r2, r2, #26
 8005c4e:	d42b      	bmi.n	8005ca8 <_printf_common+0xb0>
 8005c50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c54:	4649      	mov	r1, r9
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c0      	blx	r8
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d01e      	beq.n	8005c9c <_printf_common+0xa4>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	68e5      	ldr	r5, [r4, #12]
 8005c62:	6832      	ldr	r2, [r6, #0]
 8005c64:	f003 0306 	and.w	r3, r3, #6
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	bf08      	it	eq
 8005c6c:	1aad      	subeq	r5, r5, r2
 8005c6e:	68a3      	ldr	r3, [r4, #8]
 8005c70:	6922      	ldr	r2, [r4, #16]
 8005c72:	bf0c      	ite	eq
 8005c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c78:	2500      	movne	r5, #0
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	bfc4      	itt	gt
 8005c7e:	1a9b      	subgt	r3, r3, r2
 8005c80:	18ed      	addgt	r5, r5, r3
 8005c82:	2600      	movs	r6, #0
 8005c84:	341a      	adds	r4, #26
 8005c86:	42b5      	cmp	r5, r6
 8005c88:	d11a      	bne.n	8005cc0 <_printf_common+0xc8>
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e008      	b.n	8005ca0 <_printf_common+0xa8>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4652      	mov	r2, sl
 8005c92:	4649      	mov	r1, r9
 8005c94:	4638      	mov	r0, r7
 8005c96:	47c0      	blx	r8
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d103      	bne.n	8005ca4 <_printf_common+0xac>
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	3501      	adds	r5, #1
 8005ca6:	e7c6      	b.n	8005c36 <_printf_common+0x3e>
 8005ca8:	18e1      	adds	r1, r4, r3
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	2030      	movs	r0, #48	; 0x30
 8005cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cb2:	4422      	add	r2, r4
 8005cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	e7c7      	b.n	8005c50 <_printf_common+0x58>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c0      	blx	r8
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d0e6      	beq.n	8005c9c <_printf_common+0xa4>
 8005cce:	3601      	adds	r6, #1
 8005cd0:	e7d9      	b.n	8005c86 <_printf_common+0x8e>
	...

08005cd4 <_printf_i>:
 8005cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd8:	460c      	mov	r4, r1
 8005cda:	4691      	mov	r9, r2
 8005cdc:	7e27      	ldrb	r7, [r4, #24]
 8005cde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ce0:	2f78      	cmp	r7, #120	; 0x78
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	469a      	mov	sl, r3
 8005ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cea:	d807      	bhi.n	8005cfc <_printf_i+0x28>
 8005cec:	2f62      	cmp	r7, #98	; 0x62
 8005cee:	d80a      	bhi.n	8005d06 <_printf_i+0x32>
 8005cf0:	2f00      	cmp	r7, #0
 8005cf2:	f000 80d8 	beq.w	8005ea6 <_printf_i+0x1d2>
 8005cf6:	2f58      	cmp	r7, #88	; 0x58
 8005cf8:	f000 80a3 	beq.w	8005e42 <_printf_i+0x16e>
 8005cfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d04:	e03a      	b.n	8005d7c <_printf_i+0xa8>
 8005d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d0a:	2b15      	cmp	r3, #21
 8005d0c:	d8f6      	bhi.n	8005cfc <_printf_i+0x28>
 8005d0e:	a001      	add	r0, pc, #4	; (adr r0, 8005d14 <_printf_i+0x40>)
 8005d10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d14:	08005d6d 	.word	0x08005d6d
 8005d18:	08005d81 	.word	0x08005d81
 8005d1c:	08005cfd 	.word	0x08005cfd
 8005d20:	08005cfd 	.word	0x08005cfd
 8005d24:	08005cfd 	.word	0x08005cfd
 8005d28:	08005cfd 	.word	0x08005cfd
 8005d2c:	08005d81 	.word	0x08005d81
 8005d30:	08005cfd 	.word	0x08005cfd
 8005d34:	08005cfd 	.word	0x08005cfd
 8005d38:	08005cfd 	.word	0x08005cfd
 8005d3c:	08005cfd 	.word	0x08005cfd
 8005d40:	08005e8d 	.word	0x08005e8d
 8005d44:	08005db1 	.word	0x08005db1
 8005d48:	08005e6f 	.word	0x08005e6f
 8005d4c:	08005cfd 	.word	0x08005cfd
 8005d50:	08005cfd 	.word	0x08005cfd
 8005d54:	08005eaf 	.word	0x08005eaf
 8005d58:	08005cfd 	.word	0x08005cfd
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005cfd 	.word	0x08005cfd
 8005d64:	08005cfd 	.word	0x08005cfd
 8005d68:	08005e77 	.word	0x08005e77
 8005d6c:	680b      	ldr	r3, [r1, #0]
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	600a      	str	r2, [r1, #0]
 8005d74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0a3      	b.n	8005ec8 <_printf_i+0x1f4>
 8005d80:	6825      	ldr	r5, [r4, #0]
 8005d82:	6808      	ldr	r0, [r1, #0]
 8005d84:	062e      	lsls	r6, r5, #24
 8005d86:	f100 0304 	add.w	r3, r0, #4
 8005d8a:	d50a      	bpl.n	8005da2 <_printf_i+0xce>
 8005d8c:	6805      	ldr	r5, [r0, #0]
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	2d00      	cmp	r5, #0
 8005d92:	da03      	bge.n	8005d9c <_printf_i+0xc8>
 8005d94:	232d      	movs	r3, #45	; 0x2d
 8005d96:	426d      	negs	r5, r5
 8005d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d9c:	485e      	ldr	r0, [pc, #376]	; (8005f18 <_printf_i+0x244>)
 8005d9e:	230a      	movs	r3, #10
 8005da0:	e019      	b.n	8005dd6 <_printf_i+0x102>
 8005da2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005da6:	6805      	ldr	r5, [r0, #0]
 8005da8:	600b      	str	r3, [r1, #0]
 8005daa:	bf18      	it	ne
 8005dac:	b22d      	sxthne	r5, r5
 8005dae:	e7ef      	b.n	8005d90 <_printf_i+0xbc>
 8005db0:	680b      	ldr	r3, [r1, #0]
 8005db2:	6825      	ldr	r5, [r4, #0]
 8005db4:	1d18      	adds	r0, r3, #4
 8005db6:	6008      	str	r0, [r1, #0]
 8005db8:	0628      	lsls	r0, r5, #24
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0xec>
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <_printf_i+0xf2>
 8005dc0:	0669      	lsls	r1, r5, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0xe8>
 8005dc4:	881d      	ldrh	r5, [r3, #0]
 8005dc6:	4854      	ldr	r0, [pc, #336]	; (8005f18 <_printf_i+0x244>)
 8005dc8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dca:	bf0c      	ite	eq
 8005dcc:	2308      	moveq	r3, #8
 8005dce:	230a      	movne	r3, #10
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dd6:	6866      	ldr	r6, [r4, #4]
 8005dd8:	60a6      	str	r6, [r4, #8]
 8005dda:	2e00      	cmp	r6, #0
 8005ddc:	bfa2      	ittt	ge
 8005dde:	6821      	ldrge	r1, [r4, #0]
 8005de0:	f021 0104 	bicge.w	r1, r1, #4
 8005de4:	6021      	strge	r1, [r4, #0]
 8005de6:	b90d      	cbnz	r5, 8005dec <_printf_i+0x118>
 8005de8:	2e00      	cmp	r6, #0
 8005dea:	d04d      	beq.n	8005e88 <_printf_i+0x1b4>
 8005dec:	4616      	mov	r6, r2
 8005dee:	fbb5 f1f3 	udiv	r1, r5, r3
 8005df2:	fb03 5711 	mls	r7, r3, r1, r5
 8005df6:	5dc7      	ldrb	r7, [r0, r7]
 8005df8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dfc:	462f      	mov	r7, r5
 8005dfe:	42bb      	cmp	r3, r7
 8005e00:	460d      	mov	r5, r1
 8005e02:	d9f4      	bls.n	8005dee <_printf_i+0x11a>
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d10b      	bne.n	8005e20 <_printf_i+0x14c>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	07df      	lsls	r7, r3, #31
 8005e0c:	d508      	bpl.n	8005e20 <_printf_i+0x14c>
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	6861      	ldr	r1, [r4, #4]
 8005e12:	4299      	cmp	r1, r3
 8005e14:	bfde      	ittt	le
 8005e16:	2330      	movle	r3, #48	; 0x30
 8005e18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e20:	1b92      	subs	r2, r2, r6
 8005e22:	6122      	str	r2, [r4, #16]
 8005e24:	f8cd a000 	str.w	sl, [sp]
 8005e28:	464b      	mov	r3, r9
 8005e2a:	aa03      	add	r2, sp, #12
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4640      	mov	r0, r8
 8005e30:	f7ff fee2 	bl	8005bf8 <_printf_common>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d14c      	bne.n	8005ed2 <_printf_i+0x1fe>
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	b004      	add	sp, #16
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	4835      	ldr	r0, [pc, #212]	; (8005f18 <_printf_i+0x244>)
 8005e44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	680e      	ldr	r6, [r1, #0]
 8005e4c:	061f      	lsls	r7, r3, #24
 8005e4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e52:	600e      	str	r6, [r1, #0]
 8005e54:	d514      	bpl.n	8005e80 <_printf_i+0x1ac>
 8005e56:	07d9      	lsls	r1, r3, #31
 8005e58:	bf44      	itt	mi
 8005e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e5e:	6023      	strmi	r3, [r4, #0]
 8005e60:	b91d      	cbnz	r5, 8005e6a <_printf_i+0x196>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f023 0320 	bic.w	r3, r3, #32
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	e7b0      	b.n	8005dd0 <_printf_i+0xfc>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	f043 0320 	orr.w	r3, r3, #32
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	2378      	movs	r3, #120	; 0x78
 8005e78:	4828      	ldr	r0, [pc, #160]	; (8005f1c <_printf_i+0x248>)
 8005e7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e7e:	e7e3      	b.n	8005e48 <_printf_i+0x174>
 8005e80:	065e      	lsls	r6, r3, #25
 8005e82:	bf48      	it	mi
 8005e84:	b2ad      	uxthmi	r5, r5
 8005e86:	e7e6      	b.n	8005e56 <_printf_i+0x182>
 8005e88:	4616      	mov	r6, r2
 8005e8a:	e7bb      	b.n	8005e04 <_printf_i+0x130>
 8005e8c:	680b      	ldr	r3, [r1, #0]
 8005e8e:	6826      	ldr	r6, [r4, #0]
 8005e90:	6960      	ldr	r0, [r4, #20]
 8005e92:	1d1d      	adds	r5, r3, #4
 8005e94:	600d      	str	r5, [r1, #0]
 8005e96:	0635      	lsls	r5, r6, #24
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	d501      	bpl.n	8005ea0 <_printf_i+0x1cc>
 8005e9c:	6018      	str	r0, [r3, #0]
 8005e9e:	e002      	b.n	8005ea6 <_printf_i+0x1d2>
 8005ea0:	0671      	lsls	r1, r6, #25
 8005ea2:	d5fb      	bpl.n	8005e9c <_printf_i+0x1c8>
 8005ea4:	8018      	strh	r0, [r3, #0]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	4616      	mov	r6, r2
 8005eac:	e7ba      	b.n	8005e24 <_printf_i+0x150>
 8005eae:	680b      	ldr	r3, [r1, #0]
 8005eb0:	1d1a      	adds	r2, r3, #4
 8005eb2:	600a      	str	r2, [r1, #0]
 8005eb4:	681e      	ldr	r6, [r3, #0]
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7fa f988 	bl	80001d0 <memchr>
 8005ec0:	b108      	cbz	r0, 8005ec6 <_printf_i+0x1f2>
 8005ec2:	1b80      	subs	r0, r0, r6
 8005ec4:	6060      	str	r0, [r4, #4]
 8005ec6:	6863      	ldr	r3, [r4, #4]
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	e7a8      	b.n	8005e24 <_printf_i+0x150>
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	4640      	mov	r0, r8
 8005eda:	47d0      	blx	sl
 8005edc:	3001      	adds	r0, #1
 8005ede:	d0ab      	beq.n	8005e38 <_printf_i+0x164>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	079b      	lsls	r3, r3, #30
 8005ee4:	d413      	bmi.n	8005f0e <_printf_i+0x23a>
 8005ee6:	68e0      	ldr	r0, [r4, #12]
 8005ee8:	9b03      	ldr	r3, [sp, #12]
 8005eea:	4298      	cmp	r0, r3
 8005eec:	bfb8      	it	lt
 8005eee:	4618      	movlt	r0, r3
 8005ef0:	e7a4      	b.n	8005e3c <_printf_i+0x168>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4640      	mov	r0, r8
 8005efa:	47d0      	blx	sl
 8005efc:	3001      	adds	r0, #1
 8005efe:	d09b      	beq.n	8005e38 <_printf_i+0x164>
 8005f00:	3501      	adds	r5, #1
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	9903      	ldr	r1, [sp, #12]
 8005f06:	1a5b      	subs	r3, r3, r1
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	dcf2      	bgt.n	8005ef2 <_printf_i+0x21e>
 8005f0c:	e7eb      	b.n	8005ee6 <_printf_i+0x212>
 8005f0e:	2500      	movs	r5, #0
 8005f10:	f104 0619 	add.w	r6, r4, #25
 8005f14:	e7f5      	b.n	8005f02 <_printf_i+0x22e>
 8005f16:	bf00      	nop
 8005f18:	0800ca4f 	.word	0x0800ca4f
 8005f1c:	0800ca60 	.word	0x0800ca60

08005f20 <iprintf>:
 8005f20:	b40f      	push	{r0, r1, r2, r3}
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <iprintf+0x2c>)
 8005f24:	b513      	push	{r0, r1, r4, lr}
 8005f26:	681c      	ldr	r4, [r3, #0]
 8005f28:	b124      	cbz	r4, 8005f34 <iprintf+0x14>
 8005f2a:	69a3      	ldr	r3, [r4, #24]
 8005f2c:	b913      	cbnz	r3, 8005f34 <iprintf+0x14>
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f001 f92c 	bl	800718c <__sinit>
 8005f34:	ab05      	add	r3, sp, #20
 8005f36:	9a04      	ldr	r2, [sp, #16]
 8005f38:	68a1      	ldr	r1, [r4, #8]
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff fa55 	bl	80053ec <_vfiprintf_r>
 8005f42:	b002      	add	sp, #8
 8005f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f48:	b004      	add	sp, #16
 8005f4a:	4770      	bx	lr
 8005f4c:	20000114 	.word	0x20000114

08005f50 <_puts_r>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	460e      	mov	r6, r1
 8005f54:	4605      	mov	r5, r0
 8005f56:	b118      	cbz	r0, 8005f60 <_puts_r+0x10>
 8005f58:	6983      	ldr	r3, [r0, #24]
 8005f5a:	b90b      	cbnz	r3, 8005f60 <_puts_r+0x10>
 8005f5c:	f001 f916 	bl	800718c <__sinit>
 8005f60:	69ab      	ldr	r3, [r5, #24]
 8005f62:	68ac      	ldr	r4, [r5, #8]
 8005f64:	b913      	cbnz	r3, 8005f6c <_puts_r+0x1c>
 8005f66:	4628      	mov	r0, r5
 8005f68:	f001 f910 	bl	800718c <__sinit>
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <_puts_r+0xd0>)
 8005f6e:	429c      	cmp	r4, r3
 8005f70:	d120      	bne.n	8005fb4 <_puts_r+0x64>
 8005f72:	686c      	ldr	r4, [r5, #4]
 8005f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f76:	07db      	lsls	r3, r3, #31
 8005f78:	d405      	bmi.n	8005f86 <_puts_r+0x36>
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	0598      	lsls	r0, r3, #22
 8005f7e:	d402      	bmi.n	8005f86 <_puts_r+0x36>
 8005f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f82:	f7ff f926 	bl	80051d2 <__retarget_lock_acquire_recursive>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	0719      	lsls	r1, r3, #28
 8005f8a:	d51d      	bpl.n	8005fc8 <_puts_r+0x78>
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	b1db      	cbz	r3, 8005fc8 <_puts_r+0x78>
 8005f90:	3e01      	subs	r6, #1
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	bb39      	cbnz	r1, 8005fee <_puts_r+0x9e>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	da38      	bge.n	8006014 <_puts_r+0xc4>
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	210a      	movs	r1, #10
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f000 f89c 	bl	80060e4 <__swbuf_r>
 8005fac:	3001      	adds	r0, #1
 8005fae:	d011      	beq.n	8005fd4 <_puts_r+0x84>
 8005fb0:	250a      	movs	r5, #10
 8005fb2:	e011      	b.n	8005fd8 <_puts_r+0x88>
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <_puts_r+0xd4>)
 8005fb6:	429c      	cmp	r4, r3
 8005fb8:	d101      	bne.n	8005fbe <_puts_r+0x6e>
 8005fba:	68ac      	ldr	r4, [r5, #8]
 8005fbc:	e7da      	b.n	8005f74 <_puts_r+0x24>
 8005fbe:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <_puts_r+0xd8>)
 8005fc0:	429c      	cmp	r4, r3
 8005fc2:	bf08      	it	eq
 8005fc4:	68ec      	ldreq	r4, [r5, #12]
 8005fc6:	e7d5      	b.n	8005f74 <_puts_r+0x24>
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f000 f8dc 	bl	8006188 <__swsetup_r>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d0dd      	beq.n	8005f90 <_puts_r+0x40>
 8005fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8005fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fda:	07da      	lsls	r2, r3, #31
 8005fdc:	d405      	bmi.n	8005fea <_puts_r+0x9a>
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	059b      	lsls	r3, r3, #22
 8005fe2:	d402      	bmi.n	8005fea <_puts_r+0x9a>
 8005fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fe6:	f7ff f8f5 	bl	80051d4 <__retarget_lock_release_recursive>
 8005fea:	4628      	mov	r0, r5
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da04      	bge.n	8005ffc <_puts_r+0xac>
 8005ff2:	69a2      	ldr	r2, [r4, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	dc06      	bgt.n	8006006 <_puts_r+0xb6>
 8005ff8:	290a      	cmp	r1, #10
 8005ffa:	d004      	beq.n	8006006 <_puts_r+0xb6>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	6022      	str	r2, [r4, #0]
 8006002:	7019      	strb	r1, [r3, #0]
 8006004:	e7c5      	b.n	8005f92 <_puts_r+0x42>
 8006006:	4622      	mov	r2, r4
 8006008:	4628      	mov	r0, r5
 800600a:	f000 f86b 	bl	80060e4 <__swbuf_r>
 800600e:	3001      	adds	r0, #1
 8006010:	d1bf      	bne.n	8005f92 <_puts_r+0x42>
 8006012:	e7df      	b.n	8005fd4 <_puts_r+0x84>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	250a      	movs	r5, #10
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	6022      	str	r2, [r4, #0]
 800601c:	701d      	strb	r5, [r3, #0]
 800601e:	e7db      	b.n	8005fd8 <_puts_r+0x88>
 8006020:	0800cc28 	.word	0x0800cc28
 8006024:	0800cc48 	.word	0x0800cc48
 8006028:	0800cc08 	.word	0x0800cc08

0800602c <puts>:
 800602c:	4b02      	ldr	r3, [pc, #8]	; (8006038 <puts+0xc>)
 800602e:	4601      	mov	r1, r0
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	f7ff bf8d 	b.w	8005f50 <_puts_r>
 8006036:	bf00      	nop
 8006038:	20000114 	.word	0x20000114

0800603c <_sbrk_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4d06      	ldr	r5, [pc, #24]	; (8006058 <_sbrk_r+0x1c>)
 8006040:	2300      	movs	r3, #0
 8006042:	4604      	mov	r4, r0
 8006044:	4608      	mov	r0, r1
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	f7fe ff44 	bl	8004ed4 <_sbrk>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_sbrk_r+0x1a>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_sbrk_r+0x1a>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	20000420 	.word	0x20000420

0800605c <_raise_r>:
 800605c:	291f      	cmp	r1, #31
 800605e:	b538      	push	{r3, r4, r5, lr}
 8006060:	4604      	mov	r4, r0
 8006062:	460d      	mov	r5, r1
 8006064:	d904      	bls.n	8006070 <_raise_r+0x14>
 8006066:	2316      	movs	r3, #22
 8006068:	6003      	str	r3, [r0, #0]
 800606a:	f04f 30ff 	mov.w	r0, #4294967295
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006072:	b112      	cbz	r2, 800607a <_raise_r+0x1e>
 8006074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006078:	b94b      	cbnz	r3, 800608e <_raise_r+0x32>
 800607a:	4620      	mov	r0, r4
 800607c:	f000 f830 	bl	80060e0 <_getpid_r>
 8006080:	462a      	mov	r2, r5
 8006082:	4601      	mov	r1, r0
 8006084:	4620      	mov	r0, r4
 8006086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800608a:	f000 b817 	b.w	80060bc <_kill_r>
 800608e:	2b01      	cmp	r3, #1
 8006090:	d00a      	beq.n	80060a8 <_raise_r+0x4c>
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	d103      	bne.n	800609e <_raise_r+0x42>
 8006096:	2316      	movs	r3, #22
 8006098:	6003      	str	r3, [r0, #0]
 800609a:	2001      	movs	r0, #1
 800609c:	e7e7      	b.n	800606e <_raise_r+0x12>
 800609e:	2400      	movs	r4, #0
 80060a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060a4:	4628      	mov	r0, r5
 80060a6:	4798      	blx	r3
 80060a8:	2000      	movs	r0, #0
 80060aa:	e7e0      	b.n	800606e <_raise_r+0x12>

080060ac <raise>:
 80060ac:	4b02      	ldr	r3, [pc, #8]	; (80060b8 <raise+0xc>)
 80060ae:	4601      	mov	r1, r0
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	f7ff bfd3 	b.w	800605c <_raise_r>
 80060b6:	bf00      	nop
 80060b8:	20000114 	.word	0x20000114

080060bc <_kill_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4d07      	ldr	r5, [pc, #28]	; (80060dc <_kill_r+0x20>)
 80060c0:	2300      	movs	r3, #0
 80060c2:	4604      	mov	r4, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	f7fe fe7b 	bl	8004dc4 <_kill>
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	d102      	bne.n	80060d8 <_kill_r+0x1c>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	b103      	cbz	r3, 80060d8 <_kill_r+0x1c>
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	bd38      	pop	{r3, r4, r5, pc}
 80060da:	bf00      	nop
 80060dc:	20000420 	.word	0x20000420

080060e0 <_getpid_r>:
 80060e0:	f7fe be68 	b.w	8004db4 <_getpid>

080060e4 <__swbuf_r>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	460e      	mov	r6, r1
 80060e8:	4614      	mov	r4, r2
 80060ea:	4605      	mov	r5, r0
 80060ec:	b118      	cbz	r0, 80060f6 <__swbuf_r+0x12>
 80060ee:	6983      	ldr	r3, [r0, #24]
 80060f0:	b90b      	cbnz	r3, 80060f6 <__swbuf_r+0x12>
 80060f2:	f001 f84b 	bl	800718c <__sinit>
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <__swbuf_r+0x98>)
 80060f8:	429c      	cmp	r4, r3
 80060fa:	d12b      	bne.n	8006154 <__swbuf_r+0x70>
 80060fc:	686c      	ldr	r4, [r5, #4]
 80060fe:	69a3      	ldr	r3, [r4, #24]
 8006100:	60a3      	str	r3, [r4, #8]
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	071a      	lsls	r2, r3, #28
 8006106:	d52f      	bpl.n	8006168 <__swbuf_r+0x84>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	b36b      	cbz	r3, 8006168 <__swbuf_r+0x84>
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	1ac0      	subs	r0, r0, r3
 8006112:	6963      	ldr	r3, [r4, #20]
 8006114:	b2f6      	uxtb	r6, r6
 8006116:	4283      	cmp	r3, r0
 8006118:	4637      	mov	r7, r6
 800611a:	dc04      	bgt.n	8006126 <__swbuf_r+0x42>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 ffa0 	bl	8007064 <_fflush_r>
 8006124:	bb30      	cbnz	r0, 8006174 <__swbuf_r+0x90>
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	3b01      	subs	r3, #1
 800612a:	60a3      	str	r3, [r4, #8]
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	6022      	str	r2, [r4, #0]
 8006132:	701e      	strb	r6, [r3, #0]
 8006134:	6963      	ldr	r3, [r4, #20]
 8006136:	3001      	adds	r0, #1
 8006138:	4283      	cmp	r3, r0
 800613a:	d004      	beq.n	8006146 <__swbuf_r+0x62>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	07db      	lsls	r3, r3, #31
 8006140:	d506      	bpl.n	8006150 <__swbuf_r+0x6c>
 8006142:	2e0a      	cmp	r6, #10
 8006144:	d104      	bne.n	8006150 <__swbuf_r+0x6c>
 8006146:	4621      	mov	r1, r4
 8006148:	4628      	mov	r0, r5
 800614a:	f000 ff8b 	bl	8007064 <_fflush_r>
 800614e:	b988      	cbnz	r0, 8006174 <__swbuf_r+0x90>
 8006150:	4638      	mov	r0, r7
 8006152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <__swbuf_r+0x9c>)
 8006156:	429c      	cmp	r4, r3
 8006158:	d101      	bne.n	800615e <__swbuf_r+0x7a>
 800615a:	68ac      	ldr	r4, [r5, #8]
 800615c:	e7cf      	b.n	80060fe <__swbuf_r+0x1a>
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <__swbuf_r+0xa0>)
 8006160:	429c      	cmp	r4, r3
 8006162:	bf08      	it	eq
 8006164:	68ec      	ldreq	r4, [r5, #12]
 8006166:	e7ca      	b.n	80060fe <__swbuf_r+0x1a>
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f80c 	bl	8006188 <__swsetup_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	d0cb      	beq.n	800610c <__swbuf_r+0x28>
 8006174:	f04f 37ff 	mov.w	r7, #4294967295
 8006178:	e7ea      	b.n	8006150 <__swbuf_r+0x6c>
 800617a:	bf00      	nop
 800617c:	0800cc28 	.word	0x0800cc28
 8006180:	0800cc48 	.word	0x0800cc48
 8006184:	0800cc08 	.word	0x0800cc08

08006188 <__swsetup_r>:
 8006188:	4b32      	ldr	r3, [pc, #200]	; (8006254 <__swsetup_r+0xcc>)
 800618a:	b570      	push	{r4, r5, r6, lr}
 800618c:	681d      	ldr	r5, [r3, #0]
 800618e:	4606      	mov	r6, r0
 8006190:	460c      	mov	r4, r1
 8006192:	b125      	cbz	r5, 800619e <__swsetup_r+0x16>
 8006194:	69ab      	ldr	r3, [r5, #24]
 8006196:	b913      	cbnz	r3, 800619e <__swsetup_r+0x16>
 8006198:	4628      	mov	r0, r5
 800619a:	f000 fff7 	bl	800718c <__sinit>
 800619e:	4b2e      	ldr	r3, [pc, #184]	; (8006258 <__swsetup_r+0xd0>)
 80061a0:	429c      	cmp	r4, r3
 80061a2:	d10f      	bne.n	80061c4 <__swsetup_r+0x3c>
 80061a4:	686c      	ldr	r4, [r5, #4]
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061ac:	0719      	lsls	r1, r3, #28
 80061ae:	d42c      	bmi.n	800620a <__swsetup_r+0x82>
 80061b0:	06dd      	lsls	r5, r3, #27
 80061b2:	d411      	bmi.n	80061d8 <__swsetup_r+0x50>
 80061b4:	2309      	movs	r3, #9
 80061b6:	6033      	str	r3, [r6, #0]
 80061b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	e03e      	b.n	8006242 <__swsetup_r+0xba>
 80061c4:	4b25      	ldr	r3, [pc, #148]	; (800625c <__swsetup_r+0xd4>)
 80061c6:	429c      	cmp	r4, r3
 80061c8:	d101      	bne.n	80061ce <__swsetup_r+0x46>
 80061ca:	68ac      	ldr	r4, [r5, #8]
 80061cc:	e7eb      	b.n	80061a6 <__swsetup_r+0x1e>
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <__swsetup_r+0xd8>)
 80061d0:	429c      	cmp	r4, r3
 80061d2:	bf08      	it	eq
 80061d4:	68ec      	ldreq	r4, [r5, #12]
 80061d6:	e7e6      	b.n	80061a6 <__swsetup_r+0x1e>
 80061d8:	0758      	lsls	r0, r3, #29
 80061da:	d512      	bpl.n	8006202 <__swsetup_r+0x7a>
 80061dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061de:	b141      	cbz	r1, 80061f2 <__swsetup_r+0x6a>
 80061e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e4:	4299      	cmp	r1, r3
 80061e6:	d002      	beq.n	80061ee <__swsetup_r+0x66>
 80061e8:	4630      	mov	r0, r6
 80061ea:	f7ff f82b 	bl	8005244 <_free_r>
 80061ee:	2300      	movs	r3, #0
 80061f0:	6363      	str	r3, [r4, #52]	; 0x34
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	2300      	movs	r3, #0
 80061fc:	6063      	str	r3, [r4, #4]
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	f043 0308 	orr.w	r3, r3, #8
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	b94b      	cbnz	r3, 8006222 <__swsetup_r+0x9a>
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006218:	d003      	beq.n	8006222 <__swsetup_r+0x9a>
 800621a:	4621      	mov	r1, r4
 800621c:	4630      	mov	r0, r6
 800621e:	f001 f87b 	bl	8007318 <__smakebuf_r>
 8006222:	89a0      	ldrh	r0, [r4, #12]
 8006224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006228:	f010 0301 	ands.w	r3, r0, #1
 800622c:	d00a      	beq.n	8006244 <__swsetup_r+0xbc>
 800622e:	2300      	movs	r3, #0
 8006230:	60a3      	str	r3, [r4, #8]
 8006232:	6963      	ldr	r3, [r4, #20]
 8006234:	425b      	negs	r3, r3
 8006236:	61a3      	str	r3, [r4, #24]
 8006238:	6923      	ldr	r3, [r4, #16]
 800623a:	b943      	cbnz	r3, 800624e <__swsetup_r+0xc6>
 800623c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006240:	d1ba      	bne.n	80061b8 <__swsetup_r+0x30>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	0781      	lsls	r1, r0, #30
 8006246:	bf58      	it	pl
 8006248:	6963      	ldrpl	r3, [r4, #20]
 800624a:	60a3      	str	r3, [r4, #8]
 800624c:	e7f4      	b.n	8006238 <__swsetup_r+0xb0>
 800624e:	2000      	movs	r0, #0
 8006250:	e7f7      	b.n	8006242 <__swsetup_r+0xba>
 8006252:	bf00      	nop
 8006254:	20000114 	.word	0x20000114
 8006258:	0800cc28 	.word	0x0800cc28
 800625c:	0800cc48 	.word	0x0800cc48
 8006260:	0800cc08 	.word	0x0800cc08

08006264 <quorem>:
 8006264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	6903      	ldr	r3, [r0, #16]
 800626a:	690c      	ldr	r4, [r1, #16]
 800626c:	42a3      	cmp	r3, r4
 800626e:	4607      	mov	r7, r0
 8006270:	f2c0 8081 	blt.w	8006376 <quorem+0x112>
 8006274:	3c01      	subs	r4, #1
 8006276:	f101 0814 	add.w	r8, r1, #20
 800627a:	f100 0514 	add.w	r5, r0, #20
 800627e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006288:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800628c:	3301      	adds	r3, #1
 800628e:	429a      	cmp	r2, r3
 8006290:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006298:	fbb2 f6f3 	udiv	r6, r2, r3
 800629c:	d331      	bcc.n	8006302 <quorem+0x9e>
 800629e:	f04f 0e00 	mov.w	lr, #0
 80062a2:	4640      	mov	r0, r8
 80062a4:	46ac      	mov	ip, r5
 80062a6:	46f2      	mov	sl, lr
 80062a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80062ac:	b293      	uxth	r3, r2
 80062ae:	fb06 e303 	mla	r3, r6, r3, lr
 80062b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	ebaa 0303 	sub.w	r3, sl, r3
 80062bc:	0c12      	lsrs	r2, r2, #16
 80062be:	f8dc a000 	ldr.w	sl, [ip]
 80062c2:	fb06 e202 	mla	r2, r6, r2, lr
 80062c6:	fa13 f38a 	uxtah	r3, r3, sl
 80062ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062ce:	fa1f fa82 	uxth.w	sl, r2
 80062d2:	f8dc 2000 	ldr.w	r2, [ip]
 80062d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80062da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062de:	b29b      	uxth	r3, r3
 80062e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062e4:	4581      	cmp	r9, r0
 80062e6:	f84c 3b04 	str.w	r3, [ip], #4
 80062ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062ee:	d2db      	bcs.n	80062a8 <quorem+0x44>
 80062f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80062f4:	b92b      	cbnz	r3, 8006302 <quorem+0x9e>
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	3b04      	subs	r3, #4
 80062fa:	429d      	cmp	r5, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	d32e      	bcc.n	800635e <quorem+0xfa>
 8006300:	613c      	str	r4, [r7, #16]
 8006302:	4638      	mov	r0, r7
 8006304:	f001 fae4 	bl	80078d0 <__mcmp>
 8006308:	2800      	cmp	r0, #0
 800630a:	db24      	blt.n	8006356 <quorem+0xf2>
 800630c:	3601      	adds	r6, #1
 800630e:	4628      	mov	r0, r5
 8006310:	f04f 0c00 	mov.w	ip, #0
 8006314:	f858 2b04 	ldr.w	r2, [r8], #4
 8006318:	f8d0 e000 	ldr.w	lr, [r0]
 800631c:	b293      	uxth	r3, r2
 800631e:	ebac 0303 	sub.w	r3, ip, r3
 8006322:	0c12      	lsrs	r2, r2, #16
 8006324:	fa13 f38e 	uxtah	r3, r3, lr
 8006328:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800632c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006330:	b29b      	uxth	r3, r3
 8006332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006336:	45c1      	cmp	r9, r8
 8006338:	f840 3b04 	str.w	r3, [r0], #4
 800633c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006340:	d2e8      	bcs.n	8006314 <quorem+0xb0>
 8006342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800634a:	b922      	cbnz	r2, 8006356 <quorem+0xf2>
 800634c:	3b04      	subs	r3, #4
 800634e:	429d      	cmp	r5, r3
 8006350:	461a      	mov	r2, r3
 8006352:	d30a      	bcc.n	800636a <quorem+0x106>
 8006354:	613c      	str	r4, [r7, #16]
 8006356:	4630      	mov	r0, r6
 8006358:	b003      	add	sp, #12
 800635a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	3b04      	subs	r3, #4
 8006362:	2a00      	cmp	r2, #0
 8006364:	d1cc      	bne.n	8006300 <quorem+0x9c>
 8006366:	3c01      	subs	r4, #1
 8006368:	e7c7      	b.n	80062fa <quorem+0x96>
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	3b04      	subs	r3, #4
 800636e:	2a00      	cmp	r2, #0
 8006370:	d1f0      	bne.n	8006354 <quorem+0xf0>
 8006372:	3c01      	subs	r4, #1
 8006374:	e7eb      	b.n	800634e <quorem+0xea>
 8006376:	2000      	movs	r0, #0
 8006378:	e7ee      	b.n	8006358 <quorem+0xf4>
 800637a:	0000      	movs	r0, r0
 800637c:	0000      	movs	r0, r0
	...

08006380 <_dtoa_r>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	ed2d 8b02 	vpush	{d8}
 8006388:	ec57 6b10 	vmov	r6, r7, d0
 800638c:	b095      	sub	sp, #84	; 0x54
 800638e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006394:	9105      	str	r1, [sp, #20]
 8006396:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800639a:	4604      	mov	r4, r0
 800639c:	9209      	str	r2, [sp, #36]	; 0x24
 800639e:	930f      	str	r3, [sp, #60]	; 0x3c
 80063a0:	b975      	cbnz	r5, 80063c0 <_dtoa_r+0x40>
 80063a2:	2010      	movs	r0, #16
 80063a4:	f7fe ff18 	bl	80051d8 <malloc>
 80063a8:	4602      	mov	r2, r0
 80063aa:	6260      	str	r0, [r4, #36]	; 0x24
 80063ac:	b920      	cbnz	r0, 80063b8 <_dtoa_r+0x38>
 80063ae:	4bb2      	ldr	r3, [pc, #712]	; (8006678 <_dtoa_r+0x2f8>)
 80063b0:	21ea      	movs	r1, #234	; 0xea
 80063b2:	48b2      	ldr	r0, [pc, #712]	; (800667c <_dtoa_r+0x2fc>)
 80063b4:	f7fe feb2 	bl	800511c <__assert_func>
 80063b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063bc:	6005      	str	r5, [r0, #0]
 80063be:	60c5      	str	r5, [r0, #12]
 80063c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c2:	6819      	ldr	r1, [r3, #0]
 80063c4:	b151      	cbz	r1, 80063dc <_dtoa_r+0x5c>
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	604a      	str	r2, [r1, #4]
 80063ca:	2301      	movs	r3, #1
 80063cc:	4093      	lsls	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f001 f83f 	bl	8007454 <_Bfree>
 80063d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	1e3b      	subs	r3, r7, #0
 80063de:	bfb9      	ittee	lt
 80063e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	9303      	strlt	r3, [sp, #12]
 80063e6:	2300      	movge	r3, #0
 80063e8:	f8c8 3000 	strge.w	r3, [r8]
 80063ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80063f0:	4ba3      	ldr	r3, [pc, #652]	; (8006680 <_dtoa_r+0x300>)
 80063f2:	bfbc      	itt	lt
 80063f4:	2201      	movlt	r2, #1
 80063f6:	f8c8 2000 	strlt.w	r2, [r8]
 80063fa:	ea33 0309 	bics.w	r3, r3, r9
 80063fe:	d11b      	bne.n	8006438 <_dtoa_r+0xb8>
 8006400:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006402:	f242 730f 	movw	r3, #9999	; 0x270f
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800640c:	4333      	orrs	r3, r6
 800640e:	f000 857a 	beq.w	8006f06 <_dtoa_r+0xb86>
 8006412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006414:	b963      	cbnz	r3, 8006430 <_dtoa_r+0xb0>
 8006416:	4b9b      	ldr	r3, [pc, #620]	; (8006684 <_dtoa_r+0x304>)
 8006418:	e024      	b.n	8006464 <_dtoa_r+0xe4>
 800641a:	4b9b      	ldr	r3, [pc, #620]	; (8006688 <_dtoa_r+0x308>)
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	3308      	adds	r3, #8
 8006420:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	9800      	ldr	r0, [sp, #0]
 8006426:	b015      	add	sp, #84	; 0x54
 8006428:	ecbd 8b02 	vpop	{d8}
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	4b94      	ldr	r3, [pc, #592]	; (8006684 <_dtoa_r+0x304>)
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	3303      	adds	r3, #3
 8006436:	e7f3      	b.n	8006420 <_dtoa_r+0xa0>
 8006438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	ec51 0b17 	vmov	r0, r1, d7
 8006442:	2300      	movs	r3, #0
 8006444:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006448:	f7fa fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800644c:	4680      	mov	r8, r0
 800644e:	b158      	cbz	r0, 8006468 <_dtoa_r+0xe8>
 8006450:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006452:	2301      	movs	r3, #1
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8551 	beq.w	8006f00 <_dtoa_r+0xb80>
 800645e:	488b      	ldr	r0, [pc, #556]	; (800668c <_dtoa_r+0x30c>)
 8006460:	6018      	str	r0, [r3, #0]
 8006462:	1e43      	subs	r3, r0, #1
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	e7dd      	b.n	8006424 <_dtoa_r+0xa4>
 8006468:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800646c:	aa12      	add	r2, sp, #72	; 0x48
 800646e:	a913      	add	r1, sp, #76	; 0x4c
 8006470:	4620      	mov	r0, r4
 8006472:	f001 fad1 	bl	8007a18 <__d2b>
 8006476:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800647a:	4683      	mov	fp, r0
 800647c:	2d00      	cmp	r5, #0
 800647e:	d07c      	beq.n	800657a <_dtoa_r+0x1fa>
 8006480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006482:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800648a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800648e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006492:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800649a:	4b7d      	ldr	r3, [pc, #500]	; (8006690 <_dtoa_r+0x310>)
 800649c:	2200      	movs	r2, #0
 800649e:	4630      	mov	r0, r6
 80064a0:	4639      	mov	r1, r7
 80064a2:	f7f9 fef1 	bl	8000288 <__aeabi_dsub>
 80064a6:	a36e      	add	r3, pc, #440	; (adr r3, 8006660 <_dtoa_r+0x2e0>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f7fa f8a4 	bl	80005f8 <__aeabi_dmul>
 80064b0:	a36d      	add	r3, pc, #436	; (adr r3, 8006668 <_dtoa_r+0x2e8>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7f9 fee9 	bl	800028c <__adddf3>
 80064ba:	4606      	mov	r6, r0
 80064bc:	4628      	mov	r0, r5
 80064be:	460f      	mov	r7, r1
 80064c0:	f7fa f830 	bl	8000524 <__aeabi_i2d>
 80064c4:	a36a      	add	r3, pc, #424	; (adr r3, 8006670 <_dtoa_r+0x2f0>)
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	f7fa f895 	bl	80005f8 <__aeabi_dmul>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4630      	mov	r0, r6
 80064d4:	4639      	mov	r1, r7
 80064d6:	f7f9 fed9 	bl	800028c <__adddf3>
 80064da:	4606      	mov	r6, r0
 80064dc:	460f      	mov	r7, r1
 80064de:	f7fa fb3b 	bl	8000b58 <__aeabi_d2iz>
 80064e2:	2200      	movs	r2, #0
 80064e4:	4682      	mov	sl, r0
 80064e6:	2300      	movs	r3, #0
 80064e8:	4630      	mov	r0, r6
 80064ea:	4639      	mov	r1, r7
 80064ec:	f7fa faf6 	bl	8000adc <__aeabi_dcmplt>
 80064f0:	b148      	cbz	r0, 8006506 <_dtoa_r+0x186>
 80064f2:	4650      	mov	r0, sl
 80064f4:	f7fa f816 	bl	8000524 <__aeabi_i2d>
 80064f8:	4632      	mov	r2, r6
 80064fa:	463b      	mov	r3, r7
 80064fc:	f7fa fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006500:	b908      	cbnz	r0, 8006506 <_dtoa_r+0x186>
 8006502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006506:	f1ba 0f16 	cmp.w	sl, #22
 800650a:	d854      	bhi.n	80065b6 <_dtoa_r+0x236>
 800650c:	4b61      	ldr	r3, [pc, #388]	; (8006694 <_dtoa_r+0x314>)
 800650e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800651a:	f7fa fadf 	bl	8000adc <__aeabi_dcmplt>
 800651e:	2800      	cmp	r0, #0
 8006520:	d04b      	beq.n	80065ba <_dtoa_r+0x23a>
 8006522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006526:	2300      	movs	r3, #0
 8006528:	930e      	str	r3, [sp, #56]	; 0x38
 800652a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800652c:	1b5d      	subs	r5, r3, r5
 800652e:	1e6b      	subs	r3, r5, #1
 8006530:	9304      	str	r3, [sp, #16]
 8006532:	bf43      	ittte	mi
 8006534:	2300      	movmi	r3, #0
 8006536:	f1c5 0801 	rsbmi	r8, r5, #1
 800653a:	9304      	strmi	r3, [sp, #16]
 800653c:	f04f 0800 	movpl.w	r8, #0
 8006540:	f1ba 0f00 	cmp.w	sl, #0
 8006544:	db3b      	blt.n	80065be <_dtoa_r+0x23e>
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800654c:	4453      	add	r3, sl
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	2300      	movs	r3, #0
 8006552:	9306      	str	r3, [sp, #24]
 8006554:	9b05      	ldr	r3, [sp, #20]
 8006556:	2b09      	cmp	r3, #9
 8006558:	d869      	bhi.n	800662e <_dtoa_r+0x2ae>
 800655a:	2b05      	cmp	r3, #5
 800655c:	bfc4      	itt	gt
 800655e:	3b04      	subgt	r3, #4
 8006560:	9305      	strgt	r3, [sp, #20]
 8006562:	9b05      	ldr	r3, [sp, #20]
 8006564:	f1a3 0302 	sub.w	r3, r3, #2
 8006568:	bfcc      	ite	gt
 800656a:	2500      	movgt	r5, #0
 800656c:	2501      	movle	r5, #1
 800656e:	2b03      	cmp	r3, #3
 8006570:	d869      	bhi.n	8006646 <_dtoa_r+0x2c6>
 8006572:	e8df f003 	tbb	[pc, r3]
 8006576:	4e2c      	.short	0x4e2c
 8006578:	5a4c      	.short	0x5a4c
 800657a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800657e:	441d      	add	r5, r3
 8006580:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006584:	2b20      	cmp	r3, #32
 8006586:	bfc1      	itttt	gt
 8006588:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800658c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006590:	fa09 f303 	lslgt.w	r3, r9, r3
 8006594:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006598:	bfda      	itte	le
 800659a:	f1c3 0320 	rsble	r3, r3, #32
 800659e:	fa06 f003 	lslle.w	r0, r6, r3
 80065a2:	4318      	orrgt	r0, r3
 80065a4:	f7f9 ffae 	bl	8000504 <__aeabi_ui2d>
 80065a8:	2301      	movs	r3, #1
 80065aa:	4606      	mov	r6, r0
 80065ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065b0:	3d01      	subs	r5, #1
 80065b2:	9310      	str	r3, [sp, #64]	; 0x40
 80065b4:	e771      	b.n	800649a <_dtoa_r+0x11a>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e7b6      	b.n	8006528 <_dtoa_r+0x1a8>
 80065ba:	900e      	str	r0, [sp, #56]	; 0x38
 80065bc:	e7b5      	b.n	800652a <_dtoa_r+0x1aa>
 80065be:	f1ca 0300 	rsb	r3, sl, #0
 80065c2:	9306      	str	r3, [sp, #24]
 80065c4:	2300      	movs	r3, #0
 80065c6:	eba8 080a 	sub.w	r8, r8, sl
 80065ca:	930d      	str	r3, [sp, #52]	; 0x34
 80065cc:	e7c2      	b.n	8006554 <_dtoa_r+0x1d4>
 80065ce:	2300      	movs	r3, #0
 80065d0:	9308      	str	r3, [sp, #32]
 80065d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dc39      	bgt.n	800664c <_dtoa_r+0x2cc>
 80065d8:	f04f 0901 	mov.w	r9, #1
 80065dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80065e0:	464b      	mov	r3, r9
 80065e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80065e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80065e8:	2200      	movs	r2, #0
 80065ea:	6042      	str	r2, [r0, #4]
 80065ec:	2204      	movs	r2, #4
 80065ee:	f102 0614 	add.w	r6, r2, #20
 80065f2:	429e      	cmp	r6, r3
 80065f4:	6841      	ldr	r1, [r0, #4]
 80065f6:	d92f      	bls.n	8006658 <_dtoa_r+0x2d8>
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 feeb 	bl	80073d4 <_Balloc>
 80065fe:	9000      	str	r0, [sp, #0]
 8006600:	2800      	cmp	r0, #0
 8006602:	d14b      	bne.n	800669c <_dtoa_r+0x31c>
 8006604:	4b24      	ldr	r3, [pc, #144]	; (8006698 <_dtoa_r+0x318>)
 8006606:	4602      	mov	r2, r0
 8006608:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800660c:	e6d1      	b.n	80063b2 <_dtoa_r+0x32>
 800660e:	2301      	movs	r3, #1
 8006610:	e7de      	b.n	80065d0 <_dtoa_r+0x250>
 8006612:	2300      	movs	r3, #0
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006618:	eb0a 0903 	add.w	r9, sl, r3
 800661c:	f109 0301 	add.w	r3, r9, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	bfb8      	it	lt
 8006626:	2301      	movlt	r3, #1
 8006628:	e7dd      	b.n	80065e6 <_dtoa_r+0x266>
 800662a:	2301      	movs	r3, #1
 800662c:	e7f2      	b.n	8006614 <_dtoa_r+0x294>
 800662e:	2501      	movs	r5, #1
 8006630:	2300      	movs	r3, #0
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	9508      	str	r5, [sp, #32]
 8006636:	f04f 39ff 	mov.w	r9, #4294967295
 800663a:	2200      	movs	r2, #0
 800663c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006640:	2312      	movs	r3, #18
 8006642:	9209      	str	r2, [sp, #36]	; 0x24
 8006644:	e7cf      	b.n	80065e6 <_dtoa_r+0x266>
 8006646:	2301      	movs	r3, #1
 8006648:	9308      	str	r3, [sp, #32]
 800664a:	e7f4      	b.n	8006636 <_dtoa_r+0x2b6>
 800664c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006650:	f8cd 9004 	str.w	r9, [sp, #4]
 8006654:	464b      	mov	r3, r9
 8006656:	e7c6      	b.n	80065e6 <_dtoa_r+0x266>
 8006658:	3101      	adds	r1, #1
 800665a:	6041      	str	r1, [r0, #4]
 800665c:	0052      	lsls	r2, r2, #1
 800665e:	e7c6      	b.n	80065ee <_dtoa_r+0x26e>
 8006660:	636f4361 	.word	0x636f4361
 8006664:	3fd287a7 	.word	0x3fd287a7
 8006668:	8b60c8b3 	.word	0x8b60c8b3
 800666c:	3fc68a28 	.word	0x3fc68a28
 8006670:	509f79fb 	.word	0x509f79fb
 8006674:	3fd34413 	.word	0x3fd34413
 8006678:	0800cb7f 	.word	0x0800cb7f
 800667c:	0800cb96 	.word	0x0800cb96
 8006680:	7ff00000 	.word	0x7ff00000
 8006684:	0800cb7b 	.word	0x0800cb7b
 8006688:	0800cb72 	.word	0x0800cb72
 800668c:	0800ca4e 	.word	0x0800ca4e
 8006690:	3ff80000 	.word	0x3ff80000
 8006694:	0800cd00 	.word	0x0800cd00
 8006698:	0800cbf5 	.word	0x0800cbf5
 800669c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800669e:	9a00      	ldr	r2, [sp, #0]
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	9b01      	ldr	r3, [sp, #4]
 80066a4:	2b0e      	cmp	r3, #14
 80066a6:	f200 80ad 	bhi.w	8006804 <_dtoa_r+0x484>
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	f000 80aa 	beq.w	8006804 <_dtoa_r+0x484>
 80066b0:	f1ba 0f00 	cmp.w	sl, #0
 80066b4:	dd36      	ble.n	8006724 <_dtoa_r+0x3a4>
 80066b6:	4ac3      	ldr	r2, [pc, #780]	; (80069c4 <_dtoa_r+0x644>)
 80066b8:	f00a 030f 	and.w	r3, sl, #15
 80066bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066c0:	ed93 7b00 	vldr	d7, [r3]
 80066c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80066c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80066cc:	eeb0 8a47 	vmov.f32	s16, s14
 80066d0:	eef0 8a67 	vmov.f32	s17, s15
 80066d4:	d016      	beq.n	8006704 <_dtoa_r+0x384>
 80066d6:	4bbc      	ldr	r3, [pc, #752]	; (80069c8 <_dtoa_r+0x648>)
 80066d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066e0:	f7fa f8b4 	bl	800084c <__aeabi_ddiv>
 80066e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e8:	f007 070f 	and.w	r7, r7, #15
 80066ec:	2503      	movs	r5, #3
 80066ee:	4eb6      	ldr	r6, [pc, #728]	; (80069c8 <_dtoa_r+0x648>)
 80066f0:	b957      	cbnz	r7, 8006708 <_dtoa_r+0x388>
 80066f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f6:	ec53 2b18 	vmov	r2, r3, d8
 80066fa:	f7fa f8a7 	bl	800084c <__aeabi_ddiv>
 80066fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006702:	e029      	b.n	8006758 <_dtoa_r+0x3d8>
 8006704:	2502      	movs	r5, #2
 8006706:	e7f2      	b.n	80066ee <_dtoa_r+0x36e>
 8006708:	07f9      	lsls	r1, r7, #31
 800670a:	d508      	bpl.n	800671e <_dtoa_r+0x39e>
 800670c:	ec51 0b18 	vmov	r0, r1, d8
 8006710:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006714:	f7f9 ff70 	bl	80005f8 <__aeabi_dmul>
 8006718:	ec41 0b18 	vmov	d8, r0, r1
 800671c:	3501      	adds	r5, #1
 800671e:	107f      	asrs	r7, r7, #1
 8006720:	3608      	adds	r6, #8
 8006722:	e7e5      	b.n	80066f0 <_dtoa_r+0x370>
 8006724:	f000 80a6 	beq.w	8006874 <_dtoa_r+0x4f4>
 8006728:	f1ca 0600 	rsb	r6, sl, #0
 800672c:	4ba5      	ldr	r3, [pc, #660]	; (80069c4 <_dtoa_r+0x644>)
 800672e:	4fa6      	ldr	r7, [pc, #664]	; (80069c8 <_dtoa_r+0x648>)
 8006730:	f006 020f 	and.w	r2, r6, #15
 8006734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006740:	f7f9 ff5a 	bl	80005f8 <__aeabi_dmul>
 8006744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006748:	1136      	asrs	r6, r6, #4
 800674a:	2300      	movs	r3, #0
 800674c:	2502      	movs	r5, #2
 800674e:	2e00      	cmp	r6, #0
 8006750:	f040 8085 	bne.w	800685e <_dtoa_r+0x4de>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1d2      	bne.n	80066fe <_dtoa_r+0x37e>
 8006758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 808c 	beq.w	8006878 <_dtoa_r+0x4f8>
 8006760:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006764:	4b99      	ldr	r3, [pc, #612]	; (80069cc <_dtoa_r+0x64c>)
 8006766:	2200      	movs	r2, #0
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7fa f9b6 	bl	8000adc <__aeabi_dcmplt>
 8006770:	2800      	cmp	r0, #0
 8006772:	f000 8081 	beq.w	8006878 <_dtoa_r+0x4f8>
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d07d      	beq.n	8006878 <_dtoa_r+0x4f8>
 800677c:	f1b9 0f00 	cmp.w	r9, #0
 8006780:	dd3c      	ble.n	80067fc <_dtoa_r+0x47c>
 8006782:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006786:	9307      	str	r3, [sp, #28]
 8006788:	2200      	movs	r2, #0
 800678a:	4b91      	ldr	r3, [pc, #580]	; (80069d0 <_dtoa_r+0x650>)
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	f7f9 ff32 	bl	80005f8 <__aeabi_dmul>
 8006794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006798:	3501      	adds	r5, #1
 800679a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800679e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067a2:	4628      	mov	r0, r5
 80067a4:	f7f9 febe 	bl	8000524 <__aeabi_i2d>
 80067a8:	4632      	mov	r2, r6
 80067aa:	463b      	mov	r3, r7
 80067ac:	f7f9 ff24 	bl	80005f8 <__aeabi_dmul>
 80067b0:	4b88      	ldr	r3, [pc, #544]	; (80069d4 <_dtoa_r+0x654>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	f7f9 fd6a 	bl	800028c <__adddf3>
 80067b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80067bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c0:	9303      	str	r3, [sp, #12]
 80067c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d15c      	bne.n	8006882 <_dtoa_r+0x502>
 80067c8:	4b83      	ldr	r3, [pc, #524]	; (80069d8 <_dtoa_r+0x658>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	4630      	mov	r0, r6
 80067ce:	4639      	mov	r1, r7
 80067d0:	f7f9 fd5a 	bl	8000288 <__aeabi_dsub>
 80067d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067d8:	4606      	mov	r6, r0
 80067da:	460f      	mov	r7, r1
 80067dc:	f7fa f99c 	bl	8000b18 <__aeabi_dcmpgt>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f040 8296 	bne.w	8006d12 <_dtoa_r+0x992>
 80067e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80067ea:	4630      	mov	r0, r6
 80067ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067f0:	4639      	mov	r1, r7
 80067f2:	f7fa f973 	bl	8000adc <__aeabi_dcmplt>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	f040 8288 	bne.w	8006d0c <_dtoa_r+0x98c>
 80067fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006800:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006806:	2b00      	cmp	r3, #0
 8006808:	f2c0 8158 	blt.w	8006abc <_dtoa_r+0x73c>
 800680c:	f1ba 0f0e 	cmp.w	sl, #14
 8006810:	f300 8154 	bgt.w	8006abc <_dtoa_r+0x73c>
 8006814:	4b6b      	ldr	r3, [pc, #428]	; (80069c4 <_dtoa_r+0x644>)
 8006816:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800681a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800681e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	f280 80e3 	bge.w	80069ec <_dtoa_r+0x66c>
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f300 80df 	bgt.w	80069ec <_dtoa_r+0x66c>
 800682e:	f040 826d 	bne.w	8006d0c <_dtoa_r+0x98c>
 8006832:	4b69      	ldr	r3, [pc, #420]	; (80069d8 <_dtoa_r+0x658>)
 8006834:	2200      	movs	r2, #0
 8006836:	4640      	mov	r0, r8
 8006838:	4649      	mov	r1, r9
 800683a:	f7f9 fedd 	bl	80005f8 <__aeabi_dmul>
 800683e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006842:	f7fa f95f 	bl	8000b04 <__aeabi_dcmpge>
 8006846:	9e01      	ldr	r6, [sp, #4]
 8006848:	4637      	mov	r7, r6
 800684a:	2800      	cmp	r0, #0
 800684c:	f040 8243 	bne.w	8006cd6 <_dtoa_r+0x956>
 8006850:	9d00      	ldr	r5, [sp, #0]
 8006852:	2331      	movs	r3, #49	; 0x31
 8006854:	f805 3b01 	strb.w	r3, [r5], #1
 8006858:	f10a 0a01 	add.w	sl, sl, #1
 800685c:	e23f      	b.n	8006cde <_dtoa_r+0x95e>
 800685e:	07f2      	lsls	r2, r6, #31
 8006860:	d505      	bpl.n	800686e <_dtoa_r+0x4ee>
 8006862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006866:	f7f9 fec7 	bl	80005f8 <__aeabi_dmul>
 800686a:	3501      	adds	r5, #1
 800686c:	2301      	movs	r3, #1
 800686e:	1076      	asrs	r6, r6, #1
 8006870:	3708      	adds	r7, #8
 8006872:	e76c      	b.n	800674e <_dtoa_r+0x3ce>
 8006874:	2502      	movs	r5, #2
 8006876:	e76f      	b.n	8006758 <_dtoa_r+0x3d8>
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	f8cd a01c 	str.w	sl, [sp, #28]
 800687e:	930c      	str	r3, [sp, #48]	; 0x30
 8006880:	e78d      	b.n	800679e <_dtoa_r+0x41e>
 8006882:	9900      	ldr	r1, [sp, #0]
 8006884:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006888:	4b4e      	ldr	r3, [pc, #312]	; (80069c4 <_dtoa_r+0x644>)
 800688a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800688e:	4401      	add	r1, r0
 8006890:	9102      	str	r1, [sp, #8]
 8006892:	9908      	ldr	r1, [sp, #32]
 8006894:	eeb0 8a47 	vmov.f32	s16, s14
 8006898:	eef0 8a67 	vmov.f32	s17, s15
 800689c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d045      	beq.n	8006934 <_dtoa_r+0x5b4>
 80068a8:	494c      	ldr	r1, [pc, #304]	; (80069dc <_dtoa_r+0x65c>)
 80068aa:	2000      	movs	r0, #0
 80068ac:	f7f9 ffce 	bl	800084c <__aeabi_ddiv>
 80068b0:	ec53 2b18 	vmov	r2, r3, d8
 80068b4:	f7f9 fce8 	bl	8000288 <__aeabi_dsub>
 80068b8:	9d00      	ldr	r5, [sp, #0]
 80068ba:	ec41 0b18 	vmov	d8, r0, r1
 80068be:	4639      	mov	r1, r7
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7fa f949 	bl	8000b58 <__aeabi_d2iz>
 80068c6:	900c      	str	r0, [sp, #48]	; 0x30
 80068c8:	f7f9 fe2c 	bl	8000524 <__aeabi_i2d>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7f9 fcd8 	bl	8000288 <__aeabi_dsub>
 80068d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068da:	3330      	adds	r3, #48	; 0x30
 80068dc:	f805 3b01 	strb.w	r3, [r5], #1
 80068e0:	ec53 2b18 	vmov	r2, r3, d8
 80068e4:	4606      	mov	r6, r0
 80068e6:	460f      	mov	r7, r1
 80068e8:	f7fa f8f8 	bl	8000adc <__aeabi_dcmplt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d165      	bne.n	80069bc <_dtoa_r+0x63c>
 80068f0:	4632      	mov	r2, r6
 80068f2:	463b      	mov	r3, r7
 80068f4:	4935      	ldr	r1, [pc, #212]	; (80069cc <_dtoa_r+0x64c>)
 80068f6:	2000      	movs	r0, #0
 80068f8:	f7f9 fcc6 	bl	8000288 <__aeabi_dsub>
 80068fc:	ec53 2b18 	vmov	r2, r3, d8
 8006900:	f7fa f8ec 	bl	8000adc <__aeabi_dcmplt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f040 80b9 	bne.w	8006a7c <_dtoa_r+0x6fc>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	429d      	cmp	r5, r3
 800690e:	f43f af75 	beq.w	80067fc <_dtoa_r+0x47c>
 8006912:	4b2f      	ldr	r3, [pc, #188]	; (80069d0 <_dtoa_r+0x650>)
 8006914:	ec51 0b18 	vmov	r0, r1, d8
 8006918:	2200      	movs	r2, #0
 800691a:	f7f9 fe6d 	bl	80005f8 <__aeabi_dmul>
 800691e:	4b2c      	ldr	r3, [pc, #176]	; (80069d0 <_dtoa_r+0x650>)
 8006920:	ec41 0b18 	vmov	d8, r0, r1
 8006924:	2200      	movs	r2, #0
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fe65 	bl	80005f8 <__aeabi_dmul>
 800692e:	4606      	mov	r6, r0
 8006930:	460f      	mov	r7, r1
 8006932:	e7c4      	b.n	80068be <_dtoa_r+0x53e>
 8006934:	ec51 0b17 	vmov	r0, r1, d7
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	9b02      	ldr	r3, [sp, #8]
 800693e:	9d00      	ldr	r5, [sp, #0]
 8006940:	930c      	str	r3, [sp, #48]	; 0x30
 8006942:	ec41 0b18 	vmov	d8, r0, r1
 8006946:	4639      	mov	r1, r7
 8006948:	4630      	mov	r0, r6
 800694a:	f7fa f905 	bl	8000b58 <__aeabi_d2iz>
 800694e:	9011      	str	r0, [sp, #68]	; 0x44
 8006950:	f7f9 fde8 	bl	8000524 <__aeabi_i2d>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7f9 fc94 	bl	8000288 <__aeabi_dsub>
 8006960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006962:	3330      	adds	r3, #48	; 0x30
 8006964:	f805 3b01 	strb.w	r3, [r5], #1
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	429d      	cmp	r5, r3
 800696c:	4606      	mov	r6, r0
 800696e:	460f      	mov	r7, r1
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	d134      	bne.n	80069e0 <_dtoa_r+0x660>
 8006976:	4b19      	ldr	r3, [pc, #100]	; (80069dc <_dtoa_r+0x65c>)
 8006978:	ec51 0b18 	vmov	r0, r1, d8
 800697c:	f7f9 fc86 	bl	800028c <__adddf3>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4630      	mov	r0, r6
 8006986:	4639      	mov	r1, r7
 8006988:	f7fa f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800698c:	2800      	cmp	r0, #0
 800698e:	d175      	bne.n	8006a7c <_dtoa_r+0x6fc>
 8006990:	ec53 2b18 	vmov	r2, r3, d8
 8006994:	4911      	ldr	r1, [pc, #68]	; (80069dc <_dtoa_r+0x65c>)
 8006996:	2000      	movs	r0, #0
 8006998:	f7f9 fc76 	bl	8000288 <__aeabi_dsub>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7fa f89a 	bl	8000adc <__aeabi_dcmplt>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f43f af27 	beq.w	80067fc <_dtoa_r+0x47c>
 80069ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069b0:	1e6b      	subs	r3, r5, #1
 80069b2:	930c      	str	r3, [sp, #48]	; 0x30
 80069b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069b8:	2b30      	cmp	r3, #48	; 0x30
 80069ba:	d0f8      	beq.n	80069ae <_dtoa_r+0x62e>
 80069bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80069c0:	e04a      	b.n	8006a58 <_dtoa_r+0x6d8>
 80069c2:	bf00      	nop
 80069c4:	0800cd00 	.word	0x0800cd00
 80069c8:	0800ccd8 	.word	0x0800ccd8
 80069cc:	3ff00000 	.word	0x3ff00000
 80069d0:	40240000 	.word	0x40240000
 80069d4:	401c0000 	.word	0x401c0000
 80069d8:	40140000 	.word	0x40140000
 80069dc:	3fe00000 	.word	0x3fe00000
 80069e0:	4baf      	ldr	r3, [pc, #700]	; (8006ca0 <_dtoa_r+0x920>)
 80069e2:	f7f9 fe09 	bl	80005f8 <__aeabi_dmul>
 80069e6:	4606      	mov	r6, r0
 80069e8:	460f      	mov	r7, r1
 80069ea:	e7ac      	b.n	8006946 <_dtoa_r+0x5c6>
 80069ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069f0:	9d00      	ldr	r5, [sp, #0]
 80069f2:	4642      	mov	r2, r8
 80069f4:	464b      	mov	r3, r9
 80069f6:	4630      	mov	r0, r6
 80069f8:	4639      	mov	r1, r7
 80069fa:	f7f9 ff27 	bl	800084c <__aeabi_ddiv>
 80069fe:	f7fa f8ab 	bl	8000b58 <__aeabi_d2iz>
 8006a02:	9002      	str	r0, [sp, #8]
 8006a04:	f7f9 fd8e 	bl	8000524 <__aeabi_i2d>
 8006a08:	4642      	mov	r2, r8
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	f7f9 fdf4 	bl	80005f8 <__aeabi_dmul>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4630      	mov	r0, r6
 8006a16:	4639      	mov	r1, r7
 8006a18:	f7f9 fc36 	bl	8000288 <__aeabi_dsub>
 8006a1c:	9e02      	ldr	r6, [sp, #8]
 8006a1e:	9f01      	ldr	r7, [sp, #4]
 8006a20:	3630      	adds	r6, #48	; 0x30
 8006a22:	f805 6b01 	strb.w	r6, [r5], #1
 8006a26:	9e00      	ldr	r6, [sp, #0]
 8006a28:	1bae      	subs	r6, r5, r6
 8006a2a:	42b7      	cmp	r7, r6
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	d137      	bne.n	8006aa2 <_dtoa_r+0x722>
 8006a32:	f7f9 fc2b 	bl	800028c <__adddf3>
 8006a36:	4642      	mov	r2, r8
 8006a38:	464b      	mov	r3, r9
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	f7fa f86b 	bl	8000b18 <__aeabi_dcmpgt>
 8006a42:	b9c8      	cbnz	r0, 8006a78 <_dtoa_r+0x6f8>
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	4630      	mov	r0, r6
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	f7fa f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a50:	b110      	cbz	r0, 8006a58 <_dtoa_r+0x6d8>
 8006a52:	9b02      	ldr	r3, [sp, #8]
 8006a54:	07d9      	lsls	r1, r3, #31
 8006a56:	d40f      	bmi.n	8006a78 <_dtoa_r+0x6f8>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	4659      	mov	r1, fp
 8006a5c:	f000 fcfa 	bl	8007454 <_Bfree>
 8006a60:	2300      	movs	r3, #0
 8006a62:	702b      	strb	r3, [r5, #0]
 8006a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a66:	f10a 0001 	add.w	r0, sl, #1
 8006a6a:	6018      	str	r0, [r3, #0]
 8006a6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f43f acd8 	beq.w	8006424 <_dtoa_r+0xa4>
 8006a74:	601d      	str	r5, [r3, #0]
 8006a76:	e4d5      	b.n	8006424 <_dtoa_r+0xa4>
 8006a78:	f8cd a01c 	str.w	sl, [sp, #28]
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	461d      	mov	r5, r3
 8006a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a84:	2a39      	cmp	r2, #57	; 0x39
 8006a86:	d108      	bne.n	8006a9a <_dtoa_r+0x71a>
 8006a88:	9a00      	ldr	r2, [sp, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d1f7      	bne.n	8006a7e <_dtoa_r+0x6fe>
 8006a8e:	9a07      	ldr	r2, [sp, #28]
 8006a90:	9900      	ldr	r1, [sp, #0]
 8006a92:	3201      	adds	r2, #1
 8006a94:	9207      	str	r2, [sp, #28]
 8006a96:	2230      	movs	r2, #48	; 0x30
 8006a98:	700a      	strb	r2, [r1, #0]
 8006a9a:	781a      	ldrb	r2, [r3, #0]
 8006a9c:	3201      	adds	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	e78c      	b.n	80069bc <_dtoa_r+0x63c>
 8006aa2:	4b7f      	ldr	r3, [pc, #508]	; (8006ca0 <_dtoa_r+0x920>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f7f9 fda7 	bl	80005f8 <__aeabi_dmul>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2300      	movs	r3, #0
 8006aae:	4606      	mov	r6, r0
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	f7fa f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d09b      	beq.n	80069f2 <_dtoa_r+0x672>
 8006aba:	e7cd      	b.n	8006a58 <_dtoa_r+0x6d8>
 8006abc:	9a08      	ldr	r2, [sp, #32]
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	f000 80c4 	beq.w	8006c4c <_dtoa_r+0x8cc>
 8006ac4:	9a05      	ldr	r2, [sp, #20]
 8006ac6:	2a01      	cmp	r2, #1
 8006ac8:	f300 80a8 	bgt.w	8006c1c <_dtoa_r+0x89c>
 8006acc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	f000 80a0 	beq.w	8006c14 <_dtoa_r+0x894>
 8006ad4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ad8:	9e06      	ldr	r6, [sp, #24]
 8006ada:	4645      	mov	r5, r8
 8006adc:	9a04      	ldr	r2, [sp, #16]
 8006ade:	2101      	movs	r1, #1
 8006ae0:	441a      	add	r2, r3
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	4498      	add	r8, r3
 8006ae6:	9204      	str	r2, [sp, #16]
 8006ae8:	f000 fd70 	bl	80075cc <__i2b>
 8006aec:	4607      	mov	r7, r0
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	dd0b      	ble.n	8006b0a <_dtoa_r+0x78a>
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	dd08      	ble.n	8006b0a <_dtoa_r+0x78a>
 8006af8:	42ab      	cmp	r3, r5
 8006afa:	9a04      	ldr	r2, [sp, #16]
 8006afc:	bfa8      	it	ge
 8006afe:	462b      	movge	r3, r5
 8006b00:	eba8 0803 	sub.w	r8, r8, r3
 8006b04:	1aed      	subs	r5, r5, r3
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	9b06      	ldr	r3, [sp, #24]
 8006b0c:	b1fb      	cbz	r3, 8006b4e <_dtoa_r+0x7ce>
 8006b0e:	9b08      	ldr	r3, [sp, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 809f 	beq.w	8006c54 <_dtoa_r+0x8d4>
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	dd11      	ble.n	8006b3e <_dtoa_r+0x7be>
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	4632      	mov	r2, r6
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f000 fe10 	bl	8007744 <__pow5mult>
 8006b24:	465a      	mov	r2, fp
 8006b26:	4601      	mov	r1, r0
 8006b28:	4607      	mov	r7, r0
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 fd64 	bl	80075f8 <__multiply>
 8006b30:	4659      	mov	r1, fp
 8006b32:	9007      	str	r0, [sp, #28]
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 fc8d 	bl	8007454 <_Bfree>
 8006b3a:	9b07      	ldr	r3, [sp, #28]
 8006b3c:	469b      	mov	fp, r3
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	1b9a      	subs	r2, r3, r6
 8006b42:	d004      	beq.n	8006b4e <_dtoa_r+0x7ce>
 8006b44:	4659      	mov	r1, fp
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 fdfc 	bl	8007744 <__pow5mult>
 8006b4c:	4683      	mov	fp, r0
 8006b4e:	2101      	movs	r1, #1
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 fd3b 	bl	80075cc <__i2b>
 8006b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	dd7c      	ble.n	8006c58 <_dtoa_r+0x8d8>
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4601      	mov	r1, r0
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fdee 	bl	8007744 <__pow5mult>
 8006b68:	9b05      	ldr	r3, [sp, #20]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	dd76      	ble.n	8006c5e <_dtoa_r+0x8de>
 8006b70:	2300      	movs	r3, #0
 8006b72:	9306      	str	r3, [sp, #24]
 8006b74:	6933      	ldr	r3, [r6, #16]
 8006b76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b7a:	6918      	ldr	r0, [r3, #16]
 8006b7c:	f000 fcd6 	bl	800752c <__hi0bits>
 8006b80:	f1c0 0020 	rsb	r0, r0, #32
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	4418      	add	r0, r3
 8006b88:	f010 001f 	ands.w	r0, r0, #31
 8006b8c:	f000 8086 	beq.w	8006c9c <_dtoa_r+0x91c>
 8006b90:	f1c0 0320 	rsb	r3, r0, #32
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	dd7f      	ble.n	8006c98 <_dtoa_r+0x918>
 8006b98:	f1c0 001c 	rsb	r0, r0, #28
 8006b9c:	9b04      	ldr	r3, [sp, #16]
 8006b9e:	4403      	add	r3, r0
 8006ba0:	4480      	add	r8, r0
 8006ba2:	4405      	add	r5, r0
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	f1b8 0f00 	cmp.w	r8, #0
 8006baa:	dd05      	ble.n	8006bb8 <_dtoa_r+0x838>
 8006bac:	4659      	mov	r1, fp
 8006bae:	4642      	mov	r2, r8
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fe21 	bl	80077f8 <__lshift>
 8006bb6:	4683      	mov	fp, r0
 8006bb8:	9b04      	ldr	r3, [sp, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	dd05      	ble.n	8006bca <_dtoa_r+0x84a>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 fe18 	bl	80077f8 <__lshift>
 8006bc8:	4606      	mov	r6, r0
 8006bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d069      	beq.n	8006ca4 <_dtoa_r+0x924>
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4658      	mov	r0, fp
 8006bd4:	f000 fe7c 	bl	80078d0 <__mcmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	da63      	bge.n	8006ca4 <_dtoa_r+0x924>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4659      	mov	r1, fp
 8006be0:	220a      	movs	r2, #10
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fc58 	bl	8007498 <__multadd>
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bee:	4683      	mov	fp, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 818f 	beq.w	8006f14 <_dtoa_r+0xb94>
 8006bf6:	4639      	mov	r1, r7
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	220a      	movs	r2, #10
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fc4b 	bl	8007498 <__multadd>
 8006c02:	f1b9 0f00 	cmp.w	r9, #0
 8006c06:	4607      	mov	r7, r0
 8006c08:	f300 808e 	bgt.w	8006d28 <_dtoa_r+0x9a8>
 8006c0c:	9b05      	ldr	r3, [sp, #20]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	dc50      	bgt.n	8006cb4 <_dtoa_r+0x934>
 8006c12:	e089      	b.n	8006d28 <_dtoa_r+0x9a8>
 8006c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c1a:	e75d      	b.n	8006ad8 <_dtoa_r+0x758>
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	1e5e      	subs	r6, r3, #1
 8006c20:	9b06      	ldr	r3, [sp, #24]
 8006c22:	42b3      	cmp	r3, r6
 8006c24:	bfbf      	itttt	lt
 8006c26:	9b06      	ldrlt	r3, [sp, #24]
 8006c28:	9606      	strlt	r6, [sp, #24]
 8006c2a:	1af2      	sublt	r2, r6, r3
 8006c2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006c2e:	bfb6      	itet	lt
 8006c30:	189b      	addlt	r3, r3, r2
 8006c32:	1b9e      	subge	r6, r3, r6
 8006c34:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006c36:	9b01      	ldr	r3, [sp, #4]
 8006c38:	bfb8      	it	lt
 8006c3a:	2600      	movlt	r6, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	bfb5      	itete	lt
 8006c40:	eba8 0503 	sublt.w	r5, r8, r3
 8006c44:	9b01      	ldrge	r3, [sp, #4]
 8006c46:	2300      	movlt	r3, #0
 8006c48:	4645      	movge	r5, r8
 8006c4a:	e747      	b.n	8006adc <_dtoa_r+0x75c>
 8006c4c:	9e06      	ldr	r6, [sp, #24]
 8006c4e:	9f08      	ldr	r7, [sp, #32]
 8006c50:	4645      	mov	r5, r8
 8006c52:	e74c      	b.n	8006aee <_dtoa_r+0x76e>
 8006c54:	9a06      	ldr	r2, [sp, #24]
 8006c56:	e775      	b.n	8006b44 <_dtoa_r+0x7c4>
 8006c58:	9b05      	ldr	r3, [sp, #20]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	dc18      	bgt.n	8006c90 <_dtoa_r+0x910>
 8006c5e:	9b02      	ldr	r3, [sp, #8]
 8006c60:	b9b3      	cbnz	r3, 8006c90 <_dtoa_r+0x910>
 8006c62:	9b03      	ldr	r3, [sp, #12]
 8006c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c68:	b9a3      	cbnz	r3, 8006c94 <_dtoa_r+0x914>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c70:	0d1b      	lsrs	r3, r3, #20
 8006c72:	051b      	lsls	r3, r3, #20
 8006c74:	b12b      	cbz	r3, 8006c82 <_dtoa_r+0x902>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	9304      	str	r3, [sp, #16]
 8006c7c:	f108 0801 	add.w	r8, r8, #1
 8006c80:	2301      	movs	r3, #1
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f47f af74 	bne.w	8006b74 <_dtoa_r+0x7f4>
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	e779      	b.n	8006b84 <_dtoa_r+0x804>
 8006c90:	2300      	movs	r3, #0
 8006c92:	e7f6      	b.n	8006c82 <_dtoa_r+0x902>
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	e7f4      	b.n	8006c82 <_dtoa_r+0x902>
 8006c98:	d085      	beq.n	8006ba6 <_dtoa_r+0x826>
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	301c      	adds	r0, #28
 8006c9e:	e77d      	b.n	8006b9c <_dtoa_r+0x81c>
 8006ca0:	40240000 	.word	0x40240000
 8006ca4:	9b01      	ldr	r3, [sp, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dc38      	bgt.n	8006d1c <_dtoa_r+0x99c>
 8006caa:	9b05      	ldr	r3, [sp, #20]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	dd35      	ble.n	8006d1c <_dtoa_r+0x99c>
 8006cb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006cb4:	f1b9 0f00 	cmp.w	r9, #0
 8006cb8:	d10d      	bne.n	8006cd6 <_dtoa_r+0x956>
 8006cba:	4631      	mov	r1, r6
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fbe9 	bl	8007498 <__multadd>
 8006cc6:	4601      	mov	r1, r0
 8006cc8:	4606      	mov	r6, r0
 8006cca:	4658      	mov	r0, fp
 8006ccc:	f000 fe00 	bl	80078d0 <__mcmp>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	f73f adbd 	bgt.w	8006850 <_dtoa_r+0x4d0>
 8006cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd8:	9d00      	ldr	r5, [sp, #0]
 8006cda:	ea6f 0a03 	mvn.w	sl, r3
 8006cde:	f04f 0800 	mov.w	r8, #0
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 fbb5 	bl	8007454 <_Bfree>
 8006cea:	2f00      	cmp	r7, #0
 8006cec:	f43f aeb4 	beq.w	8006a58 <_dtoa_r+0x6d8>
 8006cf0:	f1b8 0f00 	cmp.w	r8, #0
 8006cf4:	d005      	beq.n	8006d02 <_dtoa_r+0x982>
 8006cf6:	45b8      	cmp	r8, r7
 8006cf8:	d003      	beq.n	8006d02 <_dtoa_r+0x982>
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fba9 	bl	8007454 <_Bfree>
 8006d02:	4639      	mov	r1, r7
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fba5 	bl	8007454 <_Bfree>
 8006d0a:	e6a5      	b.n	8006a58 <_dtoa_r+0x6d8>
 8006d0c:	2600      	movs	r6, #0
 8006d0e:	4637      	mov	r7, r6
 8006d10:	e7e1      	b.n	8006cd6 <_dtoa_r+0x956>
 8006d12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006d14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d18:	4637      	mov	r7, r6
 8006d1a:	e599      	b.n	8006850 <_dtoa_r+0x4d0>
 8006d1c:	9b08      	ldr	r3, [sp, #32]
 8006d1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80fd 	beq.w	8006f22 <_dtoa_r+0xba2>
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	dd05      	ble.n	8006d38 <_dtoa_r+0x9b8>
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	462a      	mov	r2, r5
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 fd61 	bl	80077f8 <__lshift>
 8006d36:	4607      	mov	r7, r0
 8006d38:	9b06      	ldr	r3, [sp, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d05c      	beq.n	8006df8 <_dtoa_r+0xa78>
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 fb47 	bl	80073d4 <_Balloc>
 8006d46:	4605      	mov	r5, r0
 8006d48:	b928      	cbnz	r0, 8006d56 <_dtoa_r+0x9d6>
 8006d4a:	4b80      	ldr	r3, [pc, #512]	; (8006f4c <_dtoa_r+0xbcc>)
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d52:	f7ff bb2e 	b.w	80063b2 <_dtoa_r+0x32>
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	3202      	adds	r2, #2
 8006d5a:	0092      	lsls	r2, r2, #2
 8006d5c:	f107 010c 	add.w	r1, r7, #12
 8006d60:	300c      	adds	r0, #12
 8006d62:	f7fe fa49 	bl	80051f8 <memcpy>
 8006d66:	2201      	movs	r2, #1
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 fd44 	bl	80077f8 <__lshift>
 8006d70:	9b00      	ldr	r3, [sp, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	444b      	add	r3, r9
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	9b02      	ldr	r3, [sp, #8]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	46b8      	mov	r8, r7
 8006d84:	9306      	str	r3, [sp, #24]
 8006d86:	4607      	mov	r7, r0
 8006d88:	9b01      	ldr	r3, [sp, #4]
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	4658      	mov	r0, fp
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	f7ff fa67 	bl	8006264 <quorem>
 8006d96:	4603      	mov	r3, r0
 8006d98:	3330      	adds	r3, #48	; 0x30
 8006d9a:	9004      	str	r0, [sp, #16]
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	4658      	mov	r0, fp
 8006da0:	9308      	str	r3, [sp, #32]
 8006da2:	f000 fd95 	bl	80078d0 <__mcmp>
 8006da6:	463a      	mov	r2, r7
 8006da8:	4681      	mov	r9, r0
 8006daa:	4631      	mov	r1, r6
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 fdab 	bl	8007908 <__mdiff>
 8006db2:	68c2      	ldr	r2, [r0, #12]
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	4605      	mov	r5, r0
 8006db8:	bb02      	cbnz	r2, 8006dfc <_dtoa_r+0xa7c>
 8006dba:	4601      	mov	r1, r0
 8006dbc:	4658      	mov	r0, fp
 8006dbe:	f000 fd87 	bl	80078d0 <__mcmp>
 8006dc2:	9b08      	ldr	r3, [sp, #32]
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4620      	mov	r0, r4
 8006dca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006dce:	f000 fb41 	bl	8007454 <_Bfree>
 8006dd2:	9b05      	ldr	r3, [sp, #20]
 8006dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dd6:	9d01      	ldr	r5, [sp, #4]
 8006dd8:	ea43 0102 	orr.w	r1, r3, r2
 8006ddc:	9b06      	ldr	r3, [sp, #24]
 8006dde:	430b      	orrs	r3, r1
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	d10d      	bne.n	8006e00 <_dtoa_r+0xa80>
 8006de4:	2b39      	cmp	r3, #57	; 0x39
 8006de6:	d029      	beq.n	8006e3c <_dtoa_r+0xabc>
 8006de8:	f1b9 0f00 	cmp.w	r9, #0
 8006dec:	dd01      	ble.n	8006df2 <_dtoa_r+0xa72>
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	3331      	adds	r3, #49	; 0x31
 8006df2:	9a02      	ldr	r2, [sp, #8]
 8006df4:	7013      	strb	r3, [r2, #0]
 8006df6:	e774      	b.n	8006ce2 <_dtoa_r+0x962>
 8006df8:	4638      	mov	r0, r7
 8006dfa:	e7b9      	b.n	8006d70 <_dtoa_r+0x9f0>
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	e7e2      	b.n	8006dc6 <_dtoa_r+0xa46>
 8006e00:	f1b9 0f00 	cmp.w	r9, #0
 8006e04:	db06      	blt.n	8006e14 <_dtoa_r+0xa94>
 8006e06:	9905      	ldr	r1, [sp, #20]
 8006e08:	ea41 0909 	orr.w	r9, r1, r9
 8006e0c:	9906      	ldr	r1, [sp, #24]
 8006e0e:	ea59 0101 	orrs.w	r1, r9, r1
 8006e12:	d120      	bne.n	8006e56 <_dtoa_r+0xad6>
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	ddec      	ble.n	8006df2 <_dtoa_r+0xa72>
 8006e18:	4659      	mov	r1, fp
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	f000 fcea 	bl	80077f8 <__lshift>
 8006e24:	4631      	mov	r1, r6
 8006e26:	4683      	mov	fp, r0
 8006e28:	f000 fd52 	bl	80078d0 <__mcmp>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	dc02      	bgt.n	8006e38 <_dtoa_r+0xab8>
 8006e32:	d1de      	bne.n	8006df2 <_dtoa_r+0xa72>
 8006e34:	07da      	lsls	r2, r3, #31
 8006e36:	d5dc      	bpl.n	8006df2 <_dtoa_r+0xa72>
 8006e38:	2b39      	cmp	r3, #57	; 0x39
 8006e3a:	d1d8      	bne.n	8006dee <_dtoa_r+0xa6e>
 8006e3c:	9a02      	ldr	r2, [sp, #8]
 8006e3e:	2339      	movs	r3, #57	; 0x39
 8006e40:	7013      	strb	r3, [r2, #0]
 8006e42:	462b      	mov	r3, r5
 8006e44:	461d      	mov	r5, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e4c:	2a39      	cmp	r2, #57	; 0x39
 8006e4e:	d050      	beq.n	8006ef2 <_dtoa_r+0xb72>
 8006e50:	3201      	adds	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	e745      	b.n	8006ce2 <_dtoa_r+0x962>
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	dd03      	ble.n	8006e62 <_dtoa_r+0xae2>
 8006e5a:	2b39      	cmp	r3, #57	; 0x39
 8006e5c:	d0ee      	beq.n	8006e3c <_dtoa_r+0xabc>
 8006e5e:	3301      	adds	r3, #1
 8006e60:	e7c7      	b.n	8006df2 <_dtoa_r+0xa72>
 8006e62:	9a01      	ldr	r2, [sp, #4]
 8006e64:	9907      	ldr	r1, [sp, #28]
 8006e66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e6a:	428a      	cmp	r2, r1
 8006e6c:	d02a      	beq.n	8006ec4 <_dtoa_r+0xb44>
 8006e6e:	4659      	mov	r1, fp
 8006e70:	2300      	movs	r3, #0
 8006e72:	220a      	movs	r2, #10
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fb0f 	bl	8007498 <__multadd>
 8006e7a:	45b8      	cmp	r8, r7
 8006e7c:	4683      	mov	fp, r0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	f04f 020a 	mov.w	r2, #10
 8006e86:	4641      	mov	r1, r8
 8006e88:	4620      	mov	r0, r4
 8006e8a:	d107      	bne.n	8006e9c <_dtoa_r+0xb1c>
 8006e8c:	f000 fb04 	bl	8007498 <__multadd>
 8006e90:	4680      	mov	r8, r0
 8006e92:	4607      	mov	r7, r0
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	3301      	adds	r3, #1
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	e775      	b.n	8006d88 <_dtoa_r+0xa08>
 8006e9c:	f000 fafc 	bl	8007498 <__multadd>
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	220a      	movs	r2, #10
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 faf5 	bl	8007498 <__multadd>
 8006eae:	4607      	mov	r7, r0
 8006eb0:	e7f0      	b.n	8006e94 <_dtoa_r+0xb14>
 8006eb2:	f1b9 0f00 	cmp.w	r9, #0
 8006eb6:	9a00      	ldr	r2, [sp, #0]
 8006eb8:	bfcc      	ite	gt
 8006eba:	464d      	movgt	r5, r9
 8006ebc:	2501      	movle	r5, #1
 8006ebe:	4415      	add	r5, r2
 8006ec0:	f04f 0800 	mov.w	r8, #0
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	f000 fc94 	bl	80077f8 <__lshift>
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4683      	mov	fp, r0
 8006ed4:	f000 fcfc 	bl	80078d0 <__mcmp>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	dcb2      	bgt.n	8006e42 <_dtoa_r+0xac2>
 8006edc:	d102      	bne.n	8006ee4 <_dtoa_r+0xb64>
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	07db      	lsls	r3, r3, #31
 8006ee2:	d4ae      	bmi.n	8006e42 <_dtoa_r+0xac2>
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eec:	2a30      	cmp	r2, #48	; 0x30
 8006eee:	d0fa      	beq.n	8006ee6 <_dtoa_r+0xb66>
 8006ef0:	e6f7      	b.n	8006ce2 <_dtoa_r+0x962>
 8006ef2:	9a00      	ldr	r2, [sp, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d1a5      	bne.n	8006e44 <_dtoa_r+0xac4>
 8006ef8:	f10a 0a01 	add.w	sl, sl, #1
 8006efc:	2331      	movs	r3, #49	; 0x31
 8006efe:	e779      	b.n	8006df4 <_dtoa_r+0xa74>
 8006f00:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <_dtoa_r+0xbd0>)
 8006f02:	f7ff baaf 	b.w	8006464 <_dtoa_r+0xe4>
 8006f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f47f aa86 	bne.w	800641a <_dtoa_r+0x9a>
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <_dtoa_r+0xbd4>)
 8006f10:	f7ff baa8 	b.w	8006464 <_dtoa_r+0xe4>
 8006f14:	f1b9 0f00 	cmp.w	r9, #0
 8006f18:	dc03      	bgt.n	8006f22 <_dtoa_r+0xba2>
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	f73f aec9 	bgt.w	8006cb4 <_dtoa_r+0x934>
 8006f22:	9d00      	ldr	r5, [sp, #0]
 8006f24:	4631      	mov	r1, r6
 8006f26:	4658      	mov	r0, fp
 8006f28:	f7ff f99c 	bl	8006264 <quorem>
 8006f2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006f30:	f805 3b01 	strb.w	r3, [r5], #1
 8006f34:	9a00      	ldr	r2, [sp, #0]
 8006f36:	1aaa      	subs	r2, r5, r2
 8006f38:	4591      	cmp	r9, r2
 8006f3a:	ddba      	ble.n	8006eb2 <_dtoa_r+0xb32>
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	2300      	movs	r3, #0
 8006f40:	220a      	movs	r2, #10
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 faa8 	bl	8007498 <__multadd>
 8006f48:	4683      	mov	fp, r0
 8006f4a:	e7eb      	b.n	8006f24 <_dtoa_r+0xba4>
 8006f4c:	0800cbf5 	.word	0x0800cbf5
 8006f50:	0800ca4d 	.word	0x0800ca4d
 8006f54:	0800cb72 	.word	0x0800cb72

08006f58 <__sflush_r>:
 8006f58:	898a      	ldrh	r2, [r1, #12]
 8006f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5e:	4605      	mov	r5, r0
 8006f60:	0710      	lsls	r0, r2, #28
 8006f62:	460c      	mov	r4, r1
 8006f64:	d458      	bmi.n	8007018 <__sflush_r+0xc0>
 8006f66:	684b      	ldr	r3, [r1, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc05      	bgt.n	8006f78 <__sflush_r+0x20>
 8006f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dc02      	bgt.n	8006f78 <__sflush_r+0x20>
 8006f72:	2000      	movs	r0, #0
 8006f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f7a:	2e00      	cmp	r6, #0
 8006f7c:	d0f9      	beq.n	8006f72 <__sflush_r+0x1a>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f84:	682f      	ldr	r7, [r5, #0]
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	d032      	beq.n	8006ff0 <__sflush_r+0x98>
 8006f8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	075a      	lsls	r2, r3, #29
 8006f90:	d505      	bpl.n	8006f9e <__sflush_r+0x46>
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	1ac0      	subs	r0, r0, r3
 8006f96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f98:	b10b      	cbz	r3, 8006f9e <__sflush_r+0x46>
 8006f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f9c:	1ac0      	subs	r0, r0, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fa4:	6a21      	ldr	r1, [r4, #32]
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b0      	blx	r6
 8006faa:	1c43      	adds	r3, r0, #1
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	d106      	bne.n	8006fbe <__sflush_r+0x66>
 8006fb0:	6829      	ldr	r1, [r5, #0]
 8006fb2:	291d      	cmp	r1, #29
 8006fb4:	d82c      	bhi.n	8007010 <__sflush_r+0xb8>
 8006fb6:	4a2a      	ldr	r2, [pc, #168]	; (8007060 <__sflush_r+0x108>)
 8006fb8:	40ca      	lsrs	r2, r1
 8006fba:	07d6      	lsls	r6, r2, #31
 8006fbc:	d528      	bpl.n	8007010 <__sflush_r+0xb8>
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	6062      	str	r2, [r4, #4]
 8006fc2:	04d9      	lsls	r1, r3, #19
 8006fc4:	6922      	ldr	r2, [r4, #16]
 8006fc6:	6022      	str	r2, [r4, #0]
 8006fc8:	d504      	bpl.n	8006fd4 <__sflush_r+0x7c>
 8006fca:	1c42      	adds	r2, r0, #1
 8006fcc:	d101      	bne.n	8006fd2 <__sflush_r+0x7a>
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	b903      	cbnz	r3, 8006fd4 <__sflush_r+0x7c>
 8006fd2:	6560      	str	r0, [r4, #84]	; 0x54
 8006fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fd6:	602f      	str	r7, [r5, #0]
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	d0ca      	beq.n	8006f72 <__sflush_r+0x1a>
 8006fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	d002      	beq.n	8006fea <__sflush_r+0x92>
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f7fe f92d 	bl	8005244 <_free_r>
 8006fea:	2000      	movs	r0, #0
 8006fec:	6360      	str	r0, [r4, #52]	; 0x34
 8006fee:	e7c1      	b.n	8006f74 <__sflush_r+0x1c>
 8006ff0:	6a21      	ldr	r1, [r4, #32]
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b0      	blx	r6
 8006ff8:	1c41      	adds	r1, r0, #1
 8006ffa:	d1c7      	bne.n	8006f8c <__sflush_r+0x34>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0c4      	beq.n	8006f8c <__sflush_r+0x34>
 8007002:	2b1d      	cmp	r3, #29
 8007004:	d001      	beq.n	800700a <__sflush_r+0xb2>
 8007006:	2b16      	cmp	r3, #22
 8007008:	d101      	bne.n	800700e <__sflush_r+0xb6>
 800700a:	602f      	str	r7, [r5, #0]
 800700c:	e7b1      	b.n	8006f72 <__sflush_r+0x1a>
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	e7ad      	b.n	8006f74 <__sflush_r+0x1c>
 8007018:	690f      	ldr	r7, [r1, #16]
 800701a:	2f00      	cmp	r7, #0
 800701c:	d0a9      	beq.n	8006f72 <__sflush_r+0x1a>
 800701e:	0793      	lsls	r3, r2, #30
 8007020:	680e      	ldr	r6, [r1, #0]
 8007022:	bf08      	it	eq
 8007024:	694b      	ldreq	r3, [r1, #20]
 8007026:	600f      	str	r7, [r1, #0]
 8007028:	bf18      	it	ne
 800702a:	2300      	movne	r3, #0
 800702c:	eba6 0807 	sub.w	r8, r6, r7
 8007030:	608b      	str	r3, [r1, #8]
 8007032:	f1b8 0f00 	cmp.w	r8, #0
 8007036:	dd9c      	ble.n	8006f72 <__sflush_r+0x1a>
 8007038:	6a21      	ldr	r1, [r4, #32]
 800703a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800703c:	4643      	mov	r3, r8
 800703e:	463a      	mov	r2, r7
 8007040:	4628      	mov	r0, r5
 8007042:	47b0      	blx	r6
 8007044:	2800      	cmp	r0, #0
 8007046:	dc06      	bgt.n	8007056 <__sflush_r+0xfe>
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800704e:	81a3      	strh	r3, [r4, #12]
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e78e      	b.n	8006f74 <__sflush_r+0x1c>
 8007056:	4407      	add	r7, r0
 8007058:	eba8 0800 	sub.w	r8, r8, r0
 800705c:	e7e9      	b.n	8007032 <__sflush_r+0xda>
 800705e:	bf00      	nop
 8007060:	20400001 	.word	0x20400001

08007064 <_fflush_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	690b      	ldr	r3, [r1, #16]
 8007068:	4605      	mov	r5, r0
 800706a:	460c      	mov	r4, r1
 800706c:	b913      	cbnz	r3, 8007074 <_fflush_r+0x10>
 800706e:	2500      	movs	r5, #0
 8007070:	4628      	mov	r0, r5
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	b118      	cbz	r0, 800707e <_fflush_r+0x1a>
 8007076:	6983      	ldr	r3, [r0, #24]
 8007078:	b90b      	cbnz	r3, 800707e <_fflush_r+0x1a>
 800707a:	f000 f887 	bl	800718c <__sinit>
 800707e:	4b14      	ldr	r3, [pc, #80]	; (80070d0 <_fflush_r+0x6c>)
 8007080:	429c      	cmp	r4, r3
 8007082:	d11b      	bne.n	80070bc <_fflush_r+0x58>
 8007084:	686c      	ldr	r4, [r5, #4]
 8007086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0ef      	beq.n	800706e <_fflush_r+0xa>
 800708e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007090:	07d0      	lsls	r0, r2, #31
 8007092:	d404      	bmi.n	800709e <_fflush_r+0x3a>
 8007094:	0599      	lsls	r1, r3, #22
 8007096:	d402      	bmi.n	800709e <_fflush_r+0x3a>
 8007098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800709a:	f7fe f89a 	bl	80051d2 <__retarget_lock_acquire_recursive>
 800709e:	4628      	mov	r0, r5
 80070a0:	4621      	mov	r1, r4
 80070a2:	f7ff ff59 	bl	8006f58 <__sflush_r>
 80070a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a8:	07da      	lsls	r2, r3, #31
 80070aa:	4605      	mov	r5, r0
 80070ac:	d4e0      	bmi.n	8007070 <_fflush_r+0xc>
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	059b      	lsls	r3, r3, #22
 80070b2:	d4dd      	bmi.n	8007070 <_fflush_r+0xc>
 80070b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b6:	f7fe f88d 	bl	80051d4 <__retarget_lock_release_recursive>
 80070ba:	e7d9      	b.n	8007070 <_fflush_r+0xc>
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <_fflush_r+0x70>)
 80070be:	429c      	cmp	r4, r3
 80070c0:	d101      	bne.n	80070c6 <_fflush_r+0x62>
 80070c2:	68ac      	ldr	r4, [r5, #8]
 80070c4:	e7df      	b.n	8007086 <_fflush_r+0x22>
 80070c6:	4b04      	ldr	r3, [pc, #16]	; (80070d8 <_fflush_r+0x74>)
 80070c8:	429c      	cmp	r4, r3
 80070ca:	bf08      	it	eq
 80070cc:	68ec      	ldreq	r4, [r5, #12]
 80070ce:	e7da      	b.n	8007086 <_fflush_r+0x22>
 80070d0:	0800cc28 	.word	0x0800cc28
 80070d4:	0800cc48 	.word	0x0800cc48
 80070d8:	0800cc08 	.word	0x0800cc08

080070dc <std>:
 80070dc:	2300      	movs	r3, #0
 80070de:	b510      	push	{r4, lr}
 80070e0:	4604      	mov	r4, r0
 80070e2:	e9c0 3300 	strd	r3, r3, [r0]
 80070e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070ea:	6083      	str	r3, [r0, #8]
 80070ec:	8181      	strh	r1, [r0, #12]
 80070ee:	6643      	str	r3, [r0, #100]	; 0x64
 80070f0:	81c2      	strh	r2, [r0, #14]
 80070f2:	6183      	str	r3, [r0, #24]
 80070f4:	4619      	mov	r1, r3
 80070f6:	2208      	movs	r2, #8
 80070f8:	305c      	adds	r0, #92	; 0x5c
 80070fa:	f7fe f88b 	bl	8005214 <memset>
 80070fe:	4b05      	ldr	r3, [pc, #20]	; (8007114 <std+0x38>)
 8007100:	6263      	str	r3, [r4, #36]	; 0x24
 8007102:	4b05      	ldr	r3, [pc, #20]	; (8007118 <std+0x3c>)
 8007104:	62a3      	str	r3, [r4, #40]	; 0x28
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <std+0x40>)
 8007108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <std+0x44>)
 800710c:	6224      	str	r4, [r4, #32]
 800710e:	6323      	str	r3, [r4, #48]	; 0x30
 8007110:	bd10      	pop	{r4, pc}
 8007112:	bf00      	nop
 8007114:	08007ad1 	.word	0x08007ad1
 8007118:	08007af3 	.word	0x08007af3
 800711c:	08007b2b 	.word	0x08007b2b
 8007120:	08007b4f 	.word	0x08007b4f

08007124 <_cleanup_r>:
 8007124:	4901      	ldr	r1, [pc, #4]	; (800712c <_cleanup_r+0x8>)
 8007126:	f000 b8af 	b.w	8007288 <_fwalk_reent>
 800712a:	bf00      	nop
 800712c:	08007065 	.word	0x08007065

08007130 <__sfmoreglue>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	1e4a      	subs	r2, r1, #1
 8007134:	2568      	movs	r5, #104	; 0x68
 8007136:	4355      	muls	r5, r2
 8007138:	460e      	mov	r6, r1
 800713a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800713e:	f7fe f8d1 	bl	80052e4 <_malloc_r>
 8007142:	4604      	mov	r4, r0
 8007144:	b140      	cbz	r0, 8007158 <__sfmoreglue+0x28>
 8007146:	2100      	movs	r1, #0
 8007148:	e9c0 1600 	strd	r1, r6, [r0]
 800714c:	300c      	adds	r0, #12
 800714e:	60a0      	str	r0, [r4, #8]
 8007150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007154:	f7fe f85e 	bl	8005214 <memset>
 8007158:	4620      	mov	r0, r4
 800715a:	bd70      	pop	{r4, r5, r6, pc}

0800715c <__sfp_lock_acquire>:
 800715c:	4801      	ldr	r0, [pc, #4]	; (8007164 <__sfp_lock_acquire+0x8>)
 800715e:	f7fe b838 	b.w	80051d2 <__retarget_lock_acquire_recursive>
 8007162:	bf00      	nop
 8007164:	20000418 	.word	0x20000418

08007168 <__sfp_lock_release>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__sfp_lock_release+0x8>)
 800716a:	f7fe b833 	b.w	80051d4 <__retarget_lock_release_recursive>
 800716e:	bf00      	nop
 8007170:	20000418 	.word	0x20000418

08007174 <__sinit_lock_acquire>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__sinit_lock_acquire+0x8>)
 8007176:	f7fe b82c 	b.w	80051d2 <__retarget_lock_acquire_recursive>
 800717a:	bf00      	nop
 800717c:	20000417 	.word	0x20000417

08007180 <__sinit_lock_release>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__sinit_lock_release+0x8>)
 8007182:	f7fe b827 	b.w	80051d4 <__retarget_lock_release_recursive>
 8007186:	bf00      	nop
 8007188:	20000417 	.word	0x20000417

0800718c <__sinit>:
 800718c:	b510      	push	{r4, lr}
 800718e:	4604      	mov	r4, r0
 8007190:	f7ff fff0 	bl	8007174 <__sinit_lock_acquire>
 8007194:	69a3      	ldr	r3, [r4, #24]
 8007196:	b11b      	cbz	r3, 80071a0 <__sinit+0x14>
 8007198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800719c:	f7ff bff0 	b.w	8007180 <__sinit_lock_release>
 80071a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071a4:	6523      	str	r3, [r4, #80]	; 0x50
 80071a6:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <__sinit+0x68>)
 80071a8:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <__sinit+0x6c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	bf04      	itt	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	61a3      	streq	r3, [r4, #24]
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 f820 	bl	80071fc <__sfp>
 80071bc:	6060      	str	r0, [r4, #4]
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f81c 	bl	80071fc <__sfp>
 80071c4:	60a0      	str	r0, [r4, #8]
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 f818 	bl	80071fc <__sfp>
 80071cc:	2200      	movs	r2, #0
 80071ce:	60e0      	str	r0, [r4, #12]
 80071d0:	2104      	movs	r1, #4
 80071d2:	6860      	ldr	r0, [r4, #4]
 80071d4:	f7ff ff82 	bl	80070dc <std>
 80071d8:	68a0      	ldr	r0, [r4, #8]
 80071da:	2201      	movs	r2, #1
 80071dc:	2109      	movs	r1, #9
 80071de:	f7ff ff7d 	bl	80070dc <std>
 80071e2:	68e0      	ldr	r0, [r4, #12]
 80071e4:	2202      	movs	r2, #2
 80071e6:	2112      	movs	r1, #18
 80071e8:	f7ff ff78 	bl	80070dc <std>
 80071ec:	2301      	movs	r3, #1
 80071ee:	61a3      	str	r3, [r4, #24]
 80071f0:	e7d2      	b.n	8007198 <__sinit+0xc>
 80071f2:	bf00      	nop
 80071f4:	0800ca28 	.word	0x0800ca28
 80071f8:	08007125 	.word	0x08007125

080071fc <__sfp>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	4607      	mov	r7, r0
 8007200:	f7ff ffac 	bl	800715c <__sfp_lock_acquire>
 8007204:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <__sfp+0x84>)
 8007206:	681e      	ldr	r6, [r3, #0]
 8007208:	69b3      	ldr	r3, [r6, #24]
 800720a:	b913      	cbnz	r3, 8007212 <__sfp+0x16>
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff ffbd 	bl	800718c <__sinit>
 8007212:	3648      	adds	r6, #72	; 0x48
 8007214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007218:	3b01      	subs	r3, #1
 800721a:	d503      	bpl.n	8007224 <__sfp+0x28>
 800721c:	6833      	ldr	r3, [r6, #0]
 800721e:	b30b      	cbz	r3, 8007264 <__sfp+0x68>
 8007220:	6836      	ldr	r6, [r6, #0]
 8007222:	e7f7      	b.n	8007214 <__sfp+0x18>
 8007224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007228:	b9d5      	cbnz	r5, 8007260 <__sfp+0x64>
 800722a:	4b16      	ldr	r3, [pc, #88]	; (8007284 <__sfp+0x88>)
 800722c:	60e3      	str	r3, [r4, #12]
 800722e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007232:	6665      	str	r5, [r4, #100]	; 0x64
 8007234:	f7fd ffcc 	bl	80051d0 <__retarget_lock_init_recursive>
 8007238:	f7ff ff96 	bl	8007168 <__sfp_lock_release>
 800723c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007244:	6025      	str	r5, [r4, #0]
 8007246:	61a5      	str	r5, [r4, #24]
 8007248:	2208      	movs	r2, #8
 800724a:	4629      	mov	r1, r5
 800724c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007250:	f7fd ffe0 	bl	8005214 <memset>
 8007254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800725c:	4620      	mov	r0, r4
 800725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007260:	3468      	adds	r4, #104	; 0x68
 8007262:	e7d9      	b.n	8007218 <__sfp+0x1c>
 8007264:	2104      	movs	r1, #4
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff ff62 	bl	8007130 <__sfmoreglue>
 800726c:	4604      	mov	r4, r0
 800726e:	6030      	str	r0, [r6, #0]
 8007270:	2800      	cmp	r0, #0
 8007272:	d1d5      	bne.n	8007220 <__sfp+0x24>
 8007274:	f7ff ff78 	bl	8007168 <__sfp_lock_release>
 8007278:	230c      	movs	r3, #12
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	e7ee      	b.n	800725c <__sfp+0x60>
 800727e:	bf00      	nop
 8007280:	0800ca28 	.word	0x0800ca28
 8007284:	ffff0001 	.word	0xffff0001

08007288 <_fwalk_reent>:
 8007288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800728c:	4606      	mov	r6, r0
 800728e:	4688      	mov	r8, r1
 8007290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007294:	2700      	movs	r7, #0
 8007296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800729a:	f1b9 0901 	subs.w	r9, r9, #1
 800729e:	d505      	bpl.n	80072ac <_fwalk_reent+0x24>
 80072a0:	6824      	ldr	r4, [r4, #0]
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	d1f7      	bne.n	8007296 <_fwalk_reent+0xe>
 80072a6:	4638      	mov	r0, r7
 80072a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ac:	89ab      	ldrh	r3, [r5, #12]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d907      	bls.n	80072c2 <_fwalk_reent+0x3a>
 80072b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072b6:	3301      	adds	r3, #1
 80072b8:	d003      	beq.n	80072c2 <_fwalk_reent+0x3a>
 80072ba:	4629      	mov	r1, r5
 80072bc:	4630      	mov	r0, r6
 80072be:	47c0      	blx	r8
 80072c0:	4307      	orrs	r7, r0
 80072c2:	3568      	adds	r5, #104	; 0x68
 80072c4:	e7e9      	b.n	800729a <_fwalk_reent+0x12>
	...

080072c8 <_localeconv_r>:
 80072c8:	4800      	ldr	r0, [pc, #0]	; (80072cc <_localeconv_r+0x4>)
 80072ca:	4770      	bx	lr
 80072cc:	20000268 	.word	0x20000268

080072d0 <__swhatbuf_r>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	460e      	mov	r6, r1
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	2900      	cmp	r1, #0
 80072da:	b096      	sub	sp, #88	; 0x58
 80072dc:	4614      	mov	r4, r2
 80072de:	461d      	mov	r5, r3
 80072e0:	da07      	bge.n	80072f2 <__swhatbuf_r+0x22>
 80072e2:	2300      	movs	r3, #0
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	89b3      	ldrh	r3, [r6, #12]
 80072e8:	061a      	lsls	r2, r3, #24
 80072ea:	d410      	bmi.n	800730e <__swhatbuf_r+0x3e>
 80072ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f0:	e00e      	b.n	8007310 <__swhatbuf_r+0x40>
 80072f2:	466a      	mov	r2, sp
 80072f4:	f000 fc5e 	bl	8007bb4 <_fstat_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	dbf2      	blt.n	80072e2 <__swhatbuf_r+0x12>
 80072fc:	9a01      	ldr	r2, [sp, #4]
 80072fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007302:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007306:	425a      	negs	r2, r3
 8007308:	415a      	adcs	r2, r3
 800730a:	602a      	str	r2, [r5, #0]
 800730c:	e7ee      	b.n	80072ec <__swhatbuf_r+0x1c>
 800730e:	2340      	movs	r3, #64	; 0x40
 8007310:	2000      	movs	r0, #0
 8007312:	6023      	str	r3, [r4, #0]
 8007314:	b016      	add	sp, #88	; 0x58
 8007316:	bd70      	pop	{r4, r5, r6, pc}

08007318 <__smakebuf_r>:
 8007318:	898b      	ldrh	r3, [r1, #12]
 800731a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800731c:	079d      	lsls	r5, r3, #30
 800731e:	4606      	mov	r6, r0
 8007320:	460c      	mov	r4, r1
 8007322:	d507      	bpl.n	8007334 <__smakebuf_r+0x1c>
 8007324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	2301      	movs	r3, #1
 800732e:	6163      	str	r3, [r4, #20]
 8007330:	b002      	add	sp, #8
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	ab01      	add	r3, sp, #4
 8007336:	466a      	mov	r2, sp
 8007338:	f7ff ffca 	bl	80072d0 <__swhatbuf_r>
 800733c:	9900      	ldr	r1, [sp, #0]
 800733e:	4605      	mov	r5, r0
 8007340:	4630      	mov	r0, r6
 8007342:	f7fd ffcf 	bl	80052e4 <_malloc_r>
 8007346:	b948      	cbnz	r0, 800735c <__smakebuf_r+0x44>
 8007348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800734c:	059a      	lsls	r2, r3, #22
 800734e:	d4ef      	bmi.n	8007330 <__smakebuf_r+0x18>
 8007350:	f023 0303 	bic.w	r3, r3, #3
 8007354:	f043 0302 	orr.w	r3, r3, #2
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	e7e3      	b.n	8007324 <__smakebuf_r+0xc>
 800735c:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <__smakebuf_r+0x7c>)
 800735e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	6020      	str	r0, [r4, #0]
 8007364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	6163      	str	r3, [r4, #20]
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	6120      	str	r0, [r4, #16]
 8007372:	b15b      	cbz	r3, 800738c <__smakebuf_r+0x74>
 8007374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007378:	4630      	mov	r0, r6
 800737a:	f000 fc2d 	bl	8007bd8 <_isatty_r>
 800737e:	b128      	cbz	r0, 800738c <__smakebuf_r+0x74>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f023 0303 	bic.w	r3, r3, #3
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	89a0      	ldrh	r0, [r4, #12]
 800738e:	4305      	orrs	r5, r0
 8007390:	81a5      	strh	r5, [r4, #12]
 8007392:	e7cd      	b.n	8007330 <__smakebuf_r+0x18>
 8007394:	08007125 	.word	0x08007125

08007398 <__ascii_mbtowc>:
 8007398:	b082      	sub	sp, #8
 800739a:	b901      	cbnz	r1, 800739e <__ascii_mbtowc+0x6>
 800739c:	a901      	add	r1, sp, #4
 800739e:	b142      	cbz	r2, 80073b2 <__ascii_mbtowc+0x1a>
 80073a0:	b14b      	cbz	r3, 80073b6 <__ascii_mbtowc+0x1e>
 80073a2:	7813      	ldrb	r3, [r2, #0]
 80073a4:	600b      	str	r3, [r1, #0]
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	1e10      	subs	r0, r2, #0
 80073aa:	bf18      	it	ne
 80073ac:	2001      	movne	r0, #1
 80073ae:	b002      	add	sp, #8
 80073b0:	4770      	bx	lr
 80073b2:	4610      	mov	r0, r2
 80073b4:	e7fb      	b.n	80073ae <__ascii_mbtowc+0x16>
 80073b6:	f06f 0001 	mvn.w	r0, #1
 80073ba:	e7f8      	b.n	80073ae <__ascii_mbtowc+0x16>

080073bc <__malloc_lock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__malloc_lock+0x8>)
 80073be:	f7fd bf08 	b.w	80051d2 <__retarget_lock_acquire_recursive>
 80073c2:	bf00      	nop
 80073c4:	20000414 	.word	0x20000414

080073c8 <__malloc_unlock>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__malloc_unlock+0x8>)
 80073ca:	f7fd bf03 	b.w	80051d4 <__retarget_lock_release_recursive>
 80073ce:	bf00      	nop
 80073d0:	20000414 	.word	0x20000414

080073d4 <_Balloc>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073d8:	4604      	mov	r4, r0
 80073da:	460d      	mov	r5, r1
 80073dc:	b976      	cbnz	r6, 80073fc <_Balloc+0x28>
 80073de:	2010      	movs	r0, #16
 80073e0:	f7fd fefa 	bl	80051d8 <malloc>
 80073e4:	4602      	mov	r2, r0
 80073e6:	6260      	str	r0, [r4, #36]	; 0x24
 80073e8:	b920      	cbnz	r0, 80073f4 <_Balloc+0x20>
 80073ea:	4b18      	ldr	r3, [pc, #96]	; (800744c <_Balloc+0x78>)
 80073ec:	4818      	ldr	r0, [pc, #96]	; (8007450 <_Balloc+0x7c>)
 80073ee:	2166      	movs	r1, #102	; 0x66
 80073f0:	f7fd fe94 	bl	800511c <__assert_func>
 80073f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073f8:	6006      	str	r6, [r0, #0]
 80073fa:	60c6      	str	r6, [r0, #12]
 80073fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80073fe:	68f3      	ldr	r3, [r6, #12]
 8007400:	b183      	cbz	r3, 8007424 <_Balloc+0x50>
 8007402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800740a:	b9b8      	cbnz	r0, 800743c <_Balloc+0x68>
 800740c:	2101      	movs	r1, #1
 800740e:	fa01 f605 	lsl.w	r6, r1, r5
 8007412:	1d72      	adds	r2, r6, #5
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	4620      	mov	r0, r4
 8007418:	f7fd ff04 	bl	8005224 <_calloc_r>
 800741c:	b160      	cbz	r0, 8007438 <_Balloc+0x64>
 800741e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007422:	e00e      	b.n	8007442 <_Balloc+0x6e>
 8007424:	2221      	movs	r2, #33	; 0x21
 8007426:	2104      	movs	r1, #4
 8007428:	4620      	mov	r0, r4
 800742a:	f7fd fefb 	bl	8005224 <_calloc_r>
 800742e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007430:	60f0      	str	r0, [r6, #12]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e4      	bne.n	8007402 <_Balloc+0x2e>
 8007438:	2000      	movs	r0, #0
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	6802      	ldr	r2, [r0, #0]
 800743e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007442:	2300      	movs	r3, #0
 8007444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007448:	e7f7      	b.n	800743a <_Balloc+0x66>
 800744a:	bf00      	nop
 800744c:	0800cb7f 	.word	0x0800cb7f
 8007450:	0800cc72 	.word	0x0800cc72

08007454 <_Bfree>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	b976      	cbnz	r6, 800747c <_Bfree+0x28>
 800745e:	2010      	movs	r0, #16
 8007460:	f7fd feba 	bl	80051d8 <malloc>
 8007464:	4602      	mov	r2, r0
 8007466:	6268      	str	r0, [r5, #36]	; 0x24
 8007468:	b920      	cbnz	r0, 8007474 <_Bfree+0x20>
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <_Bfree+0x3c>)
 800746c:	4809      	ldr	r0, [pc, #36]	; (8007494 <_Bfree+0x40>)
 800746e:	218a      	movs	r1, #138	; 0x8a
 8007470:	f7fd fe54 	bl	800511c <__assert_func>
 8007474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007478:	6006      	str	r6, [r0, #0]
 800747a:	60c6      	str	r6, [r0, #12]
 800747c:	b13c      	cbz	r4, 800748e <_Bfree+0x3a>
 800747e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007480:	6862      	ldr	r2, [r4, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007488:	6021      	str	r1, [r4, #0]
 800748a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	0800cb7f 	.word	0x0800cb7f
 8007494:	0800cc72 	.word	0x0800cc72

08007498 <__multadd>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	690e      	ldr	r6, [r1, #16]
 800749e:	4607      	mov	r7, r0
 80074a0:	4698      	mov	r8, r3
 80074a2:	460c      	mov	r4, r1
 80074a4:	f101 0014 	add.w	r0, r1, #20
 80074a8:	2300      	movs	r3, #0
 80074aa:	6805      	ldr	r5, [r0, #0]
 80074ac:	b2a9      	uxth	r1, r5
 80074ae:	fb02 8101 	mla	r1, r2, r1, r8
 80074b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80074b6:	0c2d      	lsrs	r5, r5, #16
 80074b8:	fb02 c505 	mla	r5, r2, r5, ip
 80074bc:	b289      	uxth	r1, r1
 80074be:	3301      	adds	r3, #1
 80074c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80074c4:	429e      	cmp	r6, r3
 80074c6:	f840 1b04 	str.w	r1, [r0], #4
 80074ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80074ce:	dcec      	bgt.n	80074aa <__multadd+0x12>
 80074d0:	f1b8 0f00 	cmp.w	r8, #0
 80074d4:	d022      	beq.n	800751c <__multadd+0x84>
 80074d6:	68a3      	ldr	r3, [r4, #8]
 80074d8:	42b3      	cmp	r3, r6
 80074da:	dc19      	bgt.n	8007510 <__multadd+0x78>
 80074dc:	6861      	ldr	r1, [r4, #4]
 80074de:	4638      	mov	r0, r7
 80074e0:	3101      	adds	r1, #1
 80074e2:	f7ff ff77 	bl	80073d4 <_Balloc>
 80074e6:	4605      	mov	r5, r0
 80074e8:	b928      	cbnz	r0, 80074f6 <__multadd+0x5e>
 80074ea:	4602      	mov	r2, r0
 80074ec:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <__multadd+0x8c>)
 80074ee:	480e      	ldr	r0, [pc, #56]	; (8007528 <__multadd+0x90>)
 80074f0:	21b5      	movs	r1, #181	; 0xb5
 80074f2:	f7fd fe13 	bl	800511c <__assert_func>
 80074f6:	6922      	ldr	r2, [r4, #16]
 80074f8:	3202      	adds	r2, #2
 80074fa:	f104 010c 	add.w	r1, r4, #12
 80074fe:	0092      	lsls	r2, r2, #2
 8007500:	300c      	adds	r0, #12
 8007502:	f7fd fe79 	bl	80051f8 <memcpy>
 8007506:	4621      	mov	r1, r4
 8007508:	4638      	mov	r0, r7
 800750a:	f7ff ffa3 	bl	8007454 <_Bfree>
 800750e:	462c      	mov	r4, r5
 8007510:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007514:	3601      	adds	r6, #1
 8007516:	f8c3 8014 	str.w	r8, [r3, #20]
 800751a:	6126      	str	r6, [r4, #16]
 800751c:	4620      	mov	r0, r4
 800751e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007522:	bf00      	nop
 8007524:	0800cbf5 	.word	0x0800cbf5
 8007528:	0800cc72 	.word	0x0800cc72

0800752c <__hi0bits>:
 800752c:	0c03      	lsrs	r3, r0, #16
 800752e:	041b      	lsls	r3, r3, #16
 8007530:	b9d3      	cbnz	r3, 8007568 <__hi0bits+0x3c>
 8007532:	0400      	lsls	r0, r0, #16
 8007534:	2310      	movs	r3, #16
 8007536:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800753a:	bf04      	itt	eq
 800753c:	0200      	lsleq	r0, r0, #8
 800753e:	3308      	addeq	r3, #8
 8007540:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007544:	bf04      	itt	eq
 8007546:	0100      	lsleq	r0, r0, #4
 8007548:	3304      	addeq	r3, #4
 800754a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800754e:	bf04      	itt	eq
 8007550:	0080      	lsleq	r0, r0, #2
 8007552:	3302      	addeq	r3, #2
 8007554:	2800      	cmp	r0, #0
 8007556:	db05      	blt.n	8007564 <__hi0bits+0x38>
 8007558:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800755c:	f103 0301 	add.w	r3, r3, #1
 8007560:	bf08      	it	eq
 8007562:	2320      	moveq	r3, #32
 8007564:	4618      	mov	r0, r3
 8007566:	4770      	bx	lr
 8007568:	2300      	movs	r3, #0
 800756a:	e7e4      	b.n	8007536 <__hi0bits+0xa>

0800756c <__lo0bits>:
 800756c:	6803      	ldr	r3, [r0, #0]
 800756e:	f013 0207 	ands.w	r2, r3, #7
 8007572:	4601      	mov	r1, r0
 8007574:	d00b      	beq.n	800758e <__lo0bits+0x22>
 8007576:	07da      	lsls	r2, r3, #31
 8007578:	d424      	bmi.n	80075c4 <__lo0bits+0x58>
 800757a:	0798      	lsls	r0, r3, #30
 800757c:	bf49      	itett	mi
 800757e:	085b      	lsrmi	r3, r3, #1
 8007580:	089b      	lsrpl	r3, r3, #2
 8007582:	2001      	movmi	r0, #1
 8007584:	600b      	strmi	r3, [r1, #0]
 8007586:	bf5c      	itt	pl
 8007588:	600b      	strpl	r3, [r1, #0]
 800758a:	2002      	movpl	r0, #2
 800758c:	4770      	bx	lr
 800758e:	b298      	uxth	r0, r3
 8007590:	b9b0      	cbnz	r0, 80075c0 <__lo0bits+0x54>
 8007592:	0c1b      	lsrs	r3, r3, #16
 8007594:	2010      	movs	r0, #16
 8007596:	f013 0fff 	tst.w	r3, #255	; 0xff
 800759a:	bf04      	itt	eq
 800759c:	0a1b      	lsreq	r3, r3, #8
 800759e:	3008      	addeq	r0, #8
 80075a0:	071a      	lsls	r2, r3, #28
 80075a2:	bf04      	itt	eq
 80075a4:	091b      	lsreq	r3, r3, #4
 80075a6:	3004      	addeq	r0, #4
 80075a8:	079a      	lsls	r2, r3, #30
 80075aa:	bf04      	itt	eq
 80075ac:	089b      	lsreq	r3, r3, #2
 80075ae:	3002      	addeq	r0, #2
 80075b0:	07da      	lsls	r2, r3, #31
 80075b2:	d403      	bmi.n	80075bc <__lo0bits+0x50>
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	f100 0001 	add.w	r0, r0, #1
 80075ba:	d005      	beq.n	80075c8 <__lo0bits+0x5c>
 80075bc:	600b      	str	r3, [r1, #0]
 80075be:	4770      	bx	lr
 80075c0:	4610      	mov	r0, r2
 80075c2:	e7e8      	b.n	8007596 <__lo0bits+0x2a>
 80075c4:	2000      	movs	r0, #0
 80075c6:	4770      	bx	lr
 80075c8:	2020      	movs	r0, #32
 80075ca:	4770      	bx	lr

080075cc <__i2b>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	460c      	mov	r4, r1
 80075d0:	2101      	movs	r1, #1
 80075d2:	f7ff feff 	bl	80073d4 <_Balloc>
 80075d6:	4602      	mov	r2, r0
 80075d8:	b928      	cbnz	r0, 80075e6 <__i2b+0x1a>
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <__i2b+0x24>)
 80075dc:	4805      	ldr	r0, [pc, #20]	; (80075f4 <__i2b+0x28>)
 80075de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075e2:	f7fd fd9b 	bl	800511c <__assert_func>
 80075e6:	2301      	movs	r3, #1
 80075e8:	6144      	str	r4, [r0, #20]
 80075ea:	6103      	str	r3, [r0, #16]
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	bf00      	nop
 80075f0:	0800cbf5 	.word	0x0800cbf5
 80075f4:	0800cc72 	.word	0x0800cc72

080075f8 <__multiply>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	4614      	mov	r4, r2
 80075fe:	690a      	ldr	r2, [r1, #16]
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	bfb8      	it	lt
 8007606:	460b      	movlt	r3, r1
 8007608:	460d      	mov	r5, r1
 800760a:	bfbc      	itt	lt
 800760c:	4625      	movlt	r5, r4
 800760e:	461c      	movlt	r4, r3
 8007610:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007614:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007618:	68ab      	ldr	r3, [r5, #8]
 800761a:	6869      	ldr	r1, [r5, #4]
 800761c:	eb0a 0709 	add.w	r7, sl, r9
 8007620:	42bb      	cmp	r3, r7
 8007622:	b085      	sub	sp, #20
 8007624:	bfb8      	it	lt
 8007626:	3101      	addlt	r1, #1
 8007628:	f7ff fed4 	bl	80073d4 <_Balloc>
 800762c:	b930      	cbnz	r0, 800763c <__multiply+0x44>
 800762e:	4602      	mov	r2, r0
 8007630:	4b42      	ldr	r3, [pc, #264]	; (800773c <__multiply+0x144>)
 8007632:	4843      	ldr	r0, [pc, #268]	; (8007740 <__multiply+0x148>)
 8007634:	f240 115d 	movw	r1, #349	; 0x15d
 8007638:	f7fd fd70 	bl	800511c <__assert_func>
 800763c:	f100 0614 	add.w	r6, r0, #20
 8007640:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007644:	4633      	mov	r3, r6
 8007646:	2200      	movs	r2, #0
 8007648:	4543      	cmp	r3, r8
 800764a:	d31e      	bcc.n	800768a <__multiply+0x92>
 800764c:	f105 0c14 	add.w	ip, r5, #20
 8007650:	f104 0314 	add.w	r3, r4, #20
 8007654:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007658:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800765c:	9202      	str	r2, [sp, #8]
 800765e:	ebac 0205 	sub.w	r2, ip, r5
 8007662:	3a15      	subs	r2, #21
 8007664:	f022 0203 	bic.w	r2, r2, #3
 8007668:	3204      	adds	r2, #4
 800766a:	f105 0115 	add.w	r1, r5, #21
 800766e:	458c      	cmp	ip, r1
 8007670:	bf38      	it	cc
 8007672:	2204      	movcc	r2, #4
 8007674:	9201      	str	r2, [sp, #4]
 8007676:	9a02      	ldr	r2, [sp, #8]
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	429a      	cmp	r2, r3
 800767c:	d808      	bhi.n	8007690 <__multiply+0x98>
 800767e:	2f00      	cmp	r7, #0
 8007680:	dc55      	bgt.n	800772e <__multiply+0x136>
 8007682:	6107      	str	r7, [r0, #16]
 8007684:	b005      	add	sp, #20
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	f843 2b04 	str.w	r2, [r3], #4
 800768e:	e7db      	b.n	8007648 <__multiply+0x50>
 8007690:	f8b3 a000 	ldrh.w	sl, [r3]
 8007694:	f1ba 0f00 	cmp.w	sl, #0
 8007698:	d020      	beq.n	80076dc <__multiply+0xe4>
 800769a:	f105 0e14 	add.w	lr, r5, #20
 800769e:	46b1      	mov	r9, r6
 80076a0:	2200      	movs	r2, #0
 80076a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80076a6:	f8d9 b000 	ldr.w	fp, [r9]
 80076aa:	b2a1      	uxth	r1, r4
 80076ac:	fa1f fb8b 	uxth.w	fp, fp
 80076b0:	fb0a b101 	mla	r1, sl, r1, fp
 80076b4:	4411      	add	r1, r2
 80076b6:	f8d9 2000 	ldr.w	r2, [r9]
 80076ba:	0c24      	lsrs	r4, r4, #16
 80076bc:	0c12      	lsrs	r2, r2, #16
 80076be:	fb0a 2404 	mla	r4, sl, r4, r2
 80076c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80076c6:	b289      	uxth	r1, r1
 80076c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80076cc:	45f4      	cmp	ip, lr
 80076ce:	f849 1b04 	str.w	r1, [r9], #4
 80076d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80076d6:	d8e4      	bhi.n	80076a2 <__multiply+0xaa>
 80076d8:	9901      	ldr	r1, [sp, #4]
 80076da:	5072      	str	r2, [r6, r1]
 80076dc:	9a03      	ldr	r2, [sp, #12]
 80076de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076e2:	3304      	adds	r3, #4
 80076e4:	f1b9 0f00 	cmp.w	r9, #0
 80076e8:	d01f      	beq.n	800772a <__multiply+0x132>
 80076ea:	6834      	ldr	r4, [r6, #0]
 80076ec:	f105 0114 	add.w	r1, r5, #20
 80076f0:	46b6      	mov	lr, r6
 80076f2:	f04f 0a00 	mov.w	sl, #0
 80076f6:	880a      	ldrh	r2, [r1, #0]
 80076f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80076fc:	fb09 b202 	mla	r2, r9, r2, fp
 8007700:	4492      	add	sl, r2
 8007702:	b2a4      	uxth	r4, r4
 8007704:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007708:	f84e 4b04 	str.w	r4, [lr], #4
 800770c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007710:	f8be 2000 	ldrh.w	r2, [lr]
 8007714:	0c24      	lsrs	r4, r4, #16
 8007716:	fb09 2404 	mla	r4, r9, r4, r2
 800771a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800771e:	458c      	cmp	ip, r1
 8007720:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007724:	d8e7      	bhi.n	80076f6 <__multiply+0xfe>
 8007726:	9a01      	ldr	r2, [sp, #4]
 8007728:	50b4      	str	r4, [r6, r2]
 800772a:	3604      	adds	r6, #4
 800772c:	e7a3      	b.n	8007676 <__multiply+0x7e>
 800772e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1a5      	bne.n	8007682 <__multiply+0x8a>
 8007736:	3f01      	subs	r7, #1
 8007738:	e7a1      	b.n	800767e <__multiply+0x86>
 800773a:	bf00      	nop
 800773c:	0800cbf5 	.word	0x0800cbf5
 8007740:	0800cc72 	.word	0x0800cc72

08007744 <__pow5mult>:
 8007744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007748:	4615      	mov	r5, r2
 800774a:	f012 0203 	ands.w	r2, r2, #3
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	d007      	beq.n	8007764 <__pow5mult+0x20>
 8007754:	4c25      	ldr	r4, [pc, #148]	; (80077ec <__pow5mult+0xa8>)
 8007756:	3a01      	subs	r2, #1
 8007758:	2300      	movs	r3, #0
 800775a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800775e:	f7ff fe9b 	bl	8007498 <__multadd>
 8007762:	4607      	mov	r7, r0
 8007764:	10ad      	asrs	r5, r5, #2
 8007766:	d03d      	beq.n	80077e4 <__pow5mult+0xa0>
 8007768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800776a:	b97c      	cbnz	r4, 800778c <__pow5mult+0x48>
 800776c:	2010      	movs	r0, #16
 800776e:	f7fd fd33 	bl	80051d8 <malloc>
 8007772:	4602      	mov	r2, r0
 8007774:	6270      	str	r0, [r6, #36]	; 0x24
 8007776:	b928      	cbnz	r0, 8007784 <__pow5mult+0x40>
 8007778:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <__pow5mult+0xac>)
 800777a:	481e      	ldr	r0, [pc, #120]	; (80077f4 <__pow5mult+0xb0>)
 800777c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007780:	f7fd fccc 	bl	800511c <__assert_func>
 8007784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007788:	6004      	str	r4, [r0, #0]
 800778a:	60c4      	str	r4, [r0, #12]
 800778c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007794:	b94c      	cbnz	r4, 80077aa <__pow5mult+0x66>
 8007796:	f240 2171 	movw	r1, #625	; 0x271
 800779a:	4630      	mov	r0, r6
 800779c:	f7ff ff16 	bl	80075cc <__i2b>
 80077a0:	2300      	movs	r3, #0
 80077a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80077a6:	4604      	mov	r4, r0
 80077a8:	6003      	str	r3, [r0, #0]
 80077aa:	f04f 0900 	mov.w	r9, #0
 80077ae:	07eb      	lsls	r3, r5, #31
 80077b0:	d50a      	bpl.n	80077c8 <__pow5mult+0x84>
 80077b2:	4639      	mov	r1, r7
 80077b4:	4622      	mov	r2, r4
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7ff ff1e 	bl	80075f8 <__multiply>
 80077bc:	4639      	mov	r1, r7
 80077be:	4680      	mov	r8, r0
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7ff fe47 	bl	8007454 <_Bfree>
 80077c6:	4647      	mov	r7, r8
 80077c8:	106d      	asrs	r5, r5, #1
 80077ca:	d00b      	beq.n	80077e4 <__pow5mult+0xa0>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	b938      	cbnz	r0, 80077e0 <__pow5mult+0x9c>
 80077d0:	4622      	mov	r2, r4
 80077d2:	4621      	mov	r1, r4
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff ff0f 	bl	80075f8 <__multiply>
 80077da:	6020      	str	r0, [r4, #0]
 80077dc:	f8c0 9000 	str.w	r9, [r0]
 80077e0:	4604      	mov	r4, r0
 80077e2:	e7e4      	b.n	80077ae <__pow5mult+0x6a>
 80077e4:	4638      	mov	r0, r7
 80077e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ea:	bf00      	nop
 80077ec:	0800cdc8 	.word	0x0800cdc8
 80077f0:	0800cb7f 	.word	0x0800cb7f
 80077f4:	0800cc72 	.word	0x0800cc72

080077f8 <__lshift>:
 80077f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077fc:	460c      	mov	r4, r1
 80077fe:	6849      	ldr	r1, [r1, #4]
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	4607      	mov	r7, r0
 800780a:	4691      	mov	r9, r2
 800780c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007810:	f108 0601 	add.w	r6, r8, #1
 8007814:	42b3      	cmp	r3, r6
 8007816:	db0b      	blt.n	8007830 <__lshift+0x38>
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff fddb 	bl	80073d4 <_Balloc>
 800781e:	4605      	mov	r5, r0
 8007820:	b948      	cbnz	r0, 8007836 <__lshift+0x3e>
 8007822:	4602      	mov	r2, r0
 8007824:	4b28      	ldr	r3, [pc, #160]	; (80078c8 <__lshift+0xd0>)
 8007826:	4829      	ldr	r0, [pc, #164]	; (80078cc <__lshift+0xd4>)
 8007828:	f240 11d9 	movw	r1, #473	; 0x1d9
 800782c:	f7fd fc76 	bl	800511c <__assert_func>
 8007830:	3101      	adds	r1, #1
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	e7ee      	b.n	8007814 <__lshift+0x1c>
 8007836:	2300      	movs	r3, #0
 8007838:	f100 0114 	add.w	r1, r0, #20
 800783c:	f100 0210 	add.w	r2, r0, #16
 8007840:	4618      	mov	r0, r3
 8007842:	4553      	cmp	r3, sl
 8007844:	db33      	blt.n	80078ae <__lshift+0xb6>
 8007846:	6920      	ldr	r0, [r4, #16]
 8007848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800784c:	f104 0314 	add.w	r3, r4, #20
 8007850:	f019 091f 	ands.w	r9, r9, #31
 8007854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800785c:	d02b      	beq.n	80078b6 <__lshift+0xbe>
 800785e:	f1c9 0e20 	rsb	lr, r9, #32
 8007862:	468a      	mov	sl, r1
 8007864:	2200      	movs	r2, #0
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	fa00 f009 	lsl.w	r0, r0, r9
 800786c:	4302      	orrs	r2, r0
 800786e:	f84a 2b04 	str.w	r2, [sl], #4
 8007872:	f853 2b04 	ldr.w	r2, [r3], #4
 8007876:	459c      	cmp	ip, r3
 8007878:	fa22 f20e 	lsr.w	r2, r2, lr
 800787c:	d8f3      	bhi.n	8007866 <__lshift+0x6e>
 800787e:	ebac 0304 	sub.w	r3, ip, r4
 8007882:	3b15      	subs	r3, #21
 8007884:	f023 0303 	bic.w	r3, r3, #3
 8007888:	3304      	adds	r3, #4
 800788a:	f104 0015 	add.w	r0, r4, #21
 800788e:	4584      	cmp	ip, r0
 8007890:	bf38      	it	cc
 8007892:	2304      	movcc	r3, #4
 8007894:	50ca      	str	r2, [r1, r3]
 8007896:	b10a      	cbz	r2, 800789c <__lshift+0xa4>
 8007898:	f108 0602 	add.w	r6, r8, #2
 800789c:	3e01      	subs	r6, #1
 800789e:	4638      	mov	r0, r7
 80078a0:	612e      	str	r6, [r5, #16]
 80078a2:	4621      	mov	r1, r4
 80078a4:	f7ff fdd6 	bl	8007454 <_Bfree>
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80078b2:	3301      	adds	r3, #1
 80078b4:	e7c5      	b.n	8007842 <__lshift+0x4a>
 80078b6:	3904      	subs	r1, #4
 80078b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80078c0:	459c      	cmp	ip, r3
 80078c2:	d8f9      	bhi.n	80078b8 <__lshift+0xc0>
 80078c4:	e7ea      	b.n	800789c <__lshift+0xa4>
 80078c6:	bf00      	nop
 80078c8:	0800cbf5 	.word	0x0800cbf5
 80078cc:	0800cc72 	.word	0x0800cc72

080078d0 <__mcmp>:
 80078d0:	b530      	push	{r4, r5, lr}
 80078d2:	6902      	ldr	r2, [r0, #16]
 80078d4:	690c      	ldr	r4, [r1, #16]
 80078d6:	1b12      	subs	r2, r2, r4
 80078d8:	d10e      	bne.n	80078f8 <__mcmp+0x28>
 80078da:	f100 0314 	add.w	r3, r0, #20
 80078de:	3114      	adds	r1, #20
 80078e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80078e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80078ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80078f0:	42a5      	cmp	r5, r4
 80078f2:	d003      	beq.n	80078fc <__mcmp+0x2c>
 80078f4:	d305      	bcc.n	8007902 <__mcmp+0x32>
 80078f6:	2201      	movs	r2, #1
 80078f8:	4610      	mov	r0, r2
 80078fa:	bd30      	pop	{r4, r5, pc}
 80078fc:	4283      	cmp	r3, r0
 80078fe:	d3f3      	bcc.n	80078e8 <__mcmp+0x18>
 8007900:	e7fa      	b.n	80078f8 <__mcmp+0x28>
 8007902:	f04f 32ff 	mov.w	r2, #4294967295
 8007906:	e7f7      	b.n	80078f8 <__mcmp+0x28>

08007908 <__mdiff>:
 8007908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	460c      	mov	r4, r1
 800790e:	4606      	mov	r6, r0
 8007910:	4611      	mov	r1, r2
 8007912:	4620      	mov	r0, r4
 8007914:	4617      	mov	r7, r2
 8007916:	f7ff ffdb 	bl	80078d0 <__mcmp>
 800791a:	1e05      	subs	r5, r0, #0
 800791c:	d110      	bne.n	8007940 <__mdiff+0x38>
 800791e:	4629      	mov	r1, r5
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff fd57 	bl	80073d4 <_Balloc>
 8007926:	b930      	cbnz	r0, 8007936 <__mdiff+0x2e>
 8007928:	4b39      	ldr	r3, [pc, #228]	; (8007a10 <__mdiff+0x108>)
 800792a:	4602      	mov	r2, r0
 800792c:	f240 2132 	movw	r1, #562	; 0x232
 8007930:	4838      	ldr	r0, [pc, #224]	; (8007a14 <__mdiff+0x10c>)
 8007932:	f7fd fbf3 	bl	800511c <__assert_func>
 8007936:	2301      	movs	r3, #1
 8007938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800793c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007940:	bfa4      	itt	ge
 8007942:	463b      	movge	r3, r7
 8007944:	4627      	movge	r7, r4
 8007946:	4630      	mov	r0, r6
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	bfa6      	itte	ge
 800794c:	461c      	movge	r4, r3
 800794e:	2500      	movge	r5, #0
 8007950:	2501      	movlt	r5, #1
 8007952:	f7ff fd3f 	bl	80073d4 <_Balloc>
 8007956:	b920      	cbnz	r0, 8007962 <__mdiff+0x5a>
 8007958:	4b2d      	ldr	r3, [pc, #180]	; (8007a10 <__mdiff+0x108>)
 800795a:	4602      	mov	r2, r0
 800795c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007960:	e7e6      	b.n	8007930 <__mdiff+0x28>
 8007962:	693e      	ldr	r6, [r7, #16]
 8007964:	60c5      	str	r5, [r0, #12]
 8007966:	6925      	ldr	r5, [r4, #16]
 8007968:	f107 0114 	add.w	r1, r7, #20
 800796c:	f104 0914 	add.w	r9, r4, #20
 8007970:	f100 0e14 	add.w	lr, r0, #20
 8007974:	f107 0210 	add.w	r2, r7, #16
 8007978:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800797c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007980:	46f2      	mov	sl, lr
 8007982:	2700      	movs	r7, #0
 8007984:	f859 3b04 	ldr.w	r3, [r9], #4
 8007988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800798c:	fa1f f883 	uxth.w	r8, r3
 8007990:	fa17 f78b 	uxtah	r7, r7, fp
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	eba7 0808 	sub.w	r8, r7, r8
 800799a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800799e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079a2:	fa1f f888 	uxth.w	r8, r8
 80079a6:	141f      	asrs	r7, r3, #16
 80079a8:	454d      	cmp	r5, r9
 80079aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079ae:	f84a 3b04 	str.w	r3, [sl], #4
 80079b2:	d8e7      	bhi.n	8007984 <__mdiff+0x7c>
 80079b4:	1b2b      	subs	r3, r5, r4
 80079b6:	3b15      	subs	r3, #21
 80079b8:	f023 0303 	bic.w	r3, r3, #3
 80079bc:	3304      	adds	r3, #4
 80079be:	3415      	adds	r4, #21
 80079c0:	42a5      	cmp	r5, r4
 80079c2:	bf38      	it	cc
 80079c4:	2304      	movcc	r3, #4
 80079c6:	4419      	add	r1, r3
 80079c8:	4473      	add	r3, lr
 80079ca:	469e      	mov	lr, r3
 80079cc:	460d      	mov	r5, r1
 80079ce:	4565      	cmp	r5, ip
 80079d0:	d30e      	bcc.n	80079f0 <__mdiff+0xe8>
 80079d2:	f10c 0203 	add.w	r2, ip, #3
 80079d6:	1a52      	subs	r2, r2, r1
 80079d8:	f022 0203 	bic.w	r2, r2, #3
 80079dc:	3903      	subs	r1, #3
 80079de:	458c      	cmp	ip, r1
 80079e0:	bf38      	it	cc
 80079e2:	2200      	movcc	r2, #0
 80079e4:	441a      	add	r2, r3
 80079e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80079ea:	b17b      	cbz	r3, 8007a0c <__mdiff+0x104>
 80079ec:	6106      	str	r6, [r0, #16]
 80079ee:	e7a5      	b.n	800793c <__mdiff+0x34>
 80079f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80079f4:	fa17 f488 	uxtah	r4, r7, r8
 80079f8:	1422      	asrs	r2, r4, #16
 80079fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80079fe:	b2a4      	uxth	r4, r4
 8007a00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007a04:	f84e 4b04 	str.w	r4, [lr], #4
 8007a08:	1417      	asrs	r7, r2, #16
 8007a0a:	e7e0      	b.n	80079ce <__mdiff+0xc6>
 8007a0c:	3e01      	subs	r6, #1
 8007a0e:	e7ea      	b.n	80079e6 <__mdiff+0xde>
 8007a10:	0800cbf5 	.word	0x0800cbf5
 8007a14:	0800cc72 	.word	0x0800cc72

08007a18 <__d2b>:
 8007a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	4689      	mov	r9, r1
 8007a1e:	2101      	movs	r1, #1
 8007a20:	ec57 6b10 	vmov	r6, r7, d0
 8007a24:	4690      	mov	r8, r2
 8007a26:	f7ff fcd5 	bl	80073d4 <_Balloc>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	b930      	cbnz	r0, 8007a3c <__d2b+0x24>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <__d2b+0xb0>)
 8007a32:	4826      	ldr	r0, [pc, #152]	; (8007acc <__d2b+0xb4>)
 8007a34:	f240 310a 	movw	r1, #778	; 0x30a
 8007a38:	f7fd fb70 	bl	800511c <__assert_func>
 8007a3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a44:	bb35      	cbnz	r5, 8007a94 <__d2b+0x7c>
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	d028      	beq.n	8007a9e <__d2b+0x86>
 8007a4c:	4668      	mov	r0, sp
 8007a4e:	9600      	str	r6, [sp, #0]
 8007a50:	f7ff fd8c 	bl	800756c <__lo0bits>
 8007a54:	9900      	ldr	r1, [sp, #0]
 8007a56:	b300      	cbz	r0, 8007a9a <__d2b+0x82>
 8007a58:	9a01      	ldr	r2, [sp, #4]
 8007a5a:	f1c0 0320 	rsb	r3, r0, #32
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	430b      	orrs	r3, r1
 8007a64:	40c2      	lsrs	r2, r0
 8007a66:	6163      	str	r3, [r4, #20]
 8007a68:	9201      	str	r2, [sp, #4]
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	61a3      	str	r3, [r4, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bf14      	ite	ne
 8007a72:	2202      	movne	r2, #2
 8007a74:	2201      	moveq	r2, #1
 8007a76:	6122      	str	r2, [r4, #16]
 8007a78:	b1d5      	cbz	r5, 8007ab0 <__d2b+0x98>
 8007a7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a7e:	4405      	add	r5, r0
 8007a80:	f8c9 5000 	str.w	r5, [r9]
 8007a84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a88:	f8c8 0000 	str.w	r0, [r8]
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	b003      	add	sp, #12
 8007a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a98:	e7d5      	b.n	8007a46 <__d2b+0x2e>
 8007a9a:	6161      	str	r1, [r4, #20]
 8007a9c:	e7e5      	b.n	8007a6a <__d2b+0x52>
 8007a9e:	a801      	add	r0, sp, #4
 8007aa0:	f7ff fd64 	bl	800756c <__lo0bits>
 8007aa4:	9b01      	ldr	r3, [sp, #4]
 8007aa6:	6163      	str	r3, [r4, #20]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	6122      	str	r2, [r4, #16]
 8007aac:	3020      	adds	r0, #32
 8007aae:	e7e3      	b.n	8007a78 <__d2b+0x60>
 8007ab0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ab4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ab8:	f8c9 0000 	str.w	r0, [r9]
 8007abc:	6918      	ldr	r0, [r3, #16]
 8007abe:	f7ff fd35 	bl	800752c <__hi0bits>
 8007ac2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ac6:	e7df      	b.n	8007a88 <__d2b+0x70>
 8007ac8:	0800cbf5 	.word	0x0800cbf5
 8007acc:	0800cc72 	.word	0x0800cc72

08007ad0 <__sread>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad8:	f000 f8a0 	bl	8007c1c <_read_r>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	bfab      	itete	ge
 8007ae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ae4:	181b      	addge	r3, r3, r0
 8007ae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aea:	bfac      	ite	ge
 8007aec:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aee:	81a3      	strhlt	r3, [r4, #12]
 8007af0:	bd10      	pop	{r4, pc}

08007af2 <__swrite>:
 8007af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af6:	461f      	mov	r7, r3
 8007af8:	898b      	ldrh	r3, [r1, #12]
 8007afa:	05db      	lsls	r3, r3, #23
 8007afc:	4605      	mov	r5, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	4616      	mov	r6, r2
 8007b02:	d505      	bpl.n	8007b10 <__swrite+0x1e>
 8007b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b08:	2302      	movs	r3, #2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f000 f874 	bl	8007bf8 <_lseek_r>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	463b      	mov	r3, r7
 8007b20:	4628      	mov	r0, r5
 8007b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b26:	f000 b823 	b.w	8007b70 <_write_r>

08007b2a <__sseek>:
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b32:	f000 f861 	bl	8007bf8 <_lseek_r>
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	bf15      	itete	ne
 8007b3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b46:	81a3      	strheq	r3, [r4, #12]
 8007b48:	bf18      	it	ne
 8007b4a:	81a3      	strhne	r3, [r4, #12]
 8007b4c:	bd10      	pop	{r4, pc}

08007b4e <__sclose>:
 8007b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b52:	f000 b81f 	b.w	8007b94 <_close_r>

08007b56 <__ascii_wctomb>:
 8007b56:	b149      	cbz	r1, 8007b6c <__ascii_wctomb+0x16>
 8007b58:	2aff      	cmp	r2, #255	; 0xff
 8007b5a:	bf85      	ittet	hi
 8007b5c:	238a      	movhi	r3, #138	; 0x8a
 8007b5e:	6003      	strhi	r3, [r0, #0]
 8007b60:	700a      	strbls	r2, [r1, #0]
 8007b62:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b66:	bf98      	it	ls
 8007b68:	2001      	movls	r0, #1
 8007b6a:	4770      	bx	lr
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4770      	bx	lr

08007b70 <_write_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d07      	ldr	r5, [pc, #28]	; (8007b90 <_write_r+0x20>)
 8007b74:	4604      	mov	r4, r0
 8007b76:	4608      	mov	r0, r1
 8007b78:	4611      	mov	r1, r2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	602a      	str	r2, [r5, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f7fd f957 	bl	8004e32 <_write>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_write_r+0x1e>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_write_r+0x1e>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	20000420 	.word	0x20000420

08007b94 <_close_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d06      	ldr	r5, [pc, #24]	; (8007bb0 <_close_r+0x1c>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	f7fd f963 	bl	8004e6a <_close>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_close_r+0x1a>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_close_r+0x1a>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	20000420 	.word	0x20000420

08007bb4 <_fstat_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d07      	ldr	r5, [pc, #28]	; (8007bd4 <_fstat_r+0x20>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	602b      	str	r3, [r5, #0]
 8007bc2:	f7fd f95e 	bl	8004e82 <_fstat>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	d102      	bne.n	8007bd0 <_fstat_r+0x1c>
 8007bca:	682b      	ldr	r3, [r5, #0]
 8007bcc:	b103      	cbz	r3, 8007bd0 <_fstat_r+0x1c>
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	bd38      	pop	{r3, r4, r5, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000420 	.word	0x20000420

08007bd8 <_isatty_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4d06      	ldr	r5, [pc, #24]	; (8007bf4 <_isatty_r+0x1c>)
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4604      	mov	r4, r0
 8007be0:	4608      	mov	r0, r1
 8007be2:	602b      	str	r3, [r5, #0]
 8007be4:	f7fd f95d 	bl	8004ea2 <_isatty>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_isatty_r+0x1a>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_isatty_r+0x1a>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	20000420 	.word	0x20000420

08007bf8 <_lseek_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d07      	ldr	r5, [pc, #28]	; (8007c18 <_lseek_r+0x20>)
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4608      	mov	r0, r1
 8007c00:	4611      	mov	r1, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	602a      	str	r2, [r5, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7fd f956 	bl	8004eb8 <_lseek>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_lseek_r+0x1e>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_lseek_r+0x1e>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	20000420 	.word	0x20000420

08007c1c <_read_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d07      	ldr	r5, [pc, #28]	; (8007c3c <_read_r+0x20>)
 8007c20:	4604      	mov	r4, r0
 8007c22:	4608      	mov	r0, r1
 8007c24:	4611      	mov	r1, r2
 8007c26:	2200      	movs	r2, #0
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f7fd f8e4 	bl	8004df8 <_read>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_read_r+0x1e>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_read_r+0x1e>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	20000420 	.word	0x20000420

08007c40 <_init>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr

08007c4c <_fini>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr
