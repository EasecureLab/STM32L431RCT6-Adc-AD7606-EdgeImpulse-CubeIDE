
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08007648  08007648  00017648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007abc  08007abc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac4  08007ac4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001d4  08007ca0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007ca0  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010344  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c5  00000000  00000000  00030548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00033860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023122  00000000  00000000  00034478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e916  00000000  00000000  0005759a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3245  00000000  00000000  00065eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001390f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f4  00000000  00000000  00139148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800762c 	.word	0x0800762c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800762c 	.word	0x0800762c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f001 f99e 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f80d 	bl	8000f70 <HAL_InitTick>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	e001      	b.n	8000f66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f62:	f003 fbb9 	bl	80046d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_InitTick+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_InitTick+0x44>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	099b      	lsrs	r3, r3, #6
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f9a6 	bl	80022da <HAL_SYSTICK_Config>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e005      	b.n	8000fa6 <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa2:	f001 f97e 	bl	80022a2 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	10624dd3 	.word	0x10624dd3

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick++;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_IncTick+0x18>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_IncTick+0x18>)
 8000fc4:	6013      	str	r3, [r2, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	200001fc 	.word	0x200001fc

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	200001fc 	.word	0x200001fc

08000fec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	609a      	str	r2, [r3, #8]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	609a      	str	r2, [r3, #8]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001054:	b490      	push	{r4, r7}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3360      	adds	r3, #96	; 0x60
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001070:	6822      	ldr	r2, [r4, #0]
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <LL_ADC_SetOffset+0x40>)
 8001074:	4013      	ands	r3, r2
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	4313      	orrs	r3, r2
 8001082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001086:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bc90      	pop	{r4, r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	03fff000 	.word	0x03fff000

08001098 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001098:	b490      	push	{r4, r7}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3360      	adds	r3, #96	; 0x60
 80010a6:	461a      	mov	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	461c      	mov	r4, r3
  
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc90      	pop	{r4, r7}
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010c0:	b490      	push	{r4, r7}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3360      	adds	r3, #96	; 0x60
 80010d0:	461a      	mov	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc90      	pop	{r4, r7}
 80010ee:	4770      	bx	lr

080010f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001116:	b490      	push	{r4, r7}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3330      	adds	r3, #48	; 0x30
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	4413      	add	r3, r2
 8001134:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001136:	6822      	ldr	r2, [r4, #0]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	211f      	movs	r1, #31
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	401a      	ands	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	0e9b      	lsrs	r3, r3, #26
 800114c:	f003 011f 	and.w	r1, r3, #31
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bc90      	pop	{r4, r7}
 8001166:	4770      	bx	lr

08001168 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001168:	b490      	push	{r4, r7}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3314      	adds	r3, #20
 8001178:	461a      	mov	r2, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	0e5b      	lsrs	r3, r3, #25
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	0d1b      	lsrs	r3, r3, #20
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2107      	movs	r1, #7
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	0d1b      	lsrs	r3, r3, #20
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc90      	pop	{r4, r7}
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0318 	and.w	r3, r3, #24
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80011dc:	40d9      	lsrs	r1, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	400b      	ands	r3, r1
 80011e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e6:	431a      	orrs	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	0007ffff 	.word	0x0007ffff

08001200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001210:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6093      	str	r3, [r2, #8]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001238:	d101      	bne.n	800123e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800125c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001260:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001288:	d101      	bne.n	800128e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d8:	f043 0202 	orr.w	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <LL_ADC_IsEnabled+0x18>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <LL_ADC_IsEnabled+0x1a>
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d101      	bne.n	800132a <LL_ADC_IsDisableOngoing+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_ADC_IsDisableOngoing+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800134c:	f043 0204 	orr.w	r2, r3, #4
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b04      	cmp	r3, #4
 8001372:	d101      	bne.n	8001378 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b08      	cmp	r3, #8
 8001398:	d101      	bne.n	800139e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e12a      	b.n	800161c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_ADC_Init+0x3c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f003 f803 	bl	80043e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff19 	bl	8001224 <LL_ADC_IsDeepPowerDownEnabled>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */ 
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff feff 	bl	8001200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff34 	bl	8001274 <LL_ADC_IsInternalRegulatorEnabled>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d113      	bne.n	800143a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff18 	bl	800124c <LL_ADC_EnableInternalRegulator>
    
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800141c:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_ADC_Init+0x278>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	099b      	lsrs	r3, r3, #6
 8001422:	4a81      	ldr	r2, [pc, #516]	; (8001628 <HAL_ADC_Init+0x27c>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800142c:	e002      	b.n	8001434 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3b01      	subs	r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <HAL_ADC_Init+0x82>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff18 	bl	8001274 <LL_ADC_IsInternalRegulatorEnabled>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	f043 0210 	orr.w	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	f043 0201 	orr.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	77fb      	strb	r3, [r7, #31]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff78 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 8001470:	6178      	str	r0, [r7, #20]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 80c5 	bne.w	800160a <HAL_ADC_Init+0x25e>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 80c1 	bne.w	800160a <HAL_ADC_Init+0x25e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001490:	f043 0202 	orr.w	r2, r3, #2
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff25 	bl	80012ec <LL_ADC_IsEnabled>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014a8:	4860      	ldr	r0, [pc, #384]	; (800162c <HAL_ADC_Init+0x280>)
 80014aa:	f7ff ff1f 	bl	80012ec <LL_ADC_IsEnabled>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d105      	bne.n	80014c0 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4619      	mov	r1, r3
 80014ba:	485d      	ldr	r0, [pc, #372]	; (8001630 <HAL_ADC_Init+0x284>)
 80014bc:	f7ff fd96 	bl	8000fec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7e5b      	ldrb	r3, [r3, #25]
 80014c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d106      	bne.n	80014fc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	3b01      	subs	r3, #1
 80014f4:	045b      	lsls	r3, r3, #17
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	2b00      	cmp	r3, #0
 8001502:	d009      	beq.n	8001518 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	4313      	orrs	r3, r2
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	4b45      	ldr	r3, [pc, #276]	; (8001634 <HAL_ADC_Init+0x288>)
 8001520:	4013      	ands	r3, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	430b      	orrs	r3, r1
 800152a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff15 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 8001536:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff22 	bl	8001386 <LL_ADC_INJ_IsConversionOngoing>
 8001542:	60f8      	str	r0, [r7, #12]
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d13d      	bne.n	80015c6 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d13a      	bne.n	80015c6 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8001554:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800155c:	005b      	lsls	r3, r3, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800156c:	f023 0302 	bic.w	r3, r3, #2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	69b9      	ldr	r1, [r7, #24]
 8001576:	430b      	orrs	r3, r1
 8001578:	60d3      	str	r3, [r2, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001580:	2b01      	cmp	r3, #1
 8001582:	d118      	bne.n	80015b6 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800158e:	f023 0304 	bic.w	r3, r3, #4
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800159a:	4311      	orrs	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015a0:	4311      	orrs	r1, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015a6:	430a      	orrs	r2, r1
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	e007      	b.n	80015c6 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d10c      	bne.n	80015e8 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f023 010f 	bic.w	r1, r3, #15
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
 80015e6:	e007      	b.n	80015f8 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 020f 	bic.w	r2, r2, #15
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fc:	f023 0303 	bic.w	r3, r3, #3
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
 8001608:	e007      	b.n	800161a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f043 0210 	orr.w	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800161a:	7ffb      	ldrb	r3, [r7, #31]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	053e2d63 	.word	0x053e2d63
 800162c:	50040000 	.word	0x50040000
 8001630:	50040300 	.word	0x50040300
 8001634:	fff0c007 	.word	0xfff0c007

08001638 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fe8b 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d14f      	bne.n	80016f0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <HAL_ADC_Start+0x26>
 800165a:	2302      	movs	r3, #2
 800165c:	e04b      	b.n	80016f6 <HAL_ADC_Start+0xbe>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fc2c 	bl	8001ec4 <ADC_Enable>
 800166c:	4603      	mov	r3, r0
 800166e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d137      	bne.n	80016e6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif
      
      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001696:	d106      	bne.n	80016a6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f023 0206 	bic.w	r2, r3, #6
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58
 80016a4:	e002      	b.n	80016ac <HAL_ADC_Start+0x74>
      }
      else
      {  
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc); 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	659a      	str	r2, [r3, #88]	; 0x58
      }
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	221c      	movs	r2, #28
 80016b2:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
        
      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
      }
      
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fe2a 	bl	8001338 <LL_ADC_REG_StartConversion>
 80016e4:	e006      	b.n	80016f4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016ee:	e001      	b.n	80016f4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
 80016f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	2b08      	cmp	r3, #8
 800170e:	d102      	bne.n	8001716 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001710:	2308      	movs	r3, #8
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e010      	b.n	8001738 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	f043 0220 	orr.w	r2, r3, #32
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e068      	b.n	8001806 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001734:	2304      	movs	r3, #4
 8001736:	617b      	str	r3, [r7, #20]
    }
#endif
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001738:	f7ff fc4c 	bl	8000fd4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800173e:	e01a      	b.n	8001776 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d016      	beq.n	8001776 <HAL_ADC_PollForConversion+0x78>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001748:	f7ff fc44 	bl	8000fd4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d302      	bcc.n	800175e <HAL_ADC_PollForConversion+0x60>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10b      	bne.n	8001776 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	f043 0204 	orr.w	r2, r3, #4
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e047      	b.n	8001806 <HAL_ADC_PollForConversion+0x108>
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0dd      	beq.n	8001740 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fcab 	bl	80010f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01c      	beq.n	80017da <HAL_ADC_PollForConversion+0xdc>
     && (hadc->Init.ContinuousConvMode == DISABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7e5b      	ldrb	r3, [r3, #25]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d118      	bne.n	80017da <HAL_ADC_PollForConversion+0xdc>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d111      	bne.n	80017da <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d105      	bne.n	80017da <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60fb      	str	r3, [r7, #12]
#endif
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d104      	bne.n	80017f2 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2208      	movs	r2, #8
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e008      	b.n	8001804 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	220c      	movs	r2, #12
 8001802:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0a6      	sub	sp, #152	; 0x98
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_ConfigChannel+0x22>
 8001846:	2302      	movs	r3, #2
 8001848:	e32b      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x67a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fd82 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 8310 	bne.w	8001e84 <HAL_ADC_ConfigChannel+0x65c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d824      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	3b02      	subs	r3, #2
 8001872:	2b03      	cmp	r3, #3
 8001874:	d81b      	bhi.n	80018ae <HAL_ADC_ConfigChannel+0x86>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <HAL_ADC_ConfigChannel+0x54>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001895 	.word	0x08001895
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018a5 	.word	0x080018a5
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	220c      	movs	r2, #12
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	e011      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2212      	movs	r2, #18
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	e00d      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2218      	movs	r2, #24
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	e009      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	e004      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2206      	movs	r2, #6
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018b6:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	f7ff fc26 	bl	8001116 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fd46 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 80018d4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fd52 	bl	8001386 <LL_ADC_INJ_IsConversionOngoing>
 80018e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 8140 	bne.w	8001b70 <HAL_ADC_ConfigChannel+0x348>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 813b 	bne.w	8001b70 <HAL_ADC_ConfigChannel+0x348>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	461a      	mov	r2, r3
 8001908:	f7ff fc2e 	bl	8001168 <LL_ADC_SetChannelSamplingTime>
      
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b04      	cmp	r3, #4
 800192c:	d00a      	beq.n	8001944 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800193e:	f7ff fb89 	bl	8001054 <LL_ADC_SetOffset>
 8001942:	e115      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x348>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fba4 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10a      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x148>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fb99 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	f003 021f 	and.w	r2, r3, #31
 800196e:	e011      	b.n	8001994 <HAL_ADC_ConfigChannel+0x16c>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fb8e 	bl	8001098 <LL_ADC_GetOffsetChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800198c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x184>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	e009      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x198>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 80019ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d106      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x1aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fb77 	bl	80010c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb5d 	bl	8001098 <LL_ADC_GetOffsetChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x1d6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb52 	bl	8001098 <LL_ADC_GetOffsetChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	e00f      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x1f6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fb47 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x20e>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	e009      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x222>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d106      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x234>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	2101      	movs	r1, #1
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb32 	bl	80010c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2102      	movs	r1, #2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fb18 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10a      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x260>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2102      	movs	r1, #2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fb0d 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	0e9b      	lsrs	r3, r3, #26
 8001a82:	f003 021f 	and.w	r2, r3, #31
 8001a86:	e00f      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x280>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fb02 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8001aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x298>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0e9b      	lsrs	r3, r3, #26
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	e009      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x2ac>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d106      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x2be>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff faed 	bl	80010c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2103      	movs	r1, #3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fad3 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x2ea>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2103      	movs	r1, #3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fac8 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	0e9b      	lsrs	r3, r3, #26
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	e00f      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x30a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2103      	movs	r1, #3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fabd 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x322>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0e9b      	lsrs	r3, r3, #26
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	e009      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x336>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d106      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x348>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	2103      	movs	r1, #3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff faa8 	bl	80010c0 <LL_ADC_SetOffsetState>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fbb9 	bl	80012ec <LL_ADC_IsEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 8105 	bne.w	8001d8c <HAL_ADC_ConfigChannel+0x564>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f7ff fb12 	bl	80011b8 <LL_ADC_SetChannelSingleDiff>
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4ab1      	ldr	r2, [pc, #708]	; (8001e60 <HAL_ADC_ConfigChannel+0x638>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	f040 80f6 	bne.w	8001d8c <HAL_ADC_ConfigChannel+0x564>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x3a0>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0e9b      	lsrs	r3, r3, #26
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2b09      	cmp	r3, #9
 8001bbe:	bf94      	ite	ls
 8001bc0:	2301      	movls	r3, #1
 8001bc2:	2300      	movhi	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	e011      	b.n	8001bec <HAL_ADC_ConfigChannel+0x3c4>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2b09      	cmp	r3, #9
 8001be4:	bf94      	ite	ls
 8001be6:	2301      	movls	r3, #1
 8001be8:	2300      	movhi	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d061      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x48c>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x3e4>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0e9b      	lsrs	r3, r3, #26
 8001c02:	3301      	adds	r3, #1
 8001c04:	069b      	lsls	r3, r3, #26
 8001c06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c0a:	e00d      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x400>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	069b      	lsls	r3, r3, #26
 8001c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x420>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	e00f      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x440>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	ea42 0103 	orr.w	r1, r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x466>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	051b      	lsls	r3, r3, #20
 8001c8c:	e010      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x488>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	051b      	lsls	r3, r3, #20
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	e066      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x55a>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d107      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x4a8>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	069b      	lsls	r3, r3, #26
 8001cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cce:	e00d      	b.n	8001cec <HAL_ADC_ConfigChannel+0x4c4>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	069b      	lsls	r3, r3, #26
 8001ce8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x4e4>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0e9b      	lsrs	r3, r3, #26
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	e00f      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x504>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	617b      	str	r3, [r7, #20]
  return(result);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	ea42 0103 	orr.w	r1, r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10d      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x530>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0e9b      	lsrs	r3, r3, #26
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b1e      	subs	r3, #30
 8001d50:	051b      	lsls	r3, r3, #20
 8001d52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d56:	e013      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x558>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f003 021f 	and.w	r2, r3, #31
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	3b1e      	subs	r3, #30
 8001d7a:	051b      	lsls	r3, r3, #20
 8001d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d80:	430b      	orrs	r3, r1
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	6892      	ldr	r2, [r2, #8]
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7ff f9ee 	bl	8001168 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_ADC_ConfigChannel+0x63c>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d07e      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d98:	4833      	ldr	r0, [pc, #204]	; (8001e68 <HAL_ADC_ConfigChannel+0x640>)
 8001d9a:	f7ff f94d 	bl	8001038 <LL_ADC_GetCommonPathInternalCh>
 8001d9e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a31      	ldr	r2, [pc, #196]	; (8001e6c <HAL_ADC_ConfigChannel+0x644>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d126      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x5d2>
 8001dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d120      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x5d2>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2c      	ldr	r2, [pc, #176]	; (8001e70 <HAL_ADC_ConfigChannel+0x648>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d169      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4826      	ldr	r0, [pc, #152]	; (8001e68 <HAL_ADC_ConfigChannel+0x640>)
 8001dce:	f7ff f920 	bl	8001012 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_ADC_ConfigChannel+0x64c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_ADC_ConfigChannel+0x650>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	099a      	lsrs	r2, r3, #6
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8001dea:	e002      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x5ca>
          {
            wait_loop_index--;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f9      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x5c4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001df8:	e04d      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_ADC_ConfigChannel+0x654>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d113      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x604>
 8001e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x604>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <HAL_ADC_ConfigChannel+0x648>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d13d      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	4619      	mov	r1, r3
 8001e24:	4810      	ldr	r0, [pc, #64]	; (8001e68 <HAL_ADC_ConfigChannel+0x640>)
 8001e26:	f7ff f8f4 	bl	8001012 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e2a:	e034      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <HAL_ADC_ConfigChannel+0x658>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12f      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
 8001e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d129      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_ADC_ConfigChannel+0x648>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d124      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e54:	4619      	mov	r1, r3
 8001e56:	4804      	ldr	r0, [pc, #16]	; (8001e68 <HAL_ADC_ConfigChannel+0x640>)
 8001e58:	f7ff f8db 	bl	8001012 <LL_ADC_SetCommonPathInternalCh>
 8001e5c:	e01b      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x66e>
 8001e5e:	bf00      	nop
 8001e60:	407f0000 	.word	0x407f0000
 8001e64:	80080000 	.word	0x80080000
 8001e68:	50040300 	.word	0x50040300
 8001e6c:	c7520000 	.word	0xc7520000
 8001e70:	50040000 	.word	0x50040000
 8001e74:	20000000 	.word	0x20000000
 8001e78:	053e2d63 	.word	0x053e2d63
 8001e7c:	cb840000 	.word	0xcb840000
 8001e80:	80000001 	.word	0x80000001
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f043 0220 	orr.w	r2, r3, #32
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 8001e9e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3798      	adds	r7, #152	; 0x98
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop

08001eac <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC handle state */
  return hadc->State;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fa0b 	bl	80012ec <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d146      	bne.n	8001f6a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <ADC_Enable+0xb0>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00d      	beq.n	8001f06 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f043 0210 	orr.w	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e032      	b.n	8001f6c <ADC_Enable+0xa8>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f9c6 	bl	800129c <LL_ADC_Enable>
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f10:	f7ff f860 	bl	8000fd4 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f16:	e021      	b.n	8001f5c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f9e5 	bl	80012ec <LL_ADC_IsEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d104      	bne.n	8001f32 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f9b5 	bl	800129c <LL_ADC_Enable>
      }
      
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f32:	f7ff f84f 	bl	8000fd4 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d90d      	bls.n	8001f5c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f043 0210 	orr.w	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e007      	b.n	8001f6c <ADC_Enable+0xa8>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d1d6      	bne.n	8001f18 <ADC_Enable+0x54>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	8000003f 	.word	0x8000003f

08001f78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f9c4 	bl	8001312 <LL_ADC_IsDisableOngoing>
 8001f8a:	60f8      	str	r0, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f9ab 	bl	80012ec <LL_ADC_IsEnabled>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d040      	beq.n	800201e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d13d      	bne.n	800201e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030d 	and.w	r3, r3, #13
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10c      	bne.n	8001fca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f985 	bl	80012c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
    
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fc2:	f7ff f807 	bl	8000fd4 <HAL_GetTick>
 8001fc6:	60b8      	str	r0, [r7, #8]
    
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fc8:	e022      	b.n	8002010 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e01c      	b.n	8002020 <ADC_Disable+0xa8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fe6:	f7fe fff5 	bl	8000fd4 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d90d      	bls.n	8002010 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	f043 0210 	orr.w	r2, r3, #16
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e007      	b.n	8002020 <ADC_Disable+0xa8>
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1e3      	bne.n	8001fe6 <ADC_Disable+0x6e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <LL_ADC_IsCalibrationOnGoing>:
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800203c:	d101      	bne.n	8002042 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADCEx_Calibration_Start+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e059      	b.n	8002120 <HAL_ADCEx_Calibration_Start+0xd0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff7f 	bl	8001f78 <ADC_Disable>
 800207a:	4603      	mov	r3, r0
 800207c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d142      	bne.n	800210a <HAL_ADCEx_Calibration_Start+0xba>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800208c:	f023 0302 	bic.w	r3, r3, #2
 8002090:	f043 0202 	orr.w	r2, r3, #2
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_BUSY_INTERNAL);

    

    /* Select calibration mode single ended or differential ended */
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALDIF, SingleDiff);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 4180 	bic.w	r1, r3, #1073741824	; 0x40000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020ba:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80020bc:	e014      	b.n	80020e8 <HAL_ADCEx_Calibration_Start+0x98>
    {
      wait_loop_index++;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3301      	adds	r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80020ca:	d30d      	bcc.n	80020e8 <HAL_ADCEx_Calibration_Start+0x98>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f023 0312 	bic.w	r3, r3, #18
 80020d4:	f043 0210 	orr.w	r2, r3, #16
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e01b      	b.n	8002120 <HAL_ADCEx_Calibration_Start+0xd0>
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff9b 	bl	8002028 <LL_ADC_IsCalibrationOnGoing>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e2      	bne.n	80020be <HAL_ADCEx_Calibration_Start+0x6e>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	f023 0303 	bic.w	r3, r3, #3
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
 8002108:	e005      	b.n	8002116 <HAL_ADCEx_Calibration_Start+0xc6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	f043 0210 	orr.w	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <NVIC_SetPriorityGrouping+0x44>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <NVIC_SetPriorityGrouping+0x44>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <NVIC_GetPriorityGrouping+0x18>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0307 	and.w	r3, r3, #7
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	da0b      	bge.n	80021b8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	490c      	ldr	r1, [pc, #48]	; (80021d8 <NVIC_SetPriority+0x4c>)
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	3b04      	subs	r3, #4
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b6:	e009      	b.n	80021cc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4907      	ldr	r1, [pc, #28]	; (80021dc <NVIC_SetPriority+0x50>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f1c3 0307 	rsb	r3, r3, #7
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	bf28      	it	cs
 80021fe:	2304      	movcs	r3, #4
 8002200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3304      	adds	r3, #4
 8002206:	2b06      	cmp	r3, #6
 8002208:	d902      	bls.n	8002210 <NVIC_EncodePriority+0x30>
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3b03      	subs	r3, #3
 800220e:	e000      	b.n	8002212 <NVIC_EncodePriority+0x32>
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	401a      	ands	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43d9      	mvns	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	4313      	orrs	r3, r2
         );
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ff8e 	bl	800218c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff47 	bl	8002128 <NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff5c 	bl	8002170 <NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff8e 	bl	80021e0 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5d 	bl	800218c <NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffb0 	bl	8002248 <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d106      	bne.n	8002310 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800230e:	e005      	b.n	800231c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002316:	f023 0304 	bic.w	r3, r3, #4
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e010 	.word	0xe000e010

0800232c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002330:	f000 f802 	bl	8002338 <HAL_SYSTICK_Callback>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	e154      	b.n	8002602 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8146 	beq.w	80025fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x38>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b12      	cmp	r3, #18
 800237e:	d123      	bne.n	80023c8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d00b      	beq.n	800241c <HAL_GPIO_Init+0xd4>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d007      	beq.n	800241c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002410:	2b11      	cmp	r3, #17
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b12      	cmp	r3, #18
 800241a:	d130      	bne.n	800247e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002452:	2201      	movs	r2, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 0201 	and.w	r2, r3, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80a0 	beq.w	80025fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024bc:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_GPIO_Init+0x2d8>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	4a57      	ldr	r2, [pc, #348]	; (8002620 <HAL_GPIO_Init+0x2d8>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6613      	str	r3, [r2, #96]	; 0x60
 80024c8:	4b55      	ldr	r3, [pc, #340]	; (8002620 <HAL_GPIO_Init+0x2d8>)
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024d4:	4a53      	ldr	r2, [pc, #332]	; (8002624 <HAL_GPIO_Init+0x2dc>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024fe:	d019      	beq.n	8002534 <HAL_GPIO_Init+0x1ec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a49      	ldr	r2, [pc, #292]	; (8002628 <HAL_GPIO_Init+0x2e0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_GPIO_Init+0x1e8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_GPIO_Init+0x2e4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00d      	beq.n	800252c <HAL_GPIO_Init+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_GPIO_Init+0x2e8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <HAL_GPIO_Init+0x1e0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a46      	ldr	r2, [pc, #280]	; (8002634 <HAL_GPIO_Init+0x2ec>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_GPIO_Init+0x1dc>
 8002520:	2304      	movs	r3, #4
 8002522:	e008      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002524:	2307      	movs	r3, #7
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002528:	2303      	movs	r3, #3
 800252a:	e004      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 800252c:	2302      	movs	r3, #2
 800252e:	e002      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002534:	2300      	movs	r3, #0
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	f002 0203 	and.w	r2, r2, #3
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	4093      	lsls	r3, r2
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002546:	4937      	ldr	r1, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x2dc>)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002554:	4b38      	ldr	r3, [pc, #224]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002578:	4a2f      	ldr	r2, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025a2:	4a25      	ldr	r2, [pc, #148]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025cc:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f aea3 	bne.w	8002358 <HAL_GPIO_Init+0x10>
  }
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	40010000 	.word	0x40010000
 8002628:	48000400 	.word	0x48000400
 800262c:	48000800 	.word	0x48000800
 8002630:	48000c00 	.word	0x48000c00
 8002634:	48001000 	.word	0x48001000
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40007000 	.word	0x40007000

0800265c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_PWREx_GetVoltageRange+0x18>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40007000 	.word	0x40007000

08002678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002686:	d130      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002694:	d038      	beq.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2232      	movs	r2, #50	; 0x32
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0c9b      	lsrs	r3, r3, #18
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026bc:	e002      	b.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d0:	d102      	bne.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f2      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e4:	d110      	bne.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e00f      	b.n	800270a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f6:	d007      	beq.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002706:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40007000 	.word	0x40007000
 800271c:	20000000 	.word	0x20000000
 8002720:	431bde83 	.word	0x431bde83

08002724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e395      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002736:	4ba3      	ldr	r3, [pc, #652]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002740:	4ba0      	ldr	r3, [pc, #640]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80df 	beq.w	8002916 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_RCC_OscConfig+0x4a>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b0c      	cmp	r3, #12
 8002762:	f040 8086 	bne.w	8002872 <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 8082 	bne.w	8002872 <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276e:	4b95      	ldr	r3, [pc, #596]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e36d      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	4b8e      	ldr	r3, [pc, #568]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_RCC_OscConfig+0x7c>
 8002796:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279e:	e005      	b.n	80027ac <HAL_RCC_OscConfig+0x88>
 80027a0:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d223      	bcs.n	80027f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fd0f 	bl	80031d8 <RCC_SetFlashLatencyFromMSIRange>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e34e      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b7f      	ldr	r3, [pc, #508]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a7e      	ldr	r2, [pc, #504]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b7c      	ldr	r3, [pc, #496]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4979      	ldr	r1, [pc, #484]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	4b78      	ldr	r3, [pc, #480]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4974      	ldr	r1, [pc, #464]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
 80027f6:	e022      	b.n	800283e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f8:	4b72      	ldr	r3, [pc, #456]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a71      	ldr	r2, [pc, #452]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b6f      	ldr	r3, [pc, #444]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	496c      	ldr	r1, [pc, #432]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002816:	4b6b      	ldr	r3, [pc, #428]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	4967      	ldr	r1, [pc, #412]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fcd2 	bl	80031d8 <RCC_SetFlashLatencyFromMSIRange>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e311      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800283e:	f000 fbf5 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002842:	4602      	mov	r2, r0
 8002844:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	495e      	ldr	r1, [pc, #376]	; (80029c8 <HAL_RCC_OscConfig+0x2a4>)
 8002850:	5ccb      	ldrb	r3, [r1, r3]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a5c      	ldr	r2, [pc, #368]	; (80029cc <HAL_RCC_OscConfig+0x2a8>)
 800285c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe fb86 	bl	8000f70 <HAL_InitTick>
 8002864:	4603      	mov	r3, r0
 8002866:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d052      	beq.n	8002914 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	e2f7      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d032      	beq.n	80028e0 <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800287a:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002886:	f7fe fba5 	bl	8000fd4 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800288e:	f7fe fba1 	bl	8000fd4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e2e0      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a0:	4b48      	ldr	r3, [pc, #288]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ac:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a44      	ldr	r2, [pc, #272]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	493f      	ldr	r1, [pc, #252]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	493a      	ldr	r1, [pc, #232]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
 80028de:	e01a      	b.n	8002916 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a37      	ldr	r2, [pc, #220]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028ec:	f7fe fb72 	bl	8000fd4 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f4:	f7fe fb6e 	bl	8000fd4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e2ad      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002906:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1d0>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d072      	beq.n	8002a08 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d005      	beq.n	8002934 <HAL_RCC_OscConfig+0x210>
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d10e      	bne.n	800294c <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d10b      	bne.n	800294c <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d062      	beq.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d15e      	bne.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e28a      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002954:	d106      	bne.n	8002964 <HAL_RCC_OscConfig+0x240>
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e01d      	b.n	80029a0 <HAL_RCC_OscConfig+0x27c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x264>
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0x27c>
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_RCC_OscConfig+0x2a0>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01a      	beq.n	80029de <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fb14 	bl	8000fd4 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ae:	e00f      	b.n	80029d0 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fb10 	bl	8000fd4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d908      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e24f      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08007690 	.word	0x08007690
 80029cc:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d0:	4bae      	ldr	r3, [pc, #696]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0e9      	beq.n	80029b0 <HAL_RCC_OscConfig+0x28c>
 80029dc:	e014      	b.n	8002a08 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe faf9 	bl	8000fd4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e6:	f7fe faf5 	bl	8000fd4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e234      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f8:	4ba4      	ldr	r3, [pc, #656]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x2c2>
 8002a04:	e000      	b.n	8002a08 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d060      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x302>
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	d119      	bne.n	8002a54 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d116      	bne.n	8002a54 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a26:	4b99      	ldr	r3, [pc, #612]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x31a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e211      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3e:	4b93      	ldr	r3, [pc, #588]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	061b      	lsls	r3, r3, #24
 8002a4c:	498f      	ldr	r1, [pc, #572]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a52:	e040      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d023      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5c:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a8a      	ldr	r2, [pc, #552]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fab4 	bl	8000fd4 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a70:	f7fe fab0 	bl	8000fd4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1ef      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a82:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	497b      	ldr	r1, [pc, #492]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
 8002aa2:	e018      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa4:	4b79      	ldr	r3, [pc, #484]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a78      	ldr	r2, [pc, #480]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fa90 	bl	8000fd4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fa8c 	bl	8000fd4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1cb      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aca:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d03c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aea:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af0:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fa6b 	bl	8000fd4 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe fa67 	bl	8000fd4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1a6      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0ef      	beq.n	8002b02 <HAL_RCC_OscConfig+0x3de>
 8002b22:	e01b      	b.n	8002b5c <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2a:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fa4e 	bl	8000fd4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fe fa4a 	bl	8000fd4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e189      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b4e:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ef      	bne.n	8002b3c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80a5 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	4a43      	ldr	r2, [pc, #268]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6593      	str	r3, [r2, #88]	; 0x58
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b96:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <HAL_RCC_OscConfig+0x56c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x56c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3a      	ldr	r2, [pc, #232]	; (8002c90 <HAL_RCC_OscConfig+0x56c>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7fe fa11 	bl	8000fd4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fe fa0d 	bl	8000fd4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e14c      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc8:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCC_OscConfig+0x56c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d108      	bne.n	8002bee <HAL_RCC_OscConfig+0x4ca>
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	4a2a      	ldr	r2, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bec:	e024      	b.n	8002c38 <HAL_RCC_OscConfig+0x514>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d110      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4f4>
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c16:	e00f      	b.n	8002c38 <HAL_RCC_OscConfig+0x514>
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c28:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d016      	beq.n	8002c6e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7fe f9c8 	bl	8000fd4 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe f9c4 	bl	8000fd4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e101      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x568>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ed      	beq.n	8002c48 <HAL_RCC_OscConfig+0x524>
 8002c6c:	e019      	b.n	8002ca2 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe f9b1 	bl	8000fd4 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c74:	e00e      	b.n	8002c94 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fe f9ad 	bl	8000fd4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d905      	bls.n	8002c94 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0ea      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c94:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e9      	bne.n	8002c76 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b70      	ldr	r3, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	4a6f      	ldr	r2, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d03c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cc8:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cce:	4a67      	ldr	r2, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe f97c 	bl	8000fd4 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce0:	f7fe f978 	bl	8000fd4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0b7      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cf2:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ef      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x5bc>
 8002d00:	e01b      	b.n	8002d3a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7fe f95f 	bl	8000fd4 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d1a:	f7fe f95b 	bl	8000fd4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e09a      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ef      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 808e 	beq.w	8002e60 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	f000 8088 	beq.w	8002e5c <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d155      	bne.n	8002e00 <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d54:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a44      	ldr	r2, [pc, #272]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe f938 	bl	8000fd4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe f934 	bl	8000fd4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e073      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	011a      	lsls	r2, r3, #4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	055b      	lsls	r3, r3, #21
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	3b01      	subs	r3, #1
 8002db0:	065b      	lsls	r3, r3, #25
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	06db      	lsls	r3, r3, #27
 8002dba:	492c      	ldr	r1, [pc, #176]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dcc:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f8fc 	bl	8000fd4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f8f8 	bl	8000fd4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e037      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x6bc>
 8002dfe:	e02f      	b.n	8002e60 <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002e1e:	f023 0303 	bic.w	r3, r3, #3
 8002e22:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002e2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe f8ce 	bl	8000fd4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe f8ca 	bl	8000fd4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e009      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <HAL_RCC_OscConfig+0x748>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x718>
 8002e5a:	e001      	b.n	8002e60 <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0c6      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e84:	4b65      	ldr	r3, [pc, #404]	; (800301c <HAL_RCC_ClockConfig+0x1ac>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d910      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b62      	ldr	r3, [pc, #392]	; (800301c <HAL_RCC_ClockConfig+0x1ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 0207 	bic.w	r2, r3, #7
 8002e9a:	4960      	ldr	r1, [pc, #384]	; (800301c <HAL_RCC_ClockConfig+0x1ac>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b5e      	ldr	r3, [pc, #376]	; (800301c <HAL_RCC_ClockConfig+0x1ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0ae      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d04c      	beq.n	8002f5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec8:	4b55      	ldr	r3, [pc, #340]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d121      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e09c      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d115      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e090      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef8:	4b49      	ldr	r3, [pc, #292]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e084      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f08:	4b45      	ldr	r3, [pc, #276]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e07c      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f18:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 0203 	bic.w	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	493e      	ldr	r1, [pc, #248]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2a:	f7fe f853 	bl	8000fd4 <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f32:	f7fe f84f 	bl	8000fd4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e064      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f48:	4b35      	ldr	r3, [pc, #212]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 020c 	and.w	r2, r3, #12
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d1eb      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	492b      	ldr	r1, [pc, #172]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_RCC_ClockConfig+0x1ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d210      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_ClockConfig+0x1ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 0207 	bic.w	r2, r3, #7
 8002f8e:	4923      	ldr	r1, [pc, #140]	; (800301c <HAL_RCC_ClockConfig+0x1ac>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_RCC_ClockConfig+0x1ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e034      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4917      	ldr	r1, [pc, #92]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	490f      	ldr	r1, [pc, #60]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe6:	f000 f821 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_RCC_ClockConfig+0x1b0>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	490b      	ldr	r1, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff8:	5ccb      	ldrb	r3, [r1, r3]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8003006:	2000      	movs	r0, #0
 8003008:	f7fd ffb2 	bl	8000f70 <HAL_InitTick>
 800300c:	4603      	mov	r3, r0
 800300e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003010:	7afb      	ldrb	r3, [r7, #11]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40022000 	.word	0x40022000
 8003020:	40021000 	.word	0x40021000
 8003024:	08007690 	.word	0x08007690
 8003028:	20000000 	.word	0x20000000

0800302c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003044:	4b44      	ldr	r3, [pc, #272]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x34>
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d121      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d11e      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003060:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800306c:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	e005      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800307c:	4b36      	ldr	r3, [pc, #216]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003088:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_RCC_GetSysClockFreq+0x130>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_RCC_GetSysClockFreq+0x134>)
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e004      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <HAL_RCC_GetSysClockFreq+0x138>)
 80030b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d146      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ba:	4b27      	ldr	r3, [pc, #156]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	3301      	adds	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d003      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0xb4>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d00d      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0xce>
 80030de:	e019      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xe8>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030e0:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_RCC_GetSysClockFreq+0x134>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 80030ea:	68d2      	ldr	r2, [r2, #12]
 80030ec:	0a12      	lsrs	r2, r2, #8
 80030ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	617b      	str	r3, [r7, #20]
      break;
 80030f8:	e019      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x102>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030fa:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_RCC_GetSysClockFreq+0x138>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003104:	68d2      	ldr	r2, [r2, #12]
 8003106:	0a12      	lsrs	r2, r2, #8
 8003108:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
      break;
 8003112:	e00c      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x102>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 800311e:	68d2      	ldr	r2, [r2, #12]
 8003120:	0a12      	lsrs	r2, r2, #8
 8003122:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
      break;
 800312c:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	0e5b      	lsrs	r3, r3, #25
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	3301      	adds	r3, #1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003148:	69bb      	ldr	r3, [r7, #24]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	080076a8 	.word	0x080076a8
 8003160:	00f42400 	.word	0x00f42400
 8003164:	007a1200 	.word	0x007a1200

08003168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003184:	f7ff fff0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4904      	ldr	r1, [pc, #16]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	080076a0 	.word	0x080076a0

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031b0:	f7ff ffda 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0adb      	lsrs	r3, r3, #11
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4904      	ldr	r1, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	080076a0 	.word	0x080076a0

080031d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031f0:	f7ff fa34 	bl	800265c <HAL_PWREx_GetVoltageRange>
 80031f4:	6178      	str	r0, [r7, #20]
 80031f6:	e014      	b.n	8003222 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	4a24      	ldr	r2, [pc, #144]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003202:	6593      	str	r3, [r2, #88]	; 0x58
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003210:	f7ff fa24 	bl	800265c <HAL_PWREx_GetVoltageRange>
 8003214:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003228:	d10b      	bne.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	d919      	bls.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2ba0      	cmp	r3, #160	; 0xa0
 8003234:	d902      	bls.n	800323c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003236:	2302      	movs	r3, #2
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	e013      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800323c:	2301      	movs	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e010      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d902      	bls.n	800324e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003248:	2303      	movs	r3, #3
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e00a      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d102      	bne.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003254:	2302      	movs	r3, #2
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e004      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d101      	bne.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003260:	2301      	movs	r3, #1
 8003262:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 0207 	bic.w	r2, r3, #7
 800326c:	4909      	ldr	r1, [pc, #36]	; (8003294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	429a      	cmp	r2, r3
 8003280:	d001      	beq.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	40022000 	.word	0x40022000

08003298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a0:	2300      	movs	r3, #0
 80032a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032a4:	2300      	movs	r3, #0
 80032a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d031      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032bc:	d01a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032c2:	d814      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032cc:	d10f      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032ce:	4b5d      	ldr	r3, [pc, #372]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4a5c      	ldr	r2, [pc, #368]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032da:	e00c      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fa00 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	74fb      	strb	r3, [r7, #19]
      break;
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80032f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032fc:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	494e      	ldr	r1, [pc, #312]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003312:	e001      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 809e 	beq.w	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800332a:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003340:	4b40      	ldr	r3, [pc, #256]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	4a3f      	ldr	r2, [pc, #252]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334a:	6593      	str	r3, [r2, #88]	; 0x58
 800334c:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003358:	2301      	movs	r3, #1
 800335a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800335c:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a39      	ldr	r2, [pc, #228]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003368:	f7fd fe34 	bl	8000fd4 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800336e:	e009      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003370:	f7fd fe30 	bl	8000fd4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d902      	bls.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	74fb      	strb	r3, [r7, #19]
        break;
 8003382:	e005      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003384:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ef      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d15a      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01e      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d019      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033de:	4a19      	ldr	r2, [pc, #100]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d016      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fd fdf0 	bl	8000fd4 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	e00b      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fd fdec 	bl	8000fd4 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d902      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	74fb      	strb	r3, [r7, #19]
            break;
 800340e:	e006      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0ec      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4904      	ldr	r1, [pc, #16]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800343a:	e009      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
 8003440:	e006      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003450:	7c7b      	ldrb	r3, [r7, #17]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b9b      	ldr	r3, [pc, #620]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	4a9a      	ldr	r2, [pc, #616]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800346e:	4b95      	ldr	r3, [pc, #596]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f023 0203 	bic.w	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4991      	ldr	r1, [pc, #580]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003490:	4b8c      	ldr	r3, [pc, #560]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 020c 	bic.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	4989      	ldr	r1, [pc, #548]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034b2:	4b84      	ldr	r3, [pc, #528]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	4980      	ldr	r1, [pc, #512]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034d4:	4b7b      	ldr	r3, [pc, #492]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	4978      	ldr	r1, [pc, #480]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034f6:	4b73      	ldr	r3, [pc, #460]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003504:	496f      	ldr	r1, [pc, #444]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003518:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4967      	ldr	r1, [pc, #412]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800353a:	4b62      	ldr	r3, [pc, #392]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	495e      	ldr	r1, [pc, #376]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	4956      	ldr	r1, [pc, #344]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800357e:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d028      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035a0:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	4945      	ldr	r1, [pc, #276]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035be:	d106      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a3f      	ldr	r2, [pc, #252]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	e011      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f882 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d028      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360c:	492d      	ldr	r1, [pc, #180]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361c:	d106      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361e:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4a28      	ldr	r2, [pc, #160]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003628:	60d3      	str	r3, [r2, #12]
 800362a:	e011      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003634:	d10c      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2101      	movs	r1, #1
 800363c:	4618      	mov	r0, r3
 800363e:	f000 f853 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800367a:	d10c      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f830 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000

080036c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036d2:	f043 0304 	orr.w	r3, r3, #4
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000

080036e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036f6:	4b74      	ldr	r3, [pc, #464]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d018      	beq.n	8003734 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003702:	4b71      	ldr	r3, [pc, #452]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0203 	and.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d10d      	bne.n	800372e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
       ||
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800371a:	4b6b      	ldr	r3, [pc, #428]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
       ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d047      	beq.n	80037be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	e044      	b.n	80037be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d018      	beq.n	800376e <RCCEx_PLLSAI1_Config+0x86>
 800373c:	2b03      	cmp	r3, #3
 800373e:	d825      	bhi.n	800378c <RCCEx_PLLSAI1_Config+0xa4>
 8003740:	2b01      	cmp	r3, #1
 8003742:	d002      	beq.n	800374a <RCCEx_PLLSAI1_Config+0x62>
 8003744:	2b02      	cmp	r3, #2
 8003746:	d009      	beq.n	800375c <RCCEx_PLLSAI1_Config+0x74>
 8003748:	e020      	b.n	800378c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800374a:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11d      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375a:	e01a      	b.n	8003792 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800375c:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d116      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376c:	e013      	b.n	8003796 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800376e:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800377a:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800378a:	e006      	b.n	800379a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e004      	b.n	800379c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800379a:	bf00      	nop
    }

    if(status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10d      	bne.n	80037be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	430b      	orrs	r3, r1
 80037b8:	4943      	ldr	r1, [pc, #268]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d17c      	bne.n	80038be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037c4:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a3f      	ldr	r2, [pc, #252]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fd fc00 	bl	8000fd4 <HAL_GetTick>
 80037d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037d6:	e009      	b.n	80037ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d8:	f7fd fbfc 	bl	8000fd4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d902      	bls.n	80037ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ea:	e005      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ec:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ef      	bne.n	80037d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d15f      	bne.n	80038be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d110      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003804:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800380c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6892      	ldr	r2, [r2, #8]
 8003814:	0211      	lsls	r1, r2, #8
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68d2      	ldr	r2, [r2, #12]
 800381a:	06d2      	lsls	r2, r2, #27
 800381c:	430a      	orrs	r2, r1
 800381e:	492a      	ldr	r1, [pc, #168]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	610b      	str	r3, [r1, #16]
 8003824:	e027      	b.n	8003876 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d112      	bne.n	8003852 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003834:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6892      	ldr	r2, [r2, #8]
 800383c:	0211      	lsls	r1, r2, #8
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6912      	ldr	r2, [r2, #16]
 8003842:	0852      	lsrs	r2, r2, #1
 8003844:	3a01      	subs	r2, #1
 8003846:	0552      	lsls	r2, r2, #21
 8003848:	430a      	orrs	r2, r1
 800384a:	491f      	ldr	r1, [pc, #124]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	610b      	str	r3, [r1, #16]
 8003850:	e011      	b.n	8003876 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800385a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6892      	ldr	r2, [r2, #8]
 8003862:	0211      	lsls	r1, r2, #8
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6952      	ldr	r2, [r2, #20]
 8003868:	0852      	lsrs	r2, r2, #1
 800386a:	3a01      	subs	r2, #1
 800386c:	0652      	lsls	r2, r2, #25
 800386e:	430a      	orrs	r2, r1
 8003870:	4915      	ldr	r1, [pc, #84]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003872:	4313      	orrs	r3, r2
 8003874:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800387c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003880:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fd fba7 	bl	8000fd4 <HAL_GetTick>
 8003886:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003888:	e009      	b.n	800389e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800388a:	f7fd fba3 	bl	8000fd4 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d902      	bls.n	800389e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	73fb      	strb	r3, [r7, #15]
          break;
 800389c:	e005      	b.n	80038aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0ef      	beq.n	800388a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	4903      	ldr	r1, [pc, #12]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000

080038cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e043      	b.n	8003966 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f001 f89e 	bl	8004a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f8b9 	bl	8003a88 <UART_SetConfig>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e022      	b.n	8003966 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fbc1 	bl	80040b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800393c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800394c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fc48 	bl	80041f4 <UART_CheckIdleState>
 8003964:	4603      	mov	r3, r0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b088      	sub	sp, #32
 8003972:	af02      	add	r7, sp, #8
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b20      	cmp	r3, #32
 800398c:	d177      	bne.n	8003a7e <HAL_UART_Transmit+0x110>
  {
    if ((pData == NULL) || (Size == 0U))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_UART_Transmit+0x2c>
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e070      	b.n	8003a80 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Transmit+0x3e>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e069      	b.n	8003a80 <HAL_UART_Transmit+0x112>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	675a      	str	r2, [r3, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2221      	movs	r2, #33	; 0x21
 80039be:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80039c2:	f7fd fb07 	bl	8000fd4 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    while (huart->TxXferCount > 0U)
 80039d8:	e034      	b.n	8003a44 <HAL_UART_Transmit+0xd6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fc4e 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_UART_Transmit+0x86>
      {
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e045      	b.n	8003a80 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fc:	d111      	bne.n	8003a22 <HAL_UART_Transmit+0xb4>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10d      	bne.n	8003a22 <HAL_UART_Transmit+0xb4>
      {
        tmp = (uint16_t *) pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	881a      	ldrh	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a16:	b292      	uxth	r2, r2
 8003a18:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	e007      	b.n	8003a32 <HAL_UART_Transmit+0xc4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	60ba      	str	r2, [r7, #8]
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b292      	uxth	r2, r2
 8003a30:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1c4      	bne.n	80039da <HAL_UART_Transmit+0x6c>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2200      	movs	r2, #0
 8003a58:	2140      	movs	r1, #64	; 0x40
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fc13 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e00a      	b.n	8003a80 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b08a      	sub	sp, #40	; 0x28
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg                     = 0x00000000U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003a96:	2310      	movs	r3, #16
 8003a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint16_t brrtemp                    = 0x0000U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	827b      	strh	r3, [r7, #18]
  uint32_t usartdiv                   = 0x00000000U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4bbb      	ldr	r3, [pc, #748]	; (8003db8 <UART_SetConfig+0x330>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4ab0      	ldr	r2, [pc, #704]	; (8003dbc <UART_SetConfig+0x334>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	4313      	orrs	r3, r2
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4aa7      	ldr	r2, [pc, #668]	; (8003dc0 <UART_SetConfig+0x338>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d126      	bne.n	8003b74 <UART_SetConfig+0xec>
 8003b26:	4ba7      	ldr	r3, [pc, #668]	; (8003dc4 <UART_SetConfig+0x33c>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d81b      	bhi.n	8003b6c <UART_SetConfig+0xe4>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0xb4>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5d 	.word	0x08003b5d
 8003b44:	08003b55 	.word	0x08003b55
 8003b48:	08003b65 	.word	0x08003b65
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e0a9      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003b54:	2302      	movs	r3, #2
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e0a5      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e0a1      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003b64:	2308      	movs	r3, #8
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6a:	e09d      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b72:	e099      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a93      	ldr	r2, [pc, #588]	; (8003dc8 <UART_SetConfig+0x340>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d138      	bne.n	8003bf0 <UART_SetConfig+0x168>
 8003b7e:	4b91      	ldr	r3, [pc, #580]	; (8003dc4 <UART_SetConfig+0x33c>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	d82d      	bhi.n	8003be8 <UART_SetConfig+0x160>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0x10c>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bc9 	.word	0x08003bc9
 8003b98:	08003be9 	.word	0x08003be9
 8003b9c:	08003be9 	.word	0x08003be9
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003bd9 	.word	0x08003bd9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003be9 	.word	0x08003be9
 8003bb0:	08003be9 	.word	0x08003be9
 8003bb4:	08003bd1 	.word	0x08003bd1
 8003bb8:	08003be9 	.word	0x08003be9
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003be9 	.word	0x08003be9
 8003bc4:	08003be1 	.word	0x08003be1
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e06b      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e067      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bde:	e063      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003be0:	2308      	movs	r3, #8
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be6:	e05f      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003be8:	2310      	movs	r3, #16
 8003bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bee:	e05b      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a75      	ldr	r2, [pc, #468]	; (8003dcc <UART_SetConfig+0x344>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d125      	bne.n	8003c46 <UART_SetConfig+0x1be>
 8003bfa:	4b72      	ldr	r3, [pc, #456]	; (8003dc4 <UART_SetConfig+0x33c>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d016      	beq.n	8003c36 <UART_SetConfig+0x1ae>
 8003c08:	2b30      	cmp	r3, #48	; 0x30
 8003c0a:	d818      	bhi.n	8003c3e <UART_SetConfig+0x1b6>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d00a      	beq.n	8003c26 <UART_SetConfig+0x19e>
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d814      	bhi.n	8003c3e <UART_SetConfig+0x1b6>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <UART_SetConfig+0x196>
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d008      	beq.n	8003c2e <UART_SetConfig+0x1a6>
 8003c1c:	e00f      	b.n	8003c3e <UART_SetConfig+0x1b6>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c24:	e040      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c26:	2302      	movs	r3, #2
 8003c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2c:	e03c      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c2e:	2304      	movs	r3, #4
 8003c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c34:	e038      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c36:	2308      	movs	r3, #8
 8003c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3c:	e034      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c3e:	2310      	movs	r3, #16
 8003c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c44:	e030      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a5c      	ldr	r2, [pc, #368]	; (8003dbc <UART_SetConfig+0x334>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d12a      	bne.n	8003ca6 <UART_SetConfig+0x21e>
 8003c50:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <UART_SetConfig+0x33c>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c5e:	d01a      	beq.n	8003c96 <UART_SetConfig+0x20e>
 8003c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c64:	d81b      	bhi.n	8003c9e <UART_SetConfig+0x216>
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6a:	d00c      	beq.n	8003c86 <UART_SetConfig+0x1fe>
 8003c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c70:	d815      	bhi.n	8003c9e <UART_SetConfig+0x216>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <UART_SetConfig+0x1f6>
 8003c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7a:	d008      	beq.n	8003c8e <UART_SetConfig+0x206>
 8003c7c:	e00f      	b.n	8003c9e <UART_SetConfig+0x216>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c84:	e010      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c86:	2302      	movs	r3, #2
 8003c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8c:	e00c      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c8e:	2304      	movs	r3, #4
 8003c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c94:	e008      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c96:	2308      	movs	r3, #8
 8003c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9c:	e004      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003c9e:	2310      	movs	r3, #16
 8003ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca4:	e000      	b.n	8003ca8 <UART_SetConfig+0x220>
 8003ca6:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a43      	ldr	r2, [pc, #268]	; (8003dbc <UART_SetConfig+0x334>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	f040 80fc 	bne.w	8003eac <UART_SetConfig+0x424>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d824      	bhi.n	8003d06 <UART_SetConfig+0x27e>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0x23c>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003d07 	.word	0x08003d07
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003d07 	.word	0x08003d07
 8003cd4:	08003cf7 	.word	0x08003cf7
 8003cd8:	08003d07 	.word	0x08003d07
 8003cdc:	08003d07 	.word	0x08003d07
 8003ce0:	08003d07 	.word	0x08003d07
 8003ce4:	08003cff 	.word	0x08003cff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7ff fa4a 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8003cec:	6178      	str	r0, [r7, #20]
#endif
        break;
 8003cee:	e00d      	b.n	8003d0c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003cf0:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <UART_SetConfig+0x348>)
 8003cf2:	617b      	str	r3, [r7, #20]
#endif
        break;
 8003cf4:	e00a      	b.n	8003d0c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003cf6:	f7ff f999 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8003cfa:	6178      	str	r0, [r7, #20]
#endif
        break;
 8003cfc:	e006      	b.n	8003d0c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d02:	617b      	str	r3, [r7, #20]
#endif
        break;
 8003d04:	e002      	b.n	8003d0c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	76fb      	strb	r3, [r7, #27]
        break;
 8003d0a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 81bf 	beq.w	8004092 <UART_SetConfig+0x60a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d305      	bcc.n	8003d30 <UART_SetConfig+0x2a8>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d902      	bls.n	8003d36 <UART_SetConfig+0x2ae>
      {
        ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	76fb      	strb	r3, [r7, #27]
 8003d34:	e1ad      	b.n	8004092 <UART_SetConfig+0x60a>
      }
      else
      {
        switch (clocksource)
 8003d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	f200 80a3 	bhi.w	8003e86 <UART_SetConfig+0x3fe>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x2c0>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003e87 	.word	0x08003e87
 8003d50:	08003dd5 	.word	0x08003dd5
 8003d54:	08003e87 	.word	0x08003e87
 8003d58:	08003e0b 	.word	0x08003e0b
 8003d5c:	08003e87 	.word	0x08003e87
 8003d60:	08003e87 	.word	0x08003e87
 8003d64:	08003e87 	.word	0x08003e87
 8003d68:	08003e57 	.word	0x08003e57
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d6c:	f7ff fa08 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	020b      	lsls	r3, r1, #8
 8003d82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d86:	0202      	lsls	r2, r0, #8
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	6849      	ldr	r1, [r1, #4]
 8003d8c:	0849      	lsrs	r1, r1, #1
 8003d8e:	4608      	mov	r0, r1
 8003d90:	f04f 0100 	mov.w	r1, #0
 8003d94:	1814      	adds	r4, r2, r0
 8003d96:	603c      	str	r4, [r7, #0]
 8003d98:	414b      	adcs	r3, r1
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003daa:	f7fc ff4d 	bl	8000c48 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4613      	mov	r3, r2
 8003db4:	61fb      	str	r3, [r7, #28]
#endif
            break;
 8003db6:	e069      	b.n	8003e8c <UART_SetConfig+0x404>
 8003db8:	efff69f3 	.word	0xefff69f3
 8003dbc:	40008000 	.word	0x40008000
 8003dc0:	40013800 	.word	0x40013800
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40004400 	.word	0x40004400
 8003dcc:	40004800 	.word	0x40004800
 8003dd0:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	48b2      	ldr	r0, [pc, #712]	; (80040ac <UART_SetConfig+0x624>)
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	eb12 0a00 	adds.w	sl, r2, r0
 8003dea:	eb43 0b01 	adc.w	fp, r3, r1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	4650      	mov	r0, sl
 8003dfa:	4659      	mov	r1, fp
 8003dfc:	f7fc ff24 	bl	8000c48 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	61fb      	str	r3, [r7, #28]
#endif
            break;
 8003e08:	e040      	b.n	8003e8c <UART_SetConfig+0x404>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e0a:	f7ff f90f 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	020b      	lsls	r3, r1, #8
 8003e20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e24:	0202      	lsls	r2, r0, #8
 8003e26:	68f9      	ldr	r1, [r7, #12]
 8003e28:	6849      	ldr	r1, [r1, #4]
 8003e2a:	0849      	lsrs	r1, r1, #1
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	eb12 0800 	adds.w	r8, r2, r0
 8003e36:	eb43 0901 	adc.w	r9, r3, r1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	4640      	mov	r0, r8
 8003e46:	4649      	mov	r1, r9
 8003e48:	f7fc fefe 	bl	8000c48 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	61fb      	str	r3, [r7, #28]
#endif
            break;
 8003e54:	e01a      	b.n	8003e8c <UART_SetConfig+0x404>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	f512 0400 	adds.w	r4, r2, #8388608	; 0x800000
 8003e66:	f143 0500 	adc.w	r5, r3, #0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f7fc fee6 	bl	8000c48 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
#endif
            break;
 8003e84:	e002      	b.n	8003e8c <UART_SetConfig+0x404>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	76fb      	strb	r3, [r7, #27]
            break;
 8003e8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e92:	d308      	bcc.n	8003ea6 <UART_SetConfig+0x41e>
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9a:	d204      	bcs.n	8003ea6 <UART_SetConfig+0x41e>
        {
          huart->Instance->BRR = usartdiv;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e0f5      	b.n	8004092 <UART_SetConfig+0x60a>
        }
        else
        {
          ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	76fb      	strb	r3, [r7, #27]
 8003eaa:	e0f2      	b.n	8004092 <UART_SetConfig+0x60a>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb4:	d17f      	bne.n	8003fb6 <UART_SetConfig+0x52e>
  {
    switch (clocksource)
 8003eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d85b      	bhi.n	8003f76 <UART_SetConfig+0x4ee>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0x43c>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003f07 	.word	0x08003f07
 8003ecc:	08003f25 	.word	0x08003f25
 8003ed0:	08003f77 	.word	0x08003f77
 8003ed4:	08003f41 	.word	0x08003f41
 8003ed8:	08003f77 	.word	0x08003f77
 8003edc:	08003f77 	.word	0x08003f77
 8003ee0:	08003f77 	.word	0x08003f77
 8003ee4:	08003f5f 	.word	0x08003f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003ee8:	f7ff f94a 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8003eec:	4603      	mov	r3, r0
 8003eee:	005a      	lsls	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	61fb      	str	r3, [r7, #28]
#endif
        break;
 8003f04:	e03a      	b.n	8003f7c <UART_SetConfig+0x4f4>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f06:	f7ff f951 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	005a      	lsls	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	61fb      	str	r3, [r7, #28]
#endif
        break;
 8003f22:	e02b      	b.n	8003f7c <UART_SetConfig+0x4f4>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003f2e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	6852      	ldr	r2, [r2, #4]
 8003f36:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	61fb      	str	r3, [r7, #28]
#endif
        break;
 8003f3e:	e01d      	b.n	8003f7c <UART_SetConfig+0x4f4>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f40:	f7ff f874 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8003f44:	4603      	mov	r3, r0
 8003f46:	005a      	lsls	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	441a      	add	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	61fb      	str	r3, [r7, #28]
#endif
        break;
 8003f5c:	e00e      	b.n	8003f7c <UART_SetConfig+0x4f4>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	61fb      	str	r3, [r7, #28]
#endif
        break;
 8003f74:	e002      	b.n	8003f7c <UART_SetConfig+0x4f4>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	76fb      	strb	r3, [r7, #27]
        break;
 8003f7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	d916      	bls.n	8003fb0 <UART_SetConfig+0x528>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f88:	d212      	bcs.n	8003fb0 <UART_SetConfig+0x528>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f023 030f 	bic.w	r3, r3, #15
 8003f92:	827b      	strh	r3, [r7, #18]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	8a7b      	ldrh	r3, [r7, #18]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	827b      	strh	r3, [r7, #18]
      huart->Instance->BRR = brrtemp;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	8a7a      	ldrh	r2, [r7, #18]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	e070      	b.n	8004092 <UART_SetConfig+0x60a>
    }
    else
    {
      ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	76fb      	strb	r3, [r7, #27]
 8003fb4:	e06d      	b.n	8004092 <UART_SetConfig+0x60a>
    }
  }
  else
  {
    switch (clocksource)
 8003fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d858      	bhi.n	8004070 <UART_SetConfig+0x5e8>
 8003fbe:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x53c>)
 8003fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08004005 	.word	0x08004005
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08004071 	.word	0x08004071
 8003fd4:	0800403d 	.word	0x0800403d
 8003fd8:	08004071 	.word	0x08004071
 8003fdc:	08004071 	.word	0x08004071
 8003fe0:	08004071 	.word	0x08004071
 8003fe4:	08004059 	.word	0x08004059
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003fe8:	f7ff f8ca 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	61fb      	str	r3, [r7, #28]
#endif
        break;
 8004002:	e038      	b.n	8004076 <UART_SetConfig+0x5ee>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004004:	f7ff f8d2 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	441a      	add	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	b29b      	uxth	r3, r3
 800401c:	61fb      	str	r3, [r7, #28]
#endif
        break;
 800401e:	e02a      	b.n	8004076 <UART_SetConfig+0x5ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800402a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	6852      	ldr	r2, [r2, #4]
 8004032:	fbb3 f3f2 	udiv	r3, r3, r2
 8004036:	b29b      	uxth	r3, r3
 8004038:	61fb      	str	r3, [r7, #28]
#endif
        break;
 800403a:	e01c      	b.n	8004076 <UART_SetConfig+0x5ee>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800403c:	f7fe fff6 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	441a      	add	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	b29b      	uxth	r3, r3
 8004054:	61fb      	str	r3, [r7, #28]
#endif
        break;
 8004056:	e00e      	b.n	8004076 <UART_SetConfig+0x5ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	085b      	lsrs	r3, r3, #1
 800405e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	b29b      	uxth	r3, r3
 800406c:	61fb      	str	r3, [r7, #28]
#endif
        break;
 800406e:	e002      	b.n	8004076 <UART_SetConfig+0x5ee>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	76fb      	strb	r3, [r7, #27]
        break;
 8004074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d908      	bls.n	800408e <UART_SetConfig+0x606>
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004082:	d204      	bcs.n	800408e <UART_SetConfig+0x606>
    {
      huart->Instance->BRR = usartdiv;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	60da      	str	r2, [r3, #12]
 800408c:	e001      	b.n	8004092 <UART_SetConfig+0x60a>
    }
    else
    {
      ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800409e:	7efb      	ldrb	r3, [r7, #27]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	f4240000 	.word	0xf4240000

080040b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ae:	d10a      	bne.n	80041c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004206:	f7fc fee5 	bl	8000fd4 <HAL_GetTick>
 800420a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d10e      	bne.n	8004238 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f82c 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e022      	b.n	800427e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d10e      	bne.n	8004264 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f816 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e00c      	b.n	800427e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004296:	e02c      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d028      	beq.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a6:	f7fc fe95 	bl	8000fd4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d21d      	bcs.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042c4:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00f      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	429a      	cmp	r2, r3
 800430e:	d0c3      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config
    */
  hadc1.Instance = ADC1;
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004324:	4a2b      	ldr	r2, [pc, #172]	; (80043d4 <MX_ADC1_Init+0xb8>)
 8004326:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004328:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <MX_ADC1_Init+0xb4>)
 800432a:	2200      	movs	r2, #0
 800432c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800432e:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004334:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004336:	2200      	movs	r2, #0
 8004338:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800433a:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <MX_ADC1_Init+0xb4>)
 800433c:	2200      	movs	r2, #0
 800433e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004340:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004342:	2204      	movs	r2, #4
 8004344:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004346:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004348:	2200      	movs	r2, #0
 800434a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800434c:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <MX_ADC1_Init+0xb4>)
 800434e:	2200      	movs	r2, #0
 8004350:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8004352:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004354:	2201      	movs	r2, #1
 8004356:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <MX_ADC1_Init+0xb4>)
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004362:	2200      	movs	r2, #0
 8004364:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004366:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004368:	2200      	movs	r2, #0
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800436c:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <MX_ADC1_Init+0xb4>)
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004374:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004376:	2200      	movs	r2, #0
 8004378:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <MX_ADC1_Init+0xb4>)
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004382:	4813      	ldr	r0, [pc, #76]	; (80043d0 <MX_ADC1_Init+0xb4>)
 8004384:	f7fd f812 	bl	80013ac <HAL_ADC_Init>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <MX_ADC1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800438e:	214b      	movs	r1, #75	; 0x4b
 8004390:	4811      	ldr	r0, [pc, #68]	; (80043d8 <MX_ADC1_Init+0xbc>)
 8004392:	f000 f99b 	bl	80046cc <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_5;
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <MX_ADC1_Init+0xc0>)
 8004398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800439a:	2306      	movs	r3, #6
 800439c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80043a2:	237f      	movs	r3, #127	; 0x7f
 80043a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80043a6:	2304      	movs	r3, #4
 80043a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043ae:	463b      	mov	r3, r7
 80043b0:	4619      	mov	r1, r3
 80043b2:	4807      	ldr	r0, [pc, #28]	; (80043d0 <MX_ADC1_Init+0xb4>)
 80043b4:	f7fd fa38 	bl	8001828 <HAL_ADC_ConfigChannel>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <MX_ADC1_Init+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 80043be:	2158      	movs	r1, #88	; 0x58
 80043c0:	4805      	ldr	r0, [pc, #20]	; (80043d8 <MX_ADC1_Init+0xbc>)
 80043c2:	f000 f983 	bl	80046cc <_Error_Handler>
  }

}
 80043c6:	bf00      	nop
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000200 	.word	0x20000200
 80043d4:	50040000 	.word	0x50040000
 80043d8:	08007648 	.word	0x08007648
 80043dc:	14f00020 	.word	0x14f00020

080043e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0f      	ldr	r2, [pc, #60]	; (800442c <HAL_ADC_MspInit+0x4c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d118      	bne.n	8004424 <HAL_ADC_MspInit+0x44>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <HAL_ADC_MspInit+0x50>)
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <HAL_ADC_MspInit+0x50>)
 80043f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_ADC_MspInit+0x50>)
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]

    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800440a:	2301      	movs	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800440e:	230b      	movs	r3, #11
 8004410:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004416:	f107 030c 	add.w	r3, r7, #12
 800441a:	4619      	mov	r1, r3
 800441c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004420:	f7fd ff92 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004424:	bf00      	nop
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	50040000 	.word	0x50040000
 8004430:	40021000 	.word	0x40021000

08004434 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <MX_GPIO_Init+0x5c>)
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	4a14      	ldr	r2, [pc, #80]	; (8004490 <MX_GPIO_Init+0x5c>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <MX_GPIO_Init+0x5c>)
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <MX_GPIO_Init+0x5c>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <MX_GPIO_Init+0x5c>)
 8004458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <MX_GPIO_Init+0x5c>)
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <MX_GPIO_Init+0x5c>)
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	4a08      	ldr	r2, [pc, #32]	; (8004490 <MX_GPIO_Init+0x5c>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <MX_GPIO_Init+0x5c>)
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]

}
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	00000000 	.word	0x00000000

08004498 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8004498:	b5b0      	push	{r4, r5, r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800449e:	f7fc fd4f 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044a2:	f000 f875 	bl	8004590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044a6:	f7ff ffc5 	bl	8004434 <MX_GPIO_Init>
  MX_ADC1_Init();
 80044aa:	f7ff ff37 	bl	800431c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80044ae:	f000 fa8d 	bl	80049cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80044b2:	217f      	movs	r1, #127	; 0x7f
 80044b4:	4832      	ldr	r0, [pc, #200]	; (8004580 <main+0xe8>)
 80044b6:	f7fd fdcb 	bl	8002050 <HAL_ADCEx_Calibration_Start>
  printf("Hello Wang.Wei\r\n");
 80044ba:	4832      	ldr	r0, [pc, #200]	; (8004584 <main+0xec>)
 80044bc:	f001 f848 	bl	8005550 <puts>
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
    HAL_ADC_Start(&hadc1);
 80044c0:	482f      	ldr	r0, [pc, #188]	; (8004580 <main+0xe8>)
 80044c2:	f7fd f8b9 	bl	8001638 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 30);    //
 80044c6:	211e      	movs	r1, #30
 80044c8:	482d      	ldr	r0, [pc, #180]	; (8004580 <main+0xe8>)
 80044ca:	f7fd f918 	bl	80016fe <HAL_ADC_PollForConversion>
    if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
 80044ce:	482c      	ldr	r0, [pc, #176]	; (8004580 <main+0xe8>)
 80044d0:	f7fd fcec 	bl	8001eac <HAL_ADC_GetState>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044de:	d1ef      	bne.n	80044c0 <main+0x28>
	{
		ADCvalue=HAL_ADC_GetValue(&hadc1);
 80044e0:	4827      	ldr	r0, [pc, #156]	; (8004580 <main+0xe8>)
 80044e2:	f7fd f994 	bl	800180e <HAL_ADC_GetValue>
 80044e6:	4603      	mov	r3, r0
 80044e8:	81fb      	strh	r3, [r7, #14]
		Voltage=ADCvalue*3.3/4096;   //2^12=4096
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fc f819 	bl	8000524 <__aeabi_i2d>
 80044f2:	a321      	add	r3, pc, #132	; (adr r3, 8004578 <main+0xe0>)
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	f7fc f87e 	bl	80005f8 <__aeabi_dmul>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <main+0xf0>)
 800450a:	f7fc f99f 	bl	800084c <__aeabi_ddiv>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	f7fc fb47 	bl	8000ba8 <__aeabi_d2f>
 800451a:	4603      	mov	r3, r0
 800451c:	60bb      	str	r3, [r7, #8]
		Rest = Voltage*10/(3.3-Voltage);
 800451e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004522:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800452a:	ee17 0a90 	vmov	r0, s15
 800452e:	f7fc f80b 	bl	8000548 <__aeabi_f2d>
 8004532:	4604      	mov	r4, r0
 8004534:	460d      	mov	r5, r1
 8004536:	68b8      	ldr	r0, [r7, #8]
 8004538:	f7fc f806 	bl	8000548 <__aeabi_f2d>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	a10d      	add	r1, pc, #52	; (adr r1, 8004578 <main+0xe0>)
 8004542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004546:	f7fb fe9f 	bl	8000288 <__aeabi_dsub>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4620      	mov	r0, r4
 8004550:	4629      	mov	r1, r5
 8004552:	f7fc f97b 	bl	800084c <__aeabi_ddiv>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	f7fc fb23 	bl	8000ba8 <__aeabi_d2f>
 8004562:	4603      	mov	r3, r0
 8004564:	607b      	str	r3, [r7, #4]
		//printf("ADCvalue:%d  Voltage:%f  Rest:%f \n",ADCvalue,Voltage,Rest);
		//HAL_Delay(200);
		printf("%f\t\r\n",Voltage);
 8004566:	68b8      	ldr	r0, [r7, #8]
 8004568:	f7fb ffee 	bl	8000548 <__aeabi_f2d>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4806      	ldr	r0, [pc, #24]	; (800458c <main+0xf4>)
 8004572:	f000 ff67 	bl	8005444 <iprintf>
    HAL_ADC_Start(&hadc1);
 8004576:	e7a3      	b.n	80044c0 <main+0x28>
 8004578:	66666666 	.word	0x66666666
 800457c:	400a6666 	.word	0x400a6666
 8004580:	20000200 	.word	0x20000200
 8004584:	08007658 	.word	0x08007658
 8004588:	40b00000 	.word	0x40b00000
 800458c:	08007668 	.word	0x08007668

08004590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b0ae      	sub	sp, #184	; 0xb8
 8004594:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 8004596:	f7fe f851 	bl	800263c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800459a:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <SystemClock_Config+0x130>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	4a47      	ldr	r2, [pc, #284]	; (80046c0 <SystemClock_Config+0x130>)
 80045a2:	f023 0318 	bic.w	r3, r3, #24
 80045a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80045aa:	2314      	movs	r3, #20
 80045ac:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80045ae:	2301      	movs	r3, #1
 80045b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80045be:	2360      	movs	r3, #96	; 0x60
 80045c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045c4:	2302      	movs	r3, #2
 80045c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 80045d6:	2328      	movs	r3, #40	; 0x28
 80045d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80045dc:	2307      	movs	r3, #7
 80045de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80045e2:	2302      	movs	r3, #2
 80045e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80045e8:	2302      	movs	r3, #2
 80045ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe f896 	bl	8002724 <HAL_RCC_OscConfig>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 80045fe:	21a4      	movs	r1, #164	; 0xa4
 8004600:	4830      	ldr	r0, [pc, #192]	; (80046c4 <SystemClock_Config+0x134>)
 8004602:	f000 f863 	bl	80046cc <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004606:	230f      	movs	r3, #15
 8004608:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800460a:	2303      	movs	r3, #3
 800460c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800460e:	2300      	movs	r3, #0
 8004610:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004612:	2300      	movs	r3, #0
 8004614:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004616:	2300      	movs	r3, #0
 8004618:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800461a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800461e:	2104      	movs	r1, #4
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe fc25 	bl	8002e70 <HAL_RCC_ClockConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <SystemClock_Config+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800462c:	21b2      	movs	r1, #178	; 0xb2
 800462e:	4825      	ldr	r0, [pc, #148]	; (80046c4 <SystemClock_Config+0x134>)
 8004630:	f000 f84c 	bl	80046cc <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8004634:	f244 0301 	movw	r3, #16385	; 0x4001
 8004638:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800463e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004642:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004644:	2301      	movs	r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004648:	2301      	movs	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 18;
 800464c:	2312      	movs	r3, #18
 800464e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004650:	2307      	movs	r3, #7
 8004652:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004654:	2302      	movs	r3, #2
 8004656:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV6;
 8004658:	2306      	movs	r3, #6
 800465a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800465c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004660:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fe17 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <SystemClock_Config+0xe8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004670:	21c1      	movs	r1, #193	; 0xc1
 8004672:	4814      	ldr	r0, [pc, #80]	; (80046c4 <SystemClock_Config+0x134>)
 8004674:	f000 f82a 	bl	80046cc <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004678:	f44f 7000 	mov.w	r0, #512	; 0x200
 800467c:	f7fd fffc 	bl	8002678 <HAL_PWREx_ControlVoltageScaling>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <SystemClock_Config+0xfe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004686:	21c8      	movs	r1, #200	; 0xc8
 8004688:	480e      	ldr	r0, [pc, #56]	; (80046c4 <SystemClock_Config+0x134>)
 800468a:	f000 f81f 	bl	80046cc <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800468e:	f7fe fd6b 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8004692:	4603      	mov	r3, r0
 8004694:	4a0c      	ldr	r2, [pc, #48]	; (80046c8 <SystemClock_Config+0x138>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fe1c 	bl	80022da <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80046a2:	2004      	movs	r0, #4
 80046a4:	f7fd fe26 	bl	80022f4 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 80046a8:	f7ff f80e 	bl	80036c8 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	f7fd fdf5 	bl	80022a2 <HAL_NVIC_SetPriority>
}
 80046b8:	bf00      	nop
 80046ba:	37b8      	adds	r7, #184	; 0xb8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08007670 	.word	0x08007670
 80046c8:	10624dd3 	.word	0x10624dd3

080046cc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80046d6:	e7fe      	b.n	80046d6 <_Error_Handler+0xa>

080046d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_MspInit+0x98>)
 80046e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e2:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_MspInit+0x98>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6613      	str	r3, [r2, #96]	; 0x60
 80046ea:	4b21      	ldr	r3, [pc, #132]	; (8004770 <HAL_MspInit+0x98>)
 80046ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <HAL_MspInit+0x98>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <HAL_MspInit+0x98>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	6593      	str	r3, [r2, #88]	; 0x58
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_MspInit+0x98>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800470e:	2003      	movs	r0, #3
 8004710:	f7fd fdbc 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004714:	2200      	movs	r2, #0
 8004716:	2100      	movs	r1, #0
 8004718:	f06f 000b 	mvn.w	r0, #11
 800471c:	f7fd fdc1 	bl	80022a2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004720:	2200      	movs	r2, #0
 8004722:	2100      	movs	r1, #0
 8004724:	f06f 000a 	mvn.w	r0, #10
 8004728:	f7fd fdbb 	bl	80022a2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800472c:	2200      	movs	r2, #0
 800472e:	2100      	movs	r1, #0
 8004730:	f06f 0009 	mvn.w	r0, #9
 8004734:	f7fd fdb5 	bl	80022a2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004738:	2200      	movs	r2, #0
 800473a:	2100      	movs	r1, #0
 800473c:	f06f 0004 	mvn.w	r0, #4
 8004740:	f7fd fdaf 	bl	80022a2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004744:	2200      	movs	r2, #0
 8004746:	2100      	movs	r1, #0
 8004748:	f06f 0003 	mvn.w	r0, #3
 800474c:	f7fd fda9 	bl	80022a2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004750:	2200      	movs	r2, #0
 8004752:	2100      	movs	r1, #0
 8004754:	f06f 0001 	mvn.w	r0, #1
 8004758:	f7fd fda3 	bl	80022a2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800475c:	2200      	movs	r2, #0
 800475e:	2100      	movs	r1, #0
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	f7fd fd9d 	bl	80022a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000

08004774 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004786:	e7fe      	b.n	8004786 <HardFault_Handler+0x4>

08004788 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800478c:	e7fe      	b.n	800478c <MemManage_Handler+0x4>

0800478e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004792:	e7fe      	b.n	8004792 <BusFault_Handler+0x4>

08004794 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004798:	e7fe      	b.n	8004798 <UsageFault_Handler+0x4>

0800479a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80047b6:	b480      	push	{r7}
 80047b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047c8:	f7fc fbf6 	bl	8000fb8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80047cc:	f7fd fdae 	bl	800232c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047d0:	bf00      	nop
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <_getpid>:
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	2301      	movs	r3, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <_kill>:
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
 80047ee:	f000 f98d 	bl	8004b0c <__errno>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2216      	movs	r2, #22
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_exit>:
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	f04f 31ff 	mov.w	r1, #4294967295
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ffe7 	bl	80047e4 <_kill>
 8004816:	e7fe      	b.n	8004816 <_exit+0x12>

08004818 <_read>:
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e00a      	b.n	8004840 <_read+0x28>
 800482a:	f3af 8000 	nop.w
 800482e:	4601      	mov	r1, r0
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	60ba      	str	r2, [r7, #8]
 8004836:	b2ca      	uxtb	r2, r1
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	3301      	adds	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	dbf0      	blt.n	800482a <_read+0x12>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <_write>:
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e009      	b.n	8004878 <_write+0x26>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	60ba      	str	r2, [r7, #8]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f911 	bl	8004a94 <__io_putchar>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	3301      	adds	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	dbf1      	blt.n	8004864 <_write+0x12>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <_close>:
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <_fstat>:
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	2300      	movs	r3, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <_isatty>:
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	2301      	movs	r3, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <_lseek>:
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	2300      	movs	r3, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <_sbrk>:
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <_sbrk+0x5c>)
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <_sbrk+0x60>)
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <_sbrk+0x64>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <_sbrk+0x22>
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <_sbrk+0x64>)
 8004912:	4a12      	ldr	r2, [pc, #72]	; (800495c <_sbrk+0x68>)
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <_sbrk+0x64>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d207      	bcs.n	8004934 <_sbrk+0x40>
 8004924:	f000 f8f2 	bl	8004b0c <__errno>
 8004928:	4603      	mov	r3, r0
 800492a:	220c      	movs	r2, #12
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	e009      	b.n	8004948 <_sbrk+0x54>
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <_sbrk+0x64>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_sbrk+0x64>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	4a05      	ldr	r2, [pc, #20]	; (8004958 <_sbrk+0x64>)
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20010000 	.word	0x20010000
 8004954:	00000400 	.word	0x00000400
 8004958:	200001f0 	.word	0x200001f0
 800495c:	200002f0 	.word	0x200002f0

08004960 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <SystemInit+0x64>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <SystemInit+0x64>)
 800496c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004974:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <SystemInit+0x68>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a13      	ldr	r2, [pc, #76]	; (80049c8 <SystemInit+0x68>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <SystemInit+0x68>)
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <SystemInit+0x68>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a0f      	ldr	r2, [pc, #60]	; (80049c8 <SystemInit+0x68>)
 800498c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004990:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004994:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <SystemInit+0x68>)
 8004998:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800499c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <SystemInit+0x68>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <SystemInit+0x68>)
 80049a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <SystemInit+0x68>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <SystemInit+0x64>)
 80049b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049b6:	609a      	str	r2, [r3, #8]
#endif
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000ed00 	.word	0xe000ed00
 80049c8:	40021000 	.word	0x40021000

080049cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80049d0:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 80049d2:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <MX_USART1_UART_Init+0x60>)
 80049d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 80049d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049e4:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049ea:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 80049f2:	220c      	movs	r2, #12
 80049f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a08:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a0e:	4806      	ldr	r0, [pc, #24]	; (8004a28 <MX_USART1_UART_Init+0x5c>)
 8004a10:	f7fe ff5c 	bl	80038cc <HAL_UART_Init>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <MX_USART1_UART_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004a1a:	2144      	movs	r1, #68	; 0x44
 8004a1c:	4804      	ldr	r0, [pc, #16]	; (8004a30 <MX_USART1_UART_Init+0x64>)
 8004a1e:	f7ff fe55 	bl	80046cc <_Error_Handler>
  }

}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000264 	.word	0x20000264
 8004a2c:	40013800 	.word	0x40013800
 8004a30:	08007680 	.word	0x08007680

08004a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <HAL_UART_MspInit+0x58>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d11d      	bne.n	8004a82 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_UART_MspInit+0x5c>)
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	4a11      	ldr	r2, [pc, #68]	; (8004a90 <HAL_UART_MspInit+0x5c>)
 8004a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a50:	6613      	str	r3, [r2, #96]	; 0x60
 8004a52:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <HAL_UART_MspInit+0x5c>)
 8004a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a64:	2302      	movs	r3, #2
 8004a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a70:	2307      	movs	r3, #7
 8004a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a74:	f107 030c 	add.w	r3, r7, #12
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a7e:	f7fd fc63 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004a82:	bf00      	nop
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40013800 	.word	0x40013800
 8004a90:	40021000 	.word	0x40021000

08004a94 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004a9c:	1d39      	adds	r1, r7, #4
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	4803      	ldr	r0, [pc, #12]	; (8004ab4 <__io_putchar+0x20>)
 8004aa6:	f7fe ff62 	bl	800396e <HAL_UART_Transmit>
  return ch;
 8004aaa:	687b      	ldr	r3, [r7, #4]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000264 	.word	0x20000264

08004ab8 <Reset_Handler>:
 8004ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af0 <LoopForever+0x2>
 8004abc:	2100      	movs	r1, #0
 8004abe:	e003      	b.n	8004ac8 <LoopCopyDataInit>

08004ac0 <CopyDataInit>:
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <LoopForever+0x6>)
 8004ac2:	585b      	ldr	r3, [r3, r1]
 8004ac4:	5043      	str	r3, [r0, r1]
 8004ac6:	3104      	adds	r1, #4

08004ac8 <LoopCopyDataInit>:
 8004ac8:	480b      	ldr	r0, [pc, #44]	; (8004af8 <LoopForever+0xa>)
 8004aca:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <LoopForever+0xe>)
 8004acc:	1842      	adds	r2, r0, r1
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d3f6      	bcc.n	8004ac0 <CopyDataInit>
 8004ad2:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <LoopForever+0x12>)
 8004ad4:	e002      	b.n	8004adc <LoopFillZerobss>

08004ad6 <FillZerobss>:
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f842 3b04 	str.w	r3, [r2], #4

08004adc <LoopFillZerobss>:
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <LoopForever+0x16>)
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d3f9      	bcc.n	8004ad6 <FillZerobss>
 8004ae2:	f7ff ff3d 	bl	8004960 <SystemInit>
 8004ae6:	f000 f817 	bl	8004b18 <__libc_init_array>
 8004aea:	f7ff fcd5 	bl	8004498 <main>

08004aee <LoopForever>:
 8004aee:	e7fe      	b.n	8004aee <LoopForever>
 8004af0:	20010000 	.word	0x20010000
 8004af4:	08007acc 	.word	0x08007acc
 8004af8:	20000000 	.word	0x20000000
 8004afc:	200001d4 	.word	0x200001d4
 8004b00:	200001d4 	.word	0x200001d4
 8004b04:	200002ec 	.word	0x200002ec

08004b08 <ADC1_IRQHandler>:
 8004b08:	e7fe      	b.n	8004b08 <ADC1_IRQHandler>
	...

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000004 	.word	0x20000004

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f002 fd7e 	bl	800762c <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08007ac4 	.word	0x08007ac4
 8004b54:	08007ac4 	.word	0x08007ac4
 8004b58:	08007ac4 	.word	0x08007ac4
 8004b5c:	08007ac8 	.word	0x08007ac8

08004b60 <memset>:
 8004b60:	4402      	add	r2, r0
 8004b62:	4603      	mov	r3, r0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d100      	bne.n	8004b6a <memset+0xa>
 8004b68:	4770      	bx	lr
 8004b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6e:	e7f9      	b.n	8004b64 <memset+0x4>

08004b70 <__cvt>:
 8004b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	ec55 4b10 	vmov	r4, r5, d0
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	460e      	mov	r6, r1
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	462b      	mov	r3, r5
 8004b80:	bfbb      	ittet	lt
 8004b82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b86:	461d      	movlt	r5, r3
 8004b88:	2300      	movge	r3, #0
 8004b8a:	232d      	movlt	r3, #45	; 0x2d
 8004b8c:	700b      	strb	r3, [r1, #0]
 8004b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b94:	4691      	mov	r9, r2
 8004b96:	f023 0820 	bic.w	r8, r3, #32
 8004b9a:	bfbc      	itt	lt
 8004b9c:	4622      	movlt	r2, r4
 8004b9e:	4614      	movlt	r4, r2
 8004ba0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ba4:	d005      	beq.n	8004bb2 <__cvt+0x42>
 8004ba6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004baa:	d100      	bne.n	8004bae <__cvt+0x3e>
 8004bac:	3601      	adds	r6, #1
 8004bae:	2102      	movs	r1, #2
 8004bb0:	e000      	b.n	8004bb4 <__cvt+0x44>
 8004bb2:	2103      	movs	r1, #3
 8004bb4:	ab03      	add	r3, sp, #12
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	ab02      	add	r3, sp, #8
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	ec45 4b10 	vmov	d0, r4, r5
 8004bc0:	4653      	mov	r3, sl
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	f000 fe18 	bl	80057f8 <_dtoa_r>
 8004bc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bcc:	4607      	mov	r7, r0
 8004bce:	d102      	bne.n	8004bd6 <__cvt+0x66>
 8004bd0:	f019 0f01 	tst.w	r9, #1
 8004bd4:	d022      	beq.n	8004c1c <__cvt+0xac>
 8004bd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bda:	eb07 0906 	add.w	r9, r7, r6
 8004bde:	d110      	bne.n	8004c02 <__cvt+0x92>
 8004be0:	783b      	ldrb	r3, [r7, #0]
 8004be2:	2b30      	cmp	r3, #48	; 0x30
 8004be4:	d10a      	bne.n	8004bfc <__cvt+0x8c>
 8004be6:	2200      	movs	r2, #0
 8004be8:	2300      	movs	r3, #0
 8004bea:	4620      	mov	r0, r4
 8004bec:	4629      	mov	r1, r5
 8004bee:	f7fb ff6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bf2:	b918      	cbnz	r0, 8004bfc <__cvt+0x8c>
 8004bf4:	f1c6 0601 	rsb	r6, r6, #1
 8004bf8:	f8ca 6000 	str.w	r6, [sl]
 8004bfc:	f8da 3000 	ldr.w	r3, [sl]
 8004c00:	4499      	add	r9, r3
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	4620      	mov	r0, r4
 8004c08:	4629      	mov	r1, r5
 8004c0a:	f7fb ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c0e:	b108      	cbz	r0, 8004c14 <__cvt+0xa4>
 8004c10:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c14:	2230      	movs	r2, #48	; 0x30
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	454b      	cmp	r3, r9
 8004c1a:	d307      	bcc.n	8004c2c <__cvt+0xbc>
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c20:	1bdb      	subs	r3, r3, r7
 8004c22:	4638      	mov	r0, r7
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	b004      	add	sp, #16
 8004c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2c:	1c59      	adds	r1, r3, #1
 8004c2e:	9103      	str	r1, [sp, #12]
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	e7f0      	b.n	8004c16 <__cvt+0xa6>

08004c34 <__exponent>:
 8004c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c36:	4603      	mov	r3, r0
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	bfb8      	it	lt
 8004c3c:	4249      	neglt	r1, r1
 8004c3e:	f803 2b02 	strb.w	r2, [r3], #2
 8004c42:	bfb4      	ite	lt
 8004c44:	222d      	movlt	r2, #45	; 0x2d
 8004c46:	222b      	movge	r2, #43	; 0x2b
 8004c48:	2909      	cmp	r1, #9
 8004c4a:	7042      	strb	r2, [r0, #1]
 8004c4c:	dd2a      	ble.n	8004ca4 <__exponent+0x70>
 8004c4e:	f10d 0407 	add.w	r4, sp, #7
 8004c52:	46a4      	mov	ip, r4
 8004c54:	270a      	movs	r7, #10
 8004c56:	46a6      	mov	lr, r4
 8004c58:	460a      	mov	r2, r1
 8004c5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c5e:	fb07 1516 	mls	r5, r7, r6, r1
 8004c62:	3530      	adds	r5, #48	; 0x30
 8004c64:	2a63      	cmp	r2, #99	; 0x63
 8004c66:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c6e:	4631      	mov	r1, r6
 8004c70:	dcf1      	bgt.n	8004c56 <__exponent+0x22>
 8004c72:	3130      	adds	r1, #48	; 0x30
 8004c74:	f1ae 0502 	sub.w	r5, lr, #2
 8004c78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c7c:	1c44      	adds	r4, r0, #1
 8004c7e:	4629      	mov	r1, r5
 8004c80:	4561      	cmp	r1, ip
 8004c82:	d30a      	bcc.n	8004c9a <__exponent+0x66>
 8004c84:	f10d 0209 	add.w	r2, sp, #9
 8004c88:	eba2 020e 	sub.w	r2, r2, lr
 8004c8c:	4565      	cmp	r5, ip
 8004c8e:	bf88      	it	hi
 8004c90:	2200      	movhi	r2, #0
 8004c92:	4413      	add	r3, r2
 8004c94:	1a18      	subs	r0, r3, r0
 8004c96:	b003      	add	sp, #12
 8004c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ca2:	e7ed      	b.n	8004c80 <__exponent+0x4c>
 8004ca4:	2330      	movs	r3, #48	; 0x30
 8004ca6:	3130      	adds	r1, #48	; 0x30
 8004ca8:	7083      	strb	r3, [r0, #2]
 8004caa:	70c1      	strb	r1, [r0, #3]
 8004cac:	1d03      	adds	r3, r0, #4
 8004cae:	e7f1      	b.n	8004c94 <__exponent+0x60>

08004cb0 <_printf_float>:
 8004cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	ed2d 8b02 	vpush	{d8}
 8004cb8:	b08d      	sub	sp, #52	; 0x34
 8004cba:	460c      	mov	r4, r1
 8004cbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	461f      	mov	r7, r3
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	f001 fd3b 	bl	8006740 <_localeconv_r>
 8004cca:	f8d0 a000 	ldr.w	sl, [r0]
 8004cce:	4650      	mov	r0, sl
 8004cd0:	f7fb fa7e 	bl	80001d0 <strlen>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	9305      	str	r3, [sp, #20]
 8004cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ce0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ce4:	3307      	adds	r3, #7
 8004ce6:	f023 0307 	bic.w	r3, r3, #7
 8004cea:	f103 0208 	add.w	r2, r3, #8
 8004cee:	f8c8 2000 	str.w	r2, [r8]
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004cfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d02:	9307      	str	r3, [sp, #28]
 8004d04:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d08:	ee08 0a10 	vmov	s16, r0
 8004d0c:	4b9f      	ldr	r3, [pc, #636]	; (8004f8c <_printf_float+0x2dc>)
 8004d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295
 8004d16:	f7fb ff09 	bl	8000b2c <__aeabi_dcmpun>
 8004d1a:	bb88      	cbnz	r0, 8004d80 <_printf_float+0xd0>
 8004d1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d20:	4b9a      	ldr	r3, [pc, #616]	; (8004f8c <_printf_float+0x2dc>)
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	f7fb fee3 	bl	8000af0 <__aeabi_dcmple>
 8004d2a:	bb48      	cbnz	r0, 8004d80 <_printf_float+0xd0>
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4640      	mov	r0, r8
 8004d32:	4649      	mov	r1, r9
 8004d34:	f7fb fed2 	bl	8000adc <__aeabi_dcmplt>
 8004d38:	b110      	cbz	r0, 8004d40 <_printf_float+0x90>
 8004d3a:	232d      	movs	r3, #45	; 0x2d
 8004d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d40:	4b93      	ldr	r3, [pc, #588]	; (8004f90 <_printf_float+0x2e0>)
 8004d42:	4894      	ldr	r0, [pc, #592]	; (8004f94 <_printf_float+0x2e4>)
 8004d44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d48:	bf94      	ite	ls
 8004d4a:	4698      	movls	r8, r3
 8004d4c:	4680      	movhi	r8, r0
 8004d4e:	2303      	movs	r3, #3
 8004d50:	6123      	str	r3, [r4, #16]
 8004d52:	9b05      	ldr	r3, [sp, #20]
 8004d54:	f023 0204 	bic.w	r2, r3, #4
 8004d58:	6022      	str	r2, [r4, #0]
 8004d5a:	f04f 0900 	mov.w	r9, #0
 8004d5e:	9700      	str	r7, [sp, #0]
 8004d60:	4633      	mov	r3, r6
 8004d62:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d64:	4621      	mov	r1, r4
 8004d66:	4628      	mov	r0, r5
 8004d68:	f000 f9d8 	bl	800511c <_printf_common>
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	f040 8090 	bne.w	8004e92 <_printf_float+0x1e2>
 8004d72:	f04f 30ff 	mov.w	r0, #4294967295
 8004d76:	b00d      	add	sp, #52	; 0x34
 8004d78:	ecbd 8b02 	vpop	{d8}
 8004d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d80:	4642      	mov	r2, r8
 8004d82:	464b      	mov	r3, r9
 8004d84:	4640      	mov	r0, r8
 8004d86:	4649      	mov	r1, r9
 8004d88:	f7fb fed0 	bl	8000b2c <__aeabi_dcmpun>
 8004d8c:	b140      	cbz	r0, 8004da0 <_printf_float+0xf0>
 8004d8e:	464b      	mov	r3, r9
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bfbc      	itt	lt
 8004d94:	232d      	movlt	r3, #45	; 0x2d
 8004d96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d9a:	487f      	ldr	r0, [pc, #508]	; (8004f98 <_printf_float+0x2e8>)
 8004d9c:	4b7f      	ldr	r3, [pc, #508]	; (8004f9c <_printf_float+0x2ec>)
 8004d9e:	e7d1      	b.n	8004d44 <_printf_float+0x94>
 8004da0:	6863      	ldr	r3, [r4, #4]
 8004da2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004da6:	9206      	str	r2, [sp, #24]
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	d13f      	bne.n	8004e2c <_printf_float+0x17c>
 8004dac:	2306      	movs	r3, #6
 8004dae:	6063      	str	r3, [r4, #4]
 8004db0:	9b05      	ldr	r3, [sp, #20]
 8004db2:	6861      	ldr	r1, [r4, #4]
 8004db4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004db8:	2300      	movs	r3, #0
 8004dba:	9303      	str	r3, [sp, #12]
 8004dbc:	ab0a      	add	r3, sp, #40	; 0x28
 8004dbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004dc2:	ab09      	add	r3, sp, #36	; 0x24
 8004dc4:	ec49 8b10 	vmov	d0, r8, r9
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6022      	str	r2, [r4, #0]
 8004dcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f7ff fecd 	bl	8004b70 <__cvt>
 8004dd6:	9b06      	ldr	r3, [sp, #24]
 8004dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dda:	2b47      	cmp	r3, #71	; 0x47
 8004ddc:	4680      	mov	r8, r0
 8004dde:	d108      	bne.n	8004df2 <_printf_float+0x142>
 8004de0:	1cc8      	adds	r0, r1, #3
 8004de2:	db02      	blt.n	8004dea <_printf_float+0x13a>
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	4299      	cmp	r1, r3
 8004de8:	dd41      	ble.n	8004e6e <_printf_float+0x1be>
 8004dea:	f1ab 0b02 	sub.w	fp, fp, #2
 8004dee:	fa5f fb8b 	uxtb.w	fp, fp
 8004df2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004df6:	d820      	bhi.n	8004e3a <_printf_float+0x18a>
 8004df8:	3901      	subs	r1, #1
 8004dfa:	465a      	mov	r2, fp
 8004dfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e00:	9109      	str	r1, [sp, #36]	; 0x24
 8004e02:	f7ff ff17 	bl	8004c34 <__exponent>
 8004e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e08:	1813      	adds	r3, r2, r0
 8004e0a:	2a01      	cmp	r2, #1
 8004e0c:	4681      	mov	r9, r0
 8004e0e:	6123      	str	r3, [r4, #16]
 8004e10:	dc02      	bgt.n	8004e18 <_printf_float+0x168>
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	07d2      	lsls	r2, r2, #31
 8004e16:	d501      	bpl.n	8004e1c <_printf_float+0x16c>
 8004e18:	3301      	adds	r3, #1
 8004e1a:	6123      	str	r3, [r4, #16]
 8004e1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d09c      	beq.n	8004d5e <_printf_float+0xae>
 8004e24:	232d      	movs	r3, #45	; 0x2d
 8004e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e2a:	e798      	b.n	8004d5e <_printf_float+0xae>
 8004e2c:	9a06      	ldr	r2, [sp, #24]
 8004e2e:	2a47      	cmp	r2, #71	; 0x47
 8004e30:	d1be      	bne.n	8004db0 <_printf_float+0x100>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1bc      	bne.n	8004db0 <_printf_float+0x100>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e7b9      	b.n	8004dae <_printf_float+0xfe>
 8004e3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e3e:	d118      	bne.n	8004e72 <_printf_float+0x1c2>
 8004e40:	2900      	cmp	r1, #0
 8004e42:	6863      	ldr	r3, [r4, #4]
 8004e44:	dd0b      	ble.n	8004e5e <_printf_float+0x1ae>
 8004e46:	6121      	str	r1, [r4, #16]
 8004e48:	b913      	cbnz	r3, 8004e50 <_printf_float+0x1a0>
 8004e4a:	6822      	ldr	r2, [r4, #0]
 8004e4c:	07d0      	lsls	r0, r2, #31
 8004e4e:	d502      	bpl.n	8004e56 <_printf_float+0x1a6>
 8004e50:	3301      	adds	r3, #1
 8004e52:	440b      	add	r3, r1
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e58:	f04f 0900 	mov.w	r9, #0
 8004e5c:	e7de      	b.n	8004e1c <_printf_float+0x16c>
 8004e5e:	b913      	cbnz	r3, 8004e66 <_printf_float+0x1b6>
 8004e60:	6822      	ldr	r2, [r4, #0]
 8004e62:	07d2      	lsls	r2, r2, #31
 8004e64:	d501      	bpl.n	8004e6a <_printf_float+0x1ba>
 8004e66:	3302      	adds	r3, #2
 8004e68:	e7f4      	b.n	8004e54 <_printf_float+0x1a4>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e7f2      	b.n	8004e54 <_printf_float+0x1a4>
 8004e6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e74:	4299      	cmp	r1, r3
 8004e76:	db05      	blt.n	8004e84 <_printf_float+0x1d4>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	6121      	str	r1, [r4, #16]
 8004e7c:	07d8      	lsls	r0, r3, #31
 8004e7e:	d5ea      	bpl.n	8004e56 <_printf_float+0x1a6>
 8004e80:	1c4b      	adds	r3, r1, #1
 8004e82:	e7e7      	b.n	8004e54 <_printf_float+0x1a4>
 8004e84:	2900      	cmp	r1, #0
 8004e86:	bfd4      	ite	le
 8004e88:	f1c1 0202 	rsble	r2, r1, #2
 8004e8c:	2201      	movgt	r2, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	e7e0      	b.n	8004e54 <_printf_float+0x1a4>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	055a      	lsls	r2, r3, #21
 8004e96:	d407      	bmi.n	8004ea8 <_printf_float+0x1f8>
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	4642      	mov	r2, r8
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b8      	blx	r7
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d12c      	bne.n	8004f00 <_printf_float+0x250>
 8004ea6:	e764      	b.n	8004d72 <_printf_float+0xc2>
 8004ea8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004eac:	f240 80e0 	bls.w	8005070 <_printf_float+0x3c0>
 8004eb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f7fb fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d034      	beq.n	8004f2a <_printf_float+0x27a>
 8004ec0:	4a37      	ldr	r2, [pc, #220]	; (8004fa0 <_printf_float+0x2f0>)
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	47b8      	blx	r7
 8004eca:	3001      	adds	r0, #1
 8004ecc:	f43f af51 	beq.w	8004d72 <_printf_float+0xc2>
 8004ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	db02      	blt.n	8004ede <_printf_float+0x22e>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	07d8      	lsls	r0, r3, #31
 8004edc:	d510      	bpl.n	8004f00 <_printf_float+0x250>
 8004ede:	ee18 3a10 	vmov	r3, s16
 8004ee2:	4652      	mov	r2, sl
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	47b8      	blx	r7
 8004eea:	3001      	adds	r0, #1
 8004eec:	f43f af41 	beq.w	8004d72 <_printf_float+0xc2>
 8004ef0:	f04f 0800 	mov.w	r8, #0
 8004ef4:	f104 091a 	add.w	r9, r4, #26
 8004ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004efa:	3b01      	subs	r3, #1
 8004efc:	4543      	cmp	r3, r8
 8004efe:	dc09      	bgt.n	8004f14 <_printf_float+0x264>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	079b      	lsls	r3, r3, #30
 8004f04:	f100 8105 	bmi.w	8005112 <_printf_float+0x462>
 8004f08:	68e0      	ldr	r0, [r4, #12]
 8004f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f0c:	4298      	cmp	r0, r3
 8004f0e:	bfb8      	it	lt
 8004f10:	4618      	movlt	r0, r3
 8004f12:	e730      	b.n	8004d76 <_printf_float+0xc6>
 8004f14:	2301      	movs	r3, #1
 8004f16:	464a      	mov	r2, r9
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	f43f af27 	beq.w	8004d72 <_printf_float+0xc2>
 8004f24:	f108 0801 	add.w	r8, r8, #1
 8004f28:	e7e6      	b.n	8004ef8 <_printf_float+0x248>
 8004f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	dc39      	bgt.n	8004fa4 <_printf_float+0x2f4>
 8004f30:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <_printf_float+0x2f0>)
 8004f32:	2301      	movs	r3, #1
 8004f34:	4631      	mov	r1, r6
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	f43f af19 	beq.w	8004d72 <_printf_float+0xc2>
 8004f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d102      	bne.n	8004f4e <_printf_float+0x29e>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	07d9      	lsls	r1, r3, #31
 8004f4c:	d5d8      	bpl.n	8004f00 <_printf_float+0x250>
 8004f4e:	ee18 3a10 	vmov	r3, s16
 8004f52:	4652      	mov	r2, sl
 8004f54:	4631      	mov	r1, r6
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f43f af09 	beq.w	8004d72 <_printf_float+0xc2>
 8004f60:	f04f 0900 	mov.w	r9, #0
 8004f64:	f104 0a1a 	add.w	sl, r4, #26
 8004f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6a:	425b      	negs	r3, r3
 8004f6c:	454b      	cmp	r3, r9
 8004f6e:	dc01      	bgt.n	8004f74 <_printf_float+0x2c4>
 8004f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f72:	e792      	b.n	8004e9a <_printf_float+0x1ea>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4652      	mov	r2, sl
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	47b8      	blx	r7
 8004f7e:	3001      	adds	r0, #1
 8004f80:	f43f aef7 	beq.w	8004d72 <_printf_float+0xc2>
 8004f84:	f109 0901 	add.w	r9, r9, #1
 8004f88:	e7ee      	b.n	8004f68 <_printf_float+0x2b8>
 8004f8a:	bf00      	nop
 8004f8c:	7fefffff 	.word	0x7fefffff
 8004f90:	080076dc 	.word	0x080076dc
 8004f94:	080076e0 	.word	0x080076e0
 8004f98:	080076e8 	.word	0x080076e8
 8004f9c:	080076e4 	.word	0x080076e4
 8004fa0:	080076ec 	.word	0x080076ec
 8004fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bfa8      	it	ge
 8004fac:	461a      	movge	r2, r3
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	4691      	mov	r9, r2
 8004fb2:	dc37      	bgt.n	8005024 <_printf_float+0x374>
 8004fb4:	f04f 0b00 	mov.w	fp, #0
 8004fb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fbc:	f104 021a 	add.w	r2, r4, #26
 8004fc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fc2:	9305      	str	r3, [sp, #20]
 8004fc4:	eba3 0309 	sub.w	r3, r3, r9
 8004fc8:	455b      	cmp	r3, fp
 8004fca:	dc33      	bgt.n	8005034 <_printf_float+0x384>
 8004fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	db3b      	blt.n	800504c <_printf_float+0x39c>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	07da      	lsls	r2, r3, #31
 8004fd8:	d438      	bmi.n	800504c <_printf_float+0x39c>
 8004fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fdc:	9b05      	ldr	r3, [sp, #20]
 8004fde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	eba2 0901 	sub.w	r9, r2, r1
 8004fe6:	4599      	cmp	r9, r3
 8004fe8:	bfa8      	it	ge
 8004fea:	4699      	movge	r9, r3
 8004fec:	f1b9 0f00 	cmp.w	r9, #0
 8004ff0:	dc35      	bgt.n	800505e <_printf_float+0x3ae>
 8004ff2:	f04f 0800 	mov.w	r8, #0
 8004ff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ffa:	f104 0a1a 	add.w	sl, r4, #26
 8004ffe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	eba3 0309 	sub.w	r3, r3, r9
 8005008:	4543      	cmp	r3, r8
 800500a:	f77f af79 	ble.w	8004f00 <_printf_float+0x250>
 800500e:	2301      	movs	r3, #1
 8005010:	4652      	mov	r2, sl
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	f43f aeaa 	beq.w	8004d72 <_printf_float+0xc2>
 800501e:	f108 0801 	add.w	r8, r8, #1
 8005022:	e7ec      	b.n	8004ffe <_printf_float+0x34e>
 8005024:	4613      	mov	r3, r2
 8005026:	4631      	mov	r1, r6
 8005028:	4642      	mov	r2, r8
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	d1c0      	bne.n	8004fb4 <_printf_float+0x304>
 8005032:	e69e      	b.n	8004d72 <_printf_float+0xc2>
 8005034:	2301      	movs	r3, #1
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	9205      	str	r2, [sp, #20]
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	f43f ae97 	beq.w	8004d72 <_printf_float+0xc2>
 8005044:	9a05      	ldr	r2, [sp, #20]
 8005046:	f10b 0b01 	add.w	fp, fp, #1
 800504a:	e7b9      	b.n	8004fc0 <_printf_float+0x310>
 800504c:	ee18 3a10 	vmov	r3, s16
 8005050:	4652      	mov	r2, sl
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	d1be      	bne.n	8004fda <_printf_float+0x32a>
 800505c:	e689      	b.n	8004d72 <_printf_float+0xc2>
 800505e:	9a05      	ldr	r2, [sp, #20]
 8005060:	464b      	mov	r3, r9
 8005062:	4442      	add	r2, r8
 8005064:	4631      	mov	r1, r6
 8005066:	4628      	mov	r0, r5
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	d1c1      	bne.n	8004ff2 <_printf_float+0x342>
 800506e:	e680      	b.n	8004d72 <_printf_float+0xc2>
 8005070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005072:	2a01      	cmp	r2, #1
 8005074:	dc01      	bgt.n	800507a <_printf_float+0x3ca>
 8005076:	07db      	lsls	r3, r3, #31
 8005078:	d538      	bpl.n	80050ec <_printf_float+0x43c>
 800507a:	2301      	movs	r3, #1
 800507c:	4642      	mov	r2, r8
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f ae74 	beq.w	8004d72 <_printf_float+0xc2>
 800508a:	ee18 3a10 	vmov	r3, s16
 800508e:	4652      	mov	r2, sl
 8005090:	4631      	mov	r1, r6
 8005092:	4628      	mov	r0, r5
 8005094:	47b8      	blx	r7
 8005096:	3001      	adds	r0, #1
 8005098:	f43f ae6b 	beq.w	8004d72 <_printf_float+0xc2>
 800509c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050a0:	2200      	movs	r2, #0
 80050a2:	2300      	movs	r3, #0
 80050a4:	f7fb fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80050a8:	b9d8      	cbnz	r0, 80050e2 <_printf_float+0x432>
 80050aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ac:	f108 0201 	add.w	r2, r8, #1
 80050b0:	3b01      	subs	r3, #1
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	d10e      	bne.n	80050da <_printf_float+0x42a>
 80050bc:	e659      	b.n	8004d72 <_printf_float+0xc2>
 80050be:	2301      	movs	r3, #1
 80050c0:	4652      	mov	r2, sl
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	f43f ae52 	beq.w	8004d72 <_printf_float+0xc2>
 80050ce:	f108 0801 	add.w	r8, r8, #1
 80050d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d4:	3b01      	subs	r3, #1
 80050d6:	4543      	cmp	r3, r8
 80050d8:	dcf1      	bgt.n	80050be <_printf_float+0x40e>
 80050da:	464b      	mov	r3, r9
 80050dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050e0:	e6dc      	b.n	8004e9c <_printf_float+0x1ec>
 80050e2:	f04f 0800 	mov.w	r8, #0
 80050e6:	f104 0a1a 	add.w	sl, r4, #26
 80050ea:	e7f2      	b.n	80050d2 <_printf_float+0x422>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4642      	mov	r2, r8
 80050f0:	e7df      	b.n	80050b2 <_printf_float+0x402>
 80050f2:	2301      	movs	r3, #1
 80050f4:	464a      	mov	r2, r9
 80050f6:	4631      	mov	r1, r6
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b8      	blx	r7
 80050fc:	3001      	adds	r0, #1
 80050fe:	f43f ae38 	beq.w	8004d72 <_printf_float+0xc2>
 8005102:	f108 0801 	add.w	r8, r8, #1
 8005106:	68e3      	ldr	r3, [r4, #12]
 8005108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800510a:	1a5b      	subs	r3, r3, r1
 800510c:	4543      	cmp	r3, r8
 800510e:	dcf0      	bgt.n	80050f2 <_printf_float+0x442>
 8005110:	e6fa      	b.n	8004f08 <_printf_float+0x258>
 8005112:	f04f 0800 	mov.w	r8, #0
 8005116:	f104 0919 	add.w	r9, r4, #25
 800511a:	e7f4      	b.n	8005106 <_printf_float+0x456>

0800511c <_printf_common>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	4616      	mov	r6, r2
 8005122:	4699      	mov	r9, r3
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	690b      	ldr	r3, [r1, #16]
 8005128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800512c:	4293      	cmp	r3, r2
 800512e:	bfb8      	it	lt
 8005130:	4613      	movlt	r3, r2
 8005132:	6033      	str	r3, [r6, #0]
 8005134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005138:	4607      	mov	r7, r0
 800513a:	460c      	mov	r4, r1
 800513c:	b10a      	cbz	r2, 8005142 <_printf_common+0x26>
 800513e:	3301      	adds	r3, #1
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	0699      	lsls	r1, r3, #26
 8005146:	bf42      	ittt	mi
 8005148:	6833      	ldrmi	r3, [r6, #0]
 800514a:	3302      	addmi	r3, #2
 800514c:	6033      	strmi	r3, [r6, #0]
 800514e:	6825      	ldr	r5, [r4, #0]
 8005150:	f015 0506 	ands.w	r5, r5, #6
 8005154:	d106      	bne.n	8005164 <_printf_common+0x48>
 8005156:	f104 0a19 	add.w	sl, r4, #25
 800515a:	68e3      	ldr	r3, [r4, #12]
 800515c:	6832      	ldr	r2, [r6, #0]
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	42ab      	cmp	r3, r5
 8005162:	dc26      	bgt.n	80051b2 <_printf_common+0x96>
 8005164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005168:	1e13      	subs	r3, r2, #0
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	bf18      	it	ne
 800516e:	2301      	movne	r3, #1
 8005170:	0692      	lsls	r2, r2, #26
 8005172:	d42b      	bmi.n	80051cc <_printf_common+0xb0>
 8005174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005178:	4649      	mov	r1, r9
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d01e      	beq.n	80051c0 <_printf_common+0xa4>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	68e5      	ldr	r5, [r4, #12]
 8005186:	6832      	ldr	r2, [r6, #0]
 8005188:	f003 0306 	and.w	r3, r3, #6
 800518c:	2b04      	cmp	r3, #4
 800518e:	bf08      	it	eq
 8005190:	1aad      	subeq	r5, r5, r2
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	6922      	ldr	r2, [r4, #16]
 8005196:	bf0c      	ite	eq
 8005198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800519c:	2500      	movne	r5, #0
 800519e:	4293      	cmp	r3, r2
 80051a0:	bfc4      	itt	gt
 80051a2:	1a9b      	subgt	r3, r3, r2
 80051a4:	18ed      	addgt	r5, r5, r3
 80051a6:	2600      	movs	r6, #0
 80051a8:	341a      	adds	r4, #26
 80051aa:	42b5      	cmp	r5, r6
 80051ac:	d11a      	bne.n	80051e4 <_printf_common+0xc8>
 80051ae:	2000      	movs	r0, #0
 80051b0:	e008      	b.n	80051c4 <_printf_common+0xa8>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4652      	mov	r2, sl
 80051b6:	4649      	mov	r1, r9
 80051b8:	4638      	mov	r0, r7
 80051ba:	47c0      	blx	r8
 80051bc:	3001      	adds	r0, #1
 80051be:	d103      	bne.n	80051c8 <_printf_common+0xac>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c8:	3501      	adds	r5, #1
 80051ca:	e7c6      	b.n	800515a <_printf_common+0x3e>
 80051cc:	18e1      	adds	r1, r4, r3
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	2030      	movs	r0, #48	; 0x30
 80051d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d6:	4422      	add	r2, r4
 80051d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051e0:	3302      	adds	r3, #2
 80051e2:	e7c7      	b.n	8005174 <_printf_common+0x58>
 80051e4:	2301      	movs	r3, #1
 80051e6:	4622      	mov	r2, r4
 80051e8:	4649      	mov	r1, r9
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c0      	blx	r8
 80051ee:	3001      	adds	r0, #1
 80051f0:	d0e6      	beq.n	80051c0 <_printf_common+0xa4>
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7d9      	b.n	80051aa <_printf_common+0x8e>
	...

080051f8 <_printf_i>:
 80051f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	460c      	mov	r4, r1
 80051fe:	4691      	mov	r9, r2
 8005200:	7e27      	ldrb	r7, [r4, #24]
 8005202:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005204:	2f78      	cmp	r7, #120	; 0x78
 8005206:	4680      	mov	r8, r0
 8005208:	469a      	mov	sl, r3
 800520a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800520e:	d807      	bhi.n	8005220 <_printf_i+0x28>
 8005210:	2f62      	cmp	r7, #98	; 0x62
 8005212:	d80a      	bhi.n	800522a <_printf_i+0x32>
 8005214:	2f00      	cmp	r7, #0
 8005216:	f000 80d8 	beq.w	80053ca <_printf_i+0x1d2>
 800521a:	2f58      	cmp	r7, #88	; 0x58
 800521c:	f000 80a3 	beq.w	8005366 <_printf_i+0x16e>
 8005220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005228:	e03a      	b.n	80052a0 <_printf_i+0xa8>
 800522a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800522e:	2b15      	cmp	r3, #21
 8005230:	d8f6      	bhi.n	8005220 <_printf_i+0x28>
 8005232:	a001      	add	r0, pc, #4	; (adr r0, 8005238 <_printf_i+0x40>)
 8005234:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005238:	08005291 	.word	0x08005291
 800523c:	080052a5 	.word	0x080052a5
 8005240:	08005221 	.word	0x08005221
 8005244:	08005221 	.word	0x08005221
 8005248:	08005221 	.word	0x08005221
 800524c:	08005221 	.word	0x08005221
 8005250:	080052a5 	.word	0x080052a5
 8005254:	08005221 	.word	0x08005221
 8005258:	08005221 	.word	0x08005221
 800525c:	08005221 	.word	0x08005221
 8005260:	08005221 	.word	0x08005221
 8005264:	080053b1 	.word	0x080053b1
 8005268:	080052d5 	.word	0x080052d5
 800526c:	08005393 	.word	0x08005393
 8005270:	08005221 	.word	0x08005221
 8005274:	08005221 	.word	0x08005221
 8005278:	080053d3 	.word	0x080053d3
 800527c:	08005221 	.word	0x08005221
 8005280:	080052d5 	.word	0x080052d5
 8005284:	08005221 	.word	0x08005221
 8005288:	08005221 	.word	0x08005221
 800528c:	0800539b 	.word	0x0800539b
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	600a      	str	r2, [r1, #0]
 8005298:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800529c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0a3      	b.n	80053ec <_printf_i+0x1f4>
 80052a4:	6825      	ldr	r5, [r4, #0]
 80052a6:	6808      	ldr	r0, [r1, #0]
 80052a8:	062e      	lsls	r6, r5, #24
 80052aa:	f100 0304 	add.w	r3, r0, #4
 80052ae:	d50a      	bpl.n	80052c6 <_printf_i+0xce>
 80052b0:	6805      	ldr	r5, [r0, #0]
 80052b2:	600b      	str	r3, [r1, #0]
 80052b4:	2d00      	cmp	r5, #0
 80052b6:	da03      	bge.n	80052c0 <_printf_i+0xc8>
 80052b8:	232d      	movs	r3, #45	; 0x2d
 80052ba:	426d      	negs	r5, r5
 80052bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c0:	485e      	ldr	r0, [pc, #376]	; (800543c <_printf_i+0x244>)
 80052c2:	230a      	movs	r3, #10
 80052c4:	e019      	b.n	80052fa <_printf_i+0x102>
 80052c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052ca:	6805      	ldr	r5, [r0, #0]
 80052cc:	600b      	str	r3, [r1, #0]
 80052ce:	bf18      	it	ne
 80052d0:	b22d      	sxthne	r5, r5
 80052d2:	e7ef      	b.n	80052b4 <_printf_i+0xbc>
 80052d4:	680b      	ldr	r3, [r1, #0]
 80052d6:	6825      	ldr	r5, [r4, #0]
 80052d8:	1d18      	adds	r0, r3, #4
 80052da:	6008      	str	r0, [r1, #0]
 80052dc:	0628      	lsls	r0, r5, #24
 80052de:	d501      	bpl.n	80052e4 <_printf_i+0xec>
 80052e0:	681d      	ldr	r5, [r3, #0]
 80052e2:	e002      	b.n	80052ea <_printf_i+0xf2>
 80052e4:	0669      	lsls	r1, r5, #25
 80052e6:	d5fb      	bpl.n	80052e0 <_printf_i+0xe8>
 80052e8:	881d      	ldrh	r5, [r3, #0]
 80052ea:	4854      	ldr	r0, [pc, #336]	; (800543c <_printf_i+0x244>)
 80052ec:	2f6f      	cmp	r7, #111	; 0x6f
 80052ee:	bf0c      	ite	eq
 80052f0:	2308      	moveq	r3, #8
 80052f2:	230a      	movne	r3, #10
 80052f4:	2100      	movs	r1, #0
 80052f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052fa:	6866      	ldr	r6, [r4, #4]
 80052fc:	60a6      	str	r6, [r4, #8]
 80052fe:	2e00      	cmp	r6, #0
 8005300:	bfa2      	ittt	ge
 8005302:	6821      	ldrge	r1, [r4, #0]
 8005304:	f021 0104 	bicge.w	r1, r1, #4
 8005308:	6021      	strge	r1, [r4, #0]
 800530a:	b90d      	cbnz	r5, 8005310 <_printf_i+0x118>
 800530c:	2e00      	cmp	r6, #0
 800530e:	d04d      	beq.n	80053ac <_printf_i+0x1b4>
 8005310:	4616      	mov	r6, r2
 8005312:	fbb5 f1f3 	udiv	r1, r5, r3
 8005316:	fb03 5711 	mls	r7, r3, r1, r5
 800531a:	5dc7      	ldrb	r7, [r0, r7]
 800531c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005320:	462f      	mov	r7, r5
 8005322:	42bb      	cmp	r3, r7
 8005324:	460d      	mov	r5, r1
 8005326:	d9f4      	bls.n	8005312 <_printf_i+0x11a>
 8005328:	2b08      	cmp	r3, #8
 800532a:	d10b      	bne.n	8005344 <_printf_i+0x14c>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	07df      	lsls	r7, r3, #31
 8005330:	d508      	bpl.n	8005344 <_printf_i+0x14c>
 8005332:	6923      	ldr	r3, [r4, #16]
 8005334:	6861      	ldr	r1, [r4, #4]
 8005336:	4299      	cmp	r1, r3
 8005338:	bfde      	ittt	le
 800533a:	2330      	movle	r3, #48	; 0x30
 800533c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005340:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005344:	1b92      	subs	r2, r2, r6
 8005346:	6122      	str	r2, [r4, #16]
 8005348:	f8cd a000 	str.w	sl, [sp]
 800534c:	464b      	mov	r3, r9
 800534e:	aa03      	add	r2, sp, #12
 8005350:	4621      	mov	r1, r4
 8005352:	4640      	mov	r0, r8
 8005354:	f7ff fee2 	bl	800511c <_printf_common>
 8005358:	3001      	adds	r0, #1
 800535a:	d14c      	bne.n	80053f6 <_printf_i+0x1fe>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	b004      	add	sp, #16
 8005362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005366:	4835      	ldr	r0, [pc, #212]	; (800543c <_printf_i+0x244>)
 8005368:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	680e      	ldr	r6, [r1, #0]
 8005370:	061f      	lsls	r7, r3, #24
 8005372:	f856 5b04 	ldr.w	r5, [r6], #4
 8005376:	600e      	str	r6, [r1, #0]
 8005378:	d514      	bpl.n	80053a4 <_printf_i+0x1ac>
 800537a:	07d9      	lsls	r1, r3, #31
 800537c:	bf44      	itt	mi
 800537e:	f043 0320 	orrmi.w	r3, r3, #32
 8005382:	6023      	strmi	r3, [r4, #0]
 8005384:	b91d      	cbnz	r5, 800538e <_printf_i+0x196>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	f023 0320 	bic.w	r3, r3, #32
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	2310      	movs	r3, #16
 8005390:	e7b0      	b.n	80052f4 <_printf_i+0xfc>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	f043 0320 	orr.w	r3, r3, #32
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	2378      	movs	r3, #120	; 0x78
 800539c:	4828      	ldr	r0, [pc, #160]	; (8005440 <_printf_i+0x248>)
 800539e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053a2:	e7e3      	b.n	800536c <_printf_i+0x174>
 80053a4:	065e      	lsls	r6, r3, #25
 80053a6:	bf48      	it	mi
 80053a8:	b2ad      	uxthmi	r5, r5
 80053aa:	e7e6      	b.n	800537a <_printf_i+0x182>
 80053ac:	4616      	mov	r6, r2
 80053ae:	e7bb      	b.n	8005328 <_printf_i+0x130>
 80053b0:	680b      	ldr	r3, [r1, #0]
 80053b2:	6826      	ldr	r6, [r4, #0]
 80053b4:	6960      	ldr	r0, [r4, #20]
 80053b6:	1d1d      	adds	r5, r3, #4
 80053b8:	600d      	str	r5, [r1, #0]
 80053ba:	0635      	lsls	r5, r6, #24
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	d501      	bpl.n	80053c4 <_printf_i+0x1cc>
 80053c0:	6018      	str	r0, [r3, #0]
 80053c2:	e002      	b.n	80053ca <_printf_i+0x1d2>
 80053c4:	0671      	lsls	r1, r6, #25
 80053c6:	d5fb      	bpl.n	80053c0 <_printf_i+0x1c8>
 80053c8:	8018      	strh	r0, [r3, #0]
 80053ca:	2300      	movs	r3, #0
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	4616      	mov	r6, r2
 80053d0:	e7ba      	b.n	8005348 <_printf_i+0x150>
 80053d2:	680b      	ldr	r3, [r1, #0]
 80053d4:	1d1a      	adds	r2, r3, #4
 80053d6:	600a      	str	r2, [r1, #0]
 80053d8:	681e      	ldr	r6, [r3, #0]
 80053da:	6862      	ldr	r2, [r4, #4]
 80053dc:	2100      	movs	r1, #0
 80053de:	4630      	mov	r0, r6
 80053e0:	f7fa fefe 	bl	80001e0 <memchr>
 80053e4:	b108      	cbz	r0, 80053ea <_printf_i+0x1f2>
 80053e6:	1b80      	subs	r0, r0, r6
 80053e8:	6060      	str	r0, [r4, #4]
 80053ea:	6863      	ldr	r3, [r4, #4]
 80053ec:	6123      	str	r3, [r4, #16]
 80053ee:	2300      	movs	r3, #0
 80053f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f4:	e7a8      	b.n	8005348 <_printf_i+0x150>
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	4632      	mov	r2, r6
 80053fa:	4649      	mov	r1, r9
 80053fc:	4640      	mov	r0, r8
 80053fe:	47d0      	blx	sl
 8005400:	3001      	adds	r0, #1
 8005402:	d0ab      	beq.n	800535c <_printf_i+0x164>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	079b      	lsls	r3, r3, #30
 8005408:	d413      	bmi.n	8005432 <_printf_i+0x23a>
 800540a:	68e0      	ldr	r0, [r4, #12]
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	4298      	cmp	r0, r3
 8005410:	bfb8      	it	lt
 8005412:	4618      	movlt	r0, r3
 8005414:	e7a4      	b.n	8005360 <_printf_i+0x168>
 8005416:	2301      	movs	r3, #1
 8005418:	4632      	mov	r2, r6
 800541a:	4649      	mov	r1, r9
 800541c:	4640      	mov	r0, r8
 800541e:	47d0      	blx	sl
 8005420:	3001      	adds	r0, #1
 8005422:	d09b      	beq.n	800535c <_printf_i+0x164>
 8005424:	3501      	adds	r5, #1
 8005426:	68e3      	ldr	r3, [r4, #12]
 8005428:	9903      	ldr	r1, [sp, #12]
 800542a:	1a5b      	subs	r3, r3, r1
 800542c:	42ab      	cmp	r3, r5
 800542e:	dcf2      	bgt.n	8005416 <_printf_i+0x21e>
 8005430:	e7eb      	b.n	800540a <_printf_i+0x212>
 8005432:	2500      	movs	r5, #0
 8005434:	f104 0619 	add.w	r6, r4, #25
 8005438:	e7f5      	b.n	8005426 <_printf_i+0x22e>
 800543a:	bf00      	nop
 800543c:	080076ee 	.word	0x080076ee
 8005440:	080076ff 	.word	0x080076ff

08005444 <iprintf>:
 8005444:	b40f      	push	{r0, r1, r2, r3}
 8005446:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <iprintf+0x2c>)
 8005448:	b513      	push	{r0, r1, r4, lr}
 800544a:	681c      	ldr	r4, [r3, #0]
 800544c:	b124      	cbz	r4, 8005458 <iprintf+0x14>
 800544e:	69a3      	ldr	r3, [r4, #24]
 8005450:	b913      	cbnz	r3, 8005458 <iprintf+0x14>
 8005452:	4620      	mov	r0, r4
 8005454:	f001 f8d6 	bl	8006604 <__sinit>
 8005458:	ab05      	add	r3, sp, #20
 800545a:	9a04      	ldr	r2, [sp, #16]
 800545c:	68a1      	ldr	r1, [r4, #8]
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	4620      	mov	r0, r4
 8005462:	f001 fe51 	bl	8007108 <_vfiprintf_r>
 8005466:	b002      	add	sp, #8
 8005468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800546c:	b004      	add	sp, #16
 800546e:	4770      	bx	lr
 8005470:	20000004 	.word	0x20000004

08005474 <_puts_r>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	460e      	mov	r6, r1
 8005478:	4605      	mov	r5, r0
 800547a:	b118      	cbz	r0, 8005484 <_puts_r+0x10>
 800547c:	6983      	ldr	r3, [r0, #24]
 800547e:	b90b      	cbnz	r3, 8005484 <_puts_r+0x10>
 8005480:	f001 f8c0 	bl	8006604 <__sinit>
 8005484:	69ab      	ldr	r3, [r5, #24]
 8005486:	68ac      	ldr	r4, [r5, #8]
 8005488:	b913      	cbnz	r3, 8005490 <_puts_r+0x1c>
 800548a:	4628      	mov	r0, r5
 800548c:	f001 f8ba 	bl	8006604 <__sinit>
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <_puts_r+0xd0>)
 8005492:	429c      	cmp	r4, r3
 8005494:	d120      	bne.n	80054d8 <_puts_r+0x64>
 8005496:	686c      	ldr	r4, [r5, #4]
 8005498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800549a:	07db      	lsls	r3, r3, #31
 800549c:	d405      	bmi.n	80054aa <_puts_r+0x36>
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	0598      	lsls	r0, r3, #22
 80054a2:	d402      	bmi.n	80054aa <_puts_r+0x36>
 80054a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a6:	f001 f950 	bl	800674a <__retarget_lock_acquire_recursive>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	0719      	lsls	r1, r3, #28
 80054ae:	d51d      	bpl.n	80054ec <_puts_r+0x78>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	b1db      	cbz	r3, 80054ec <_puts_r+0x78>
 80054b4:	3e01      	subs	r6, #1
 80054b6:	68a3      	ldr	r3, [r4, #8]
 80054b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054bc:	3b01      	subs	r3, #1
 80054be:	60a3      	str	r3, [r4, #8]
 80054c0:	bb39      	cbnz	r1, 8005512 <_puts_r+0x9e>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da38      	bge.n	8005538 <_puts_r+0xc4>
 80054c6:	4622      	mov	r2, r4
 80054c8:	210a      	movs	r1, #10
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f848 	bl	8005560 <__swbuf_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d011      	beq.n	80054f8 <_puts_r+0x84>
 80054d4:	250a      	movs	r5, #10
 80054d6:	e011      	b.n	80054fc <_puts_r+0x88>
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <_puts_r+0xd4>)
 80054da:	429c      	cmp	r4, r3
 80054dc:	d101      	bne.n	80054e2 <_puts_r+0x6e>
 80054de:	68ac      	ldr	r4, [r5, #8]
 80054e0:	e7da      	b.n	8005498 <_puts_r+0x24>
 80054e2:	4b1a      	ldr	r3, [pc, #104]	; (800554c <_puts_r+0xd8>)
 80054e4:	429c      	cmp	r4, r3
 80054e6:	bf08      	it	eq
 80054e8:	68ec      	ldreq	r4, [r5, #12]
 80054ea:	e7d5      	b.n	8005498 <_puts_r+0x24>
 80054ec:	4621      	mov	r1, r4
 80054ee:	4628      	mov	r0, r5
 80054f0:	f000 f888 	bl	8005604 <__swsetup_r>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d0dd      	beq.n	80054b4 <_puts_r+0x40>
 80054f8:	f04f 35ff 	mov.w	r5, #4294967295
 80054fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054fe:	07da      	lsls	r2, r3, #31
 8005500:	d405      	bmi.n	800550e <_puts_r+0x9a>
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	059b      	lsls	r3, r3, #22
 8005506:	d402      	bmi.n	800550e <_puts_r+0x9a>
 8005508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800550a:	f001 f91f 	bl	800674c <__retarget_lock_release_recursive>
 800550e:	4628      	mov	r0, r5
 8005510:	bd70      	pop	{r4, r5, r6, pc}
 8005512:	2b00      	cmp	r3, #0
 8005514:	da04      	bge.n	8005520 <_puts_r+0xac>
 8005516:	69a2      	ldr	r2, [r4, #24]
 8005518:	429a      	cmp	r2, r3
 800551a:	dc06      	bgt.n	800552a <_puts_r+0xb6>
 800551c:	290a      	cmp	r1, #10
 800551e:	d004      	beq.n	800552a <_puts_r+0xb6>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	6022      	str	r2, [r4, #0]
 8005526:	7019      	strb	r1, [r3, #0]
 8005528:	e7c5      	b.n	80054b6 <_puts_r+0x42>
 800552a:	4622      	mov	r2, r4
 800552c:	4628      	mov	r0, r5
 800552e:	f000 f817 	bl	8005560 <__swbuf_r>
 8005532:	3001      	adds	r0, #1
 8005534:	d1bf      	bne.n	80054b6 <_puts_r+0x42>
 8005536:	e7df      	b.n	80054f8 <_puts_r+0x84>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	250a      	movs	r5, #10
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	701d      	strb	r5, [r3, #0]
 8005542:	e7db      	b.n	80054fc <_puts_r+0x88>
 8005544:	080077c4 	.word	0x080077c4
 8005548:	080077e4 	.word	0x080077e4
 800554c:	080077a4 	.word	0x080077a4

08005550 <puts>:
 8005550:	4b02      	ldr	r3, [pc, #8]	; (800555c <puts+0xc>)
 8005552:	4601      	mov	r1, r0
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	f7ff bf8d 	b.w	8005474 <_puts_r>
 800555a:	bf00      	nop
 800555c:	20000004 	.word	0x20000004

08005560 <__swbuf_r>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	460e      	mov	r6, r1
 8005564:	4614      	mov	r4, r2
 8005566:	4605      	mov	r5, r0
 8005568:	b118      	cbz	r0, 8005572 <__swbuf_r+0x12>
 800556a:	6983      	ldr	r3, [r0, #24]
 800556c:	b90b      	cbnz	r3, 8005572 <__swbuf_r+0x12>
 800556e:	f001 f849 	bl	8006604 <__sinit>
 8005572:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <__swbuf_r+0x98>)
 8005574:	429c      	cmp	r4, r3
 8005576:	d12b      	bne.n	80055d0 <__swbuf_r+0x70>
 8005578:	686c      	ldr	r4, [r5, #4]
 800557a:	69a3      	ldr	r3, [r4, #24]
 800557c:	60a3      	str	r3, [r4, #8]
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	071a      	lsls	r2, r3, #28
 8005582:	d52f      	bpl.n	80055e4 <__swbuf_r+0x84>
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	b36b      	cbz	r3, 80055e4 <__swbuf_r+0x84>
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	6820      	ldr	r0, [r4, #0]
 800558c:	1ac0      	subs	r0, r0, r3
 800558e:	6963      	ldr	r3, [r4, #20]
 8005590:	b2f6      	uxtb	r6, r6
 8005592:	4283      	cmp	r3, r0
 8005594:	4637      	mov	r7, r6
 8005596:	dc04      	bgt.n	80055a2 <__swbuf_r+0x42>
 8005598:	4621      	mov	r1, r4
 800559a:	4628      	mov	r0, r5
 800559c:	f000 ff9e 	bl	80064dc <_fflush_r>
 80055a0:	bb30      	cbnz	r0, 80055f0 <__swbuf_r+0x90>
 80055a2:	68a3      	ldr	r3, [r4, #8]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	60a3      	str	r3, [r4, #8]
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	6022      	str	r2, [r4, #0]
 80055ae:	701e      	strb	r6, [r3, #0]
 80055b0:	6963      	ldr	r3, [r4, #20]
 80055b2:	3001      	adds	r0, #1
 80055b4:	4283      	cmp	r3, r0
 80055b6:	d004      	beq.n	80055c2 <__swbuf_r+0x62>
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	07db      	lsls	r3, r3, #31
 80055bc:	d506      	bpl.n	80055cc <__swbuf_r+0x6c>
 80055be:	2e0a      	cmp	r6, #10
 80055c0:	d104      	bne.n	80055cc <__swbuf_r+0x6c>
 80055c2:	4621      	mov	r1, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 ff89 	bl	80064dc <_fflush_r>
 80055ca:	b988      	cbnz	r0, 80055f0 <__swbuf_r+0x90>
 80055cc:	4638      	mov	r0, r7
 80055ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <__swbuf_r+0x9c>)
 80055d2:	429c      	cmp	r4, r3
 80055d4:	d101      	bne.n	80055da <__swbuf_r+0x7a>
 80055d6:	68ac      	ldr	r4, [r5, #8]
 80055d8:	e7cf      	b.n	800557a <__swbuf_r+0x1a>
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <__swbuf_r+0xa0>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	bf08      	it	eq
 80055e0:	68ec      	ldreq	r4, [r5, #12]
 80055e2:	e7ca      	b.n	800557a <__swbuf_r+0x1a>
 80055e4:	4621      	mov	r1, r4
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 f80c 	bl	8005604 <__swsetup_r>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d0cb      	beq.n	8005588 <__swbuf_r+0x28>
 80055f0:	f04f 37ff 	mov.w	r7, #4294967295
 80055f4:	e7ea      	b.n	80055cc <__swbuf_r+0x6c>
 80055f6:	bf00      	nop
 80055f8:	080077c4 	.word	0x080077c4
 80055fc:	080077e4 	.word	0x080077e4
 8005600:	080077a4 	.word	0x080077a4

08005604 <__swsetup_r>:
 8005604:	4b32      	ldr	r3, [pc, #200]	; (80056d0 <__swsetup_r+0xcc>)
 8005606:	b570      	push	{r4, r5, r6, lr}
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	4606      	mov	r6, r0
 800560c:	460c      	mov	r4, r1
 800560e:	b125      	cbz	r5, 800561a <__swsetup_r+0x16>
 8005610:	69ab      	ldr	r3, [r5, #24]
 8005612:	b913      	cbnz	r3, 800561a <__swsetup_r+0x16>
 8005614:	4628      	mov	r0, r5
 8005616:	f000 fff5 	bl	8006604 <__sinit>
 800561a:	4b2e      	ldr	r3, [pc, #184]	; (80056d4 <__swsetup_r+0xd0>)
 800561c:	429c      	cmp	r4, r3
 800561e:	d10f      	bne.n	8005640 <__swsetup_r+0x3c>
 8005620:	686c      	ldr	r4, [r5, #4]
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005628:	0719      	lsls	r1, r3, #28
 800562a:	d42c      	bmi.n	8005686 <__swsetup_r+0x82>
 800562c:	06dd      	lsls	r5, r3, #27
 800562e:	d411      	bmi.n	8005654 <__swsetup_r+0x50>
 8005630:	2309      	movs	r3, #9
 8005632:	6033      	str	r3, [r6, #0]
 8005634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005638:	81a3      	strh	r3, [r4, #12]
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	e03e      	b.n	80056be <__swsetup_r+0xba>
 8005640:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <__swsetup_r+0xd4>)
 8005642:	429c      	cmp	r4, r3
 8005644:	d101      	bne.n	800564a <__swsetup_r+0x46>
 8005646:	68ac      	ldr	r4, [r5, #8]
 8005648:	e7eb      	b.n	8005622 <__swsetup_r+0x1e>
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <__swsetup_r+0xd8>)
 800564c:	429c      	cmp	r4, r3
 800564e:	bf08      	it	eq
 8005650:	68ec      	ldreq	r4, [r5, #12]
 8005652:	e7e6      	b.n	8005622 <__swsetup_r+0x1e>
 8005654:	0758      	lsls	r0, r3, #29
 8005656:	d512      	bpl.n	800567e <__swsetup_r+0x7a>
 8005658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800565a:	b141      	cbz	r1, 800566e <__swsetup_r+0x6a>
 800565c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005660:	4299      	cmp	r1, r3
 8005662:	d002      	beq.n	800566a <__swsetup_r+0x66>
 8005664:	4630      	mov	r0, r6
 8005666:	f001 fc7b 	bl	8006f60 <_free_r>
 800566a:	2300      	movs	r3, #0
 800566c:	6363      	str	r3, [r4, #52]	; 0x34
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005674:	81a3      	strh	r3, [r4, #12]
 8005676:	2300      	movs	r3, #0
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f043 0308 	orr.w	r3, r3, #8
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	b94b      	cbnz	r3, 800569e <__swsetup_r+0x9a>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005694:	d003      	beq.n	800569e <__swsetup_r+0x9a>
 8005696:	4621      	mov	r1, r4
 8005698:	4630      	mov	r0, r6
 800569a:	f001 f87d 	bl	8006798 <__smakebuf_r>
 800569e:	89a0      	ldrh	r0, [r4, #12]
 80056a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056a4:	f010 0301 	ands.w	r3, r0, #1
 80056a8:	d00a      	beq.n	80056c0 <__swsetup_r+0xbc>
 80056aa:	2300      	movs	r3, #0
 80056ac:	60a3      	str	r3, [r4, #8]
 80056ae:	6963      	ldr	r3, [r4, #20]
 80056b0:	425b      	negs	r3, r3
 80056b2:	61a3      	str	r3, [r4, #24]
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	b943      	cbnz	r3, 80056ca <__swsetup_r+0xc6>
 80056b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056bc:	d1ba      	bne.n	8005634 <__swsetup_r+0x30>
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	0781      	lsls	r1, r0, #30
 80056c2:	bf58      	it	pl
 80056c4:	6963      	ldrpl	r3, [r4, #20]
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	e7f4      	b.n	80056b4 <__swsetup_r+0xb0>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e7f7      	b.n	80056be <__swsetup_r+0xba>
 80056ce:	bf00      	nop
 80056d0:	20000004 	.word	0x20000004
 80056d4:	080077c4 	.word	0x080077c4
 80056d8:	080077e4 	.word	0x080077e4
 80056dc:	080077a4 	.word	0x080077a4

080056e0 <quorem>:
 80056e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	6903      	ldr	r3, [r0, #16]
 80056e6:	690c      	ldr	r4, [r1, #16]
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	4607      	mov	r7, r0
 80056ec:	f2c0 8081 	blt.w	80057f2 <quorem+0x112>
 80056f0:	3c01      	subs	r4, #1
 80056f2:	f101 0814 	add.w	r8, r1, #20
 80056f6:	f100 0514 	add.w	r5, r0, #20
 80056fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005708:	3301      	adds	r3, #1
 800570a:	429a      	cmp	r2, r3
 800570c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005710:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005714:	fbb2 f6f3 	udiv	r6, r2, r3
 8005718:	d331      	bcc.n	800577e <quorem+0x9e>
 800571a:	f04f 0e00 	mov.w	lr, #0
 800571e:	4640      	mov	r0, r8
 8005720:	46ac      	mov	ip, r5
 8005722:	46f2      	mov	sl, lr
 8005724:	f850 2b04 	ldr.w	r2, [r0], #4
 8005728:	b293      	uxth	r3, r2
 800572a:	fb06 e303 	mla	r3, r6, r3, lr
 800572e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005732:	b29b      	uxth	r3, r3
 8005734:	ebaa 0303 	sub.w	r3, sl, r3
 8005738:	0c12      	lsrs	r2, r2, #16
 800573a:	f8dc a000 	ldr.w	sl, [ip]
 800573e:	fb06 e202 	mla	r2, r6, r2, lr
 8005742:	fa13 f38a 	uxtah	r3, r3, sl
 8005746:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800574a:	fa1f fa82 	uxth.w	sl, r2
 800574e:	f8dc 2000 	ldr.w	r2, [ip]
 8005752:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005756:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800575a:	b29b      	uxth	r3, r3
 800575c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005760:	4581      	cmp	r9, r0
 8005762:	f84c 3b04 	str.w	r3, [ip], #4
 8005766:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800576a:	d2db      	bcs.n	8005724 <quorem+0x44>
 800576c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005770:	b92b      	cbnz	r3, 800577e <quorem+0x9e>
 8005772:	9b01      	ldr	r3, [sp, #4]
 8005774:	3b04      	subs	r3, #4
 8005776:	429d      	cmp	r5, r3
 8005778:	461a      	mov	r2, r3
 800577a:	d32e      	bcc.n	80057da <quorem+0xfa>
 800577c:	613c      	str	r4, [r7, #16]
 800577e:	4638      	mov	r0, r7
 8005780:	f001 fade 	bl	8006d40 <__mcmp>
 8005784:	2800      	cmp	r0, #0
 8005786:	db24      	blt.n	80057d2 <quorem+0xf2>
 8005788:	3601      	adds	r6, #1
 800578a:	4628      	mov	r0, r5
 800578c:	f04f 0c00 	mov.w	ip, #0
 8005790:	f858 2b04 	ldr.w	r2, [r8], #4
 8005794:	f8d0 e000 	ldr.w	lr, [r0]
 8005798:	b293      	uxth	r3, r2
 800579a:	ebac 0303 	sub.w	r3, ip, r3
 800579e:	0c12      	lsrs	r2, r2, #16
 80057a0:	fa13 f38e 	uxtah	r3, r3, lr
 80057a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80057a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057b2:	45c1      	cmp	r9, r8
 80057b4:	f840 3b04 	str.w	r3, [r0], #4
 80057b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057bc:	d2e8      	bcs.n	8005790 <quorem+0xb0>
 80057be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057c6:	b922      	cbnz	r2, 80057d2 <quorem+0xf2>
 80057c8:	3b04      	subs	r3, #4
 80057ca:	429d      	cmp	r5, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	d30a      	bcc.n	80057e6 <quorem+0x106>
 80057d0:	613c      	str	r4, [r7, #16]
 80057d2:	4630      	mov	r0, r6
 80057d4:	b003      	add	sp, #12
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	3b04      	subs	r3, #4
 80057de:	2a00      	cmp	r2, #0
 80057e0:	d1cc      	bne.n	800577c <quorem+0x9c>
 80057e2:	3c01      	subs	r4, #1
 80057e4:	e7c7      	b.n	8005776 <quorem+0x96>
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	3b04      	subs	r3, #4
 80057ea:	2a00      	cmp	r2, #0
 80057ec:	d1f0      	bne.n	80057d0 <quorem+0xf0>
 80057ee:	3c01      	subs	r4, #1
 80057f0:	e7eb      	b.n	80057ca <quorem+0xea>
 80057f2:	2000      	movs	r0, #0
 80057f4:	e7ee      	b.n	80057d4 <quorem+0xf4>
	...

080057f8 <_dtoa_r>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	ed2d 8b02 	vpush	{d8}
 8005800:	ec57 6b10 	vmov	r6, r7, d0
 8005804:	b095      	sub	sp, #84	; 0x54
 8005806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800580c:	9105      	str	r1, [sp, #20]
 800580e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005812:	4604      	mov	r4, r0
 8005814:	9209      	str	r2, [sp, #36]	; 0x24
 8005816:	930f      	str	r3, [sp, #60]	; 0x3c
 8005818:	b975      	cbnz	r5, 8005838 <_dtoa_r+0x40>
 800581a:	2010      	movs	r0, #16
 800581c:	f000 fffc 	bl	8006818 <malloc>
 8005820:	4602      	mov	r2, r0
 8005822:	6260      	str	r0, [r4, #36]	; 0x24
 8005824:	b920      	cbnz	r0, 8005830 <_dtoa_r+0x38>
 8005826:	4bb2      	ldr	r3, [pc, #712]	; (8005af0 <_dtoa_r+0x2f8>)
 8005828:	21ea      	movs	r1, #234	; 0xea
 800582a:	48b2      	ldr	r0, [pc, #712]	; (8005af4 <_dtoa_r+0x2fc>)
 800582c:	f001 fe02 	bl	8007434 <__assert_func>
 8005830:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005834:	6005      	str	r5, [r0, #0]
 8005836:	60c5      	str	r5, [r0, #12]
 8005838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	b151      	cbz	r1, 8005854 <_dtoa_r+0x5c>
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	604a      	str	r2, [r1, #4]
 8005842:	2301      	movs	r3, #1
 8005844:	4093      	lsls	r3, r2
 8005846:	608b      	str	r3, [r1, #8]
 8005848:	4620      	mov	r0, r4
 800584a:	f001 f83b 	bl	80068c4 <_Bfree>
 800584e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	1e3b      	subs	r3, r7, #0
 8005856:	bfb9      	ittee	lt
 8005858:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800585c:	9303      	strlt	r3, [sp, #12]
 800585e:	2300      	movge	r3, #0
 8005860:	f8c8 3000 	strge.w	r3, [r8]
 8005864:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005868:	4ba3      	ldr	r3, [pc, #652]	; (8005af8 <_dtoa_r+0x300>)
 800586a:	bfbc      	itt	lt
 800586c:	2201      	movlt	r2, #1
 800586e:	f8c8 2000 	strlt.w	r2, [r8]
 8005872:	ea33 0309 	bics.w	r3, r3, r9
 8005876:	d11b      	bne.n	80058b0 <_dtoa_r+0xb8>
 8005878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800587a:	f242 730f 	movw	r3, #9999	; 0x270f
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005884:	4333      	orrs	r3, r6
 8005886:	f000 857a 	beq.w	800637e <_dtoa_r+0xb86>
 800588a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800588c:	b963      	cbnz	r3, 80058a8 <_dtoa_r+0xb0>
 800588e:	4b9b      	ldr	r3, [pc, #620]	; (8005afc <_dtoa_r+0x304>)
 8005890:	e024      	b.n	80058dc <_dtoa_r+0xe4>
 8005892:	4b9b      	ldr	r3, [pc, #620]	; (8005b00 <_dtoa_r+0x308>)
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	3308      	adds	r3, #8
 8005898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	9800      	ldr	r0, [sp, #0]
 800589e:	b015      	add	sp, #84	; 0x54
 80058a0:	ecbd 8b02 	vpop	{d8}
 80058a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a8:	4b94      	ldr	r3, [pc, #592]	; (8005afc <_dtoa_r+0x304>)
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	3303      	adds	r3, #3
 80058ae:	e7f3      	b.n	8005898 <_dtoa_r+0xa0>
 80058b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	ec51 0b17 	vmov	r0, r1, d7
 80058ba:	2300      	movs	r3, #0
 80058bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80058c0:	f7fb f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80058c4:	4680      	mov	r8, r0
 80058c6:	b158      	cbz	r0, 80058e0 <_dtoa_r+0xe8>
 80058c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058ca:	2301      	movs	r3, #1
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8551 	beq.w	8006378 <_dtoa_r+0xb80>
 80058d6:	488b      	ldr	r0, [pc, #556]	; (8005b04 <_dtoa_r+0x30c>)
 80058d8:	6018      	str	r0, [r3, #0]
 80058da:	1e43      	subs	r3, r0, #1
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	e7dd      	b.n	800589c <_dtoa_r+0xa4>
 80058e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80058e4:	aa12      	add	r2, sp, #72	; 0x48
 80058e6:	a913      	add	r1, sp, #76	; 0x4c
 80058e8:	4620      	mov	r0, r4
 80058ea:	f001 facd 	bl	8006e88 <__d2b>
 80058ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058f2:	4683      	mov	fp, r0
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	d07c      	beq.n	80059f2 <_dtoa_r+0x1fa>
 80058f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80058fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005902:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005906:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800590a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800590e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005912:	4b7d      	ldr	r3, [pc, #500]	; (8005b08 <_dtoa_r+0x310>)
 8005914:	2200      	movs	r2, #0
 8005916:	4630      	mov	r0, r6
 8005918:	4639      	mov	r1, r7
 800591a:	f7fa fcb5 	bl	8000288 <__aeabi_dsub>
 800591e:	a36e      	add	r3, pc, #440	; (adr r3, 8005ad8 <_dtoa_r+0x2e0>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fe68 	bl	80005f8 <__aeabi_dmul>
 8005928:	a36d      	add	r3, pc, #436	; (adr r3, 8005ae0 <_dtoa_r+0x2e8>)
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f7fa fcad 	bl	800028c <__adddf3>
 8005932:	4606      	mov	r6, r0
 8005934:	4628      	mov	r0, r5
 8005936:	460f      	mov	r7, r1
 8005938:	f7fa fdf4 	bl	8000524 <__aeabi_i2d>
 800593c:	a36a      	add	r3, pc, #424	; (adr r3, 8005ae8 <_dtoa_r+0x2f0>)
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f7fa fe59 	bl	80005f8 <__aeabi_dmul>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4630      	mov	r0, r6
 800594c:	4639      	mov	r1, r7
 800594e:	f7fa fc9d 	bl	800028c <__adddf3>
 8005952:	4606      	mov	r6, r0
 8005954:	460f      	mov	r7, r1
 8005956:	f7fb f8ff 	bl	8000b58 <__aeabi_d2iz>
 800595a:	2200      	movs	r2, #0
 800595c:	4682      	mov	sl, r0
 800595e:	2300      	movs	r3, #0
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	f7fb f8ba 	bl	8000adc <__aeabi_dcmplt>
 8005968:	b148      	cbz	r0, 800597e <_dtoa_r+0x186>
 800596a:	4650      	mov	r0, sl
 800596c:	f7fa fdda 	bl	8000524 <__aeabi_i2d>
 8005970:	4632      	mov	r2, r6
 8005972:	463b      	mov	r3, r7
 8005974:	f7fb f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005978:	b908      	cbnz	r0, 800597e <_dtoa_r+0x186>
 800597a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800597e:	f1ba 0f16 	cmp.w	sl, #22
 8005982:	d854      	bhi.n	8005a2e <_dtoa_r+0x236>
 8005984:	4b61      	ldr	r3, [pc, #388]	; (8005b0c <_dtoa_r+0x314>)
 8005986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005992:	f7fb f8a3 	bl	8000adc <__aeabi_dcmplt>
 8005996:	2800      	cmp	r0, #0
 8005998:	d04b      	beq.n	8005a32 <_dtoa_r+0x23a>
 800599a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800599e:	2300      	movs	r3, #0
 80059a0:	930e      	str	r3, [sp, #56]	; 0x38
 80059a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059a4:	1b5d      	subs	r5, r3, r5
 80059a6:	1e6b      	subs	r3, r5, #1
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	bf43      	ittte	mi
 80059ac:	2300      	movmi	r3, #0
 80059ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80059b2:	9304      	strmi	r3, [sp, #16]
 80059b4:	f04f 0800 	movpl.w	r8, #0
 80059b8:	f1ba 0f00 	cmp.w	sl, #0
 80059bc:	db3b      	blt.n	8005a36 <_dtoa_r+0x23e>
 80059be:	9b04      	ldr	r3, [sp, #16]
 80059c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80059c4:	4453      	add	r3, sl
 80059c6:	9304      	str	r3, [sp, #16]
 80059c8:	2300      	movs	r3, #0
 80059ca:	9306      	str	r3, [sp, #24]
 80059cc:	9b05      	ldr	r3, [sp, #20]
 80059ce:	2b09      	cmp	r3, #9
 80059d0:	d869      	bhi.n	8005aa6 <_dtoa_r+0x2ae>
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	bfc4      	itt	gt
 80059d6:	3b04      	subgt	r3, #4
 80059d8:	9305      	strgt	r3, [sp, #20]
 80059da:	9b05      	ldr	r3, [sp, #20]
 80059dc:	f1a3 0302 	sub.w	r3, r3, #2
 80059e0:	bfcc      	ite	gt
 80059e2:	2500      	movgt	r5, #0
 80059e4:	2501      	movle	r5, #1
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d869      	bhi.n	8005abe <_dtoa_r+0x2c6>
 80059ea:	e8df f003 	tbb	[pc, r3]
 80059ee:	4e2c      	.short	0x4e2c
 80059f0:	5a4c      	.short	0x5a4c
 80059f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80059f6:	441d      	add	r5, r3
 80059f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	bfc1      	itttt	gt
 8005a00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005a08:	fa09 f303 	lslgt.w	r3, r9, r3
 8005a0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a10:	bfda      	itte	le
 8005a12:	f1c3 0320 	rsble	r3, r3, #32
 8005a16:	fa06 f003 	lslle.w	r0, r6, r3
 8005a1a:	4318      	orrgt	r0, r3
 8005a1c:	f7fa fd72 	bl	8000504 <__aeabi_ui2d>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4606      	mov	r6, r0
 8005a24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005a28:	3d01      	subs	r5, #1
 8005a2a:	9310      	str	r3, [sp, #64]	; 0x40
 8005a2c:	e771      	b.n	8005912 <_dtoa_r+0x11a>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e7b6      	b.n	80059a0 <_dtoa_r+0x1a8>
 8005a32:	900e      	str	r0, [sp, #56]	; 0x38
 8005a34:	e7b5      	b.n	80059a2 <_dtoa_r+0x1aa>
 8005a36:	f1ca 0300 	rsb	r3, sl, #0
 8005a3a:	9306      	str	r3, [sp, #24]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	eba8 080a 	sub.w	r8, r8, sl
 8005a42:	930d      	str	r3, [sp, #52]	; 0x34
 8005a44:	e7c2      	b.n	80059cc <_dtoa_r+0x1d4>
 8005a46:	2300      	movs	r3, #0
 8005a48:	9308      	str	r3, [sp, #32]
 8005a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	dc39      	bgt.n	8005ac4 <_dtoa_r+0x2cc>
 8005a50:	f04f 0901 	mov.w	r9, #1
 8005a54:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a58:	464b      	mov	r3, r9
 8005a5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005a60:	2200      	movs	r2, #0
 8005a62:	6042      	str	r2, [r0, #4]
 8005a64:	2204      	movs	r2, #4
 8005a66:	f102 0614 	add.w	r6, r2, #20
 8005a6a:	429e      	cmp	r6, r3
 8005a6c:	6841      	ldr	r1, [r0, #4]
 8005a6e:	d92f      	bls.n	8005ad0 <_dtoa_r+0x2d8>
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 fee7 	bl	8006844 <_Balloc>
 8005a76:	9000      	str	r0, [sp, #0]
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d14b      	bne.n	8005b14 <_dtoa_r+0x31c>
 8005a7c:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <_dtoa_r+0x318>)
 8005a7e:	4602      	mov	r2, r0
 8005a80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a84:	e6d1      	b.n	800582a <_dtoa_r+0x32>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e7de      	b.n	8005a48 <_dtoa_r+0x250>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9308      	str	r3, [sp, #32]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	eb0a 0903 	add.w	r9, sl, r3
 8005a94:	f109 0301 	add.w	r3, r9, #1
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	bfb8      	it	lt
 8005a9e:	2301      	movlt	r3, #1
 8005aa0:	e7dd      	b.n	8005a5e <_dtoa_r+0x266>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7f2      	b.n	8005a8c <_dtoa_r+0x294>
 8005aa6:	2501      	movs	r5, #1
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9305      	str	r3, [sp, #20]
 8005aac:	9508      	str	r5, [sp, #32]
 8005aae:	f04f 39ff 	mov.w	r9, #4294967295
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ab8:	2312      	movs	r3, #18
 8005aba:	9209      	str	r2, [sp, #36]	; 0x24
 8005abc:	e7cf      	b.n	8005a5e <_dtoa_r+0x266>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	9308      	str	r3, [sp, #32]
 8005ac2:	e7f4      	b.n	8005aae <_dtoa_r+0x2b6>
 8005ac4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005ac8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005acc:	464b      	mov	r3, r9
 8005ace:	e7c6      	b.n	8005a5e <_dtoa_r+0x266>
 8005ad0:	3101      	adds	r1, #1
 8005ad2:	6041      	str	r1, [r0, #4]
 8005ad4:	0052      	lsls	r2, r2, #1
 8005ad6:	e7c6      	b.n	8005a66 <_dtoa_r+0x26e>
 8005ad8:	636f4361 	.word	0x636f4361
 8005adc:	3fd287a7 	.word	0x3fd287a7
 8005ae0:	8b60c8b3 	.word	0x8b60c8b3
 8005ae4:	3fc68a28 	.word	0x3fc68a28
 8005ae8:	509f79fb 	.word	0x509f79fb
 8005aec:	3fd34413 	.word	0x3fd34413
 8005af0:	0800771d 	.word	0x0800771d
 8005af4:	08007734 	.word	0x08007734
 8005af8:	7ff00000 	.word	0x7ff00000
 8005afc:	08007719 	.word	0x08007719
 8005b00:	08007710 	.word	0x08007710
 8005b04:	080076ed 	.word	0x080076ed
 8005b08:	3ff80000 	.word	0x3ff80000
 8005b0c:	08007890 	.word	0x08007890
 8005b10:	08007793 	.word	0x08007793
 8005b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b16:	9a00      	ldr	r2, [sp, #0]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	2b0e      	cmp	r3, #14
 8005b1e:	f200 80ad 	bhi.w	8005c7c <_dtoa_r+0x484>
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	f000 80aa 	beq.w	8005c7c <_dtoa_r+0x484>
 8005b28:	f1ba 0f00 	cmp.w	sl, #0
 8005b2c:	dd36      	ble.n	8005b9c <_dtoa_r+0x3a4>
 8005b2e:	4ac3      	ldr	r2, [pc, #780]	; (8005e3c <_dtoa_r+0x644>)
 8005b30:	f00a 030f 	and.w	r3, sl, #15
 8005b34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b38:	ed93 7b00 	vldr	d7, [r3]
 8005b3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005b40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005b44:	eeb0 8a47 	vmov.f32	s16, s14
 8005b48:	eef0 8a67 	vmov.f32	s17, s15
 8005b4c:	d016      	beq.n	8005b7c <_dtoa_r+0x384>
 8005b4e:	4bbc      	ldr	r3, [pc, #752]	; (8005e40 <_dtoa_r+0x648>)
 8005b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b58:	f7fa fe78 	bl	800084c <__aeabi_ddiv>
 8005b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b60:	f007 070f 	and.w	r7, r7, #15
 8005b64:	2503      	movs	r5, #3
 8005b66:	4eb6      	ldr	r6, [pc, #728]	; (8005e40 <_dtoa_r+0x648>)
 8005b68:	b957      	cbnz	r7, 8005b80 <_dtoa_r+0x388>
 8005b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b6e:	ec53 2b18 	vmov	r2, r3, d8
 8005b72:	f7fa fe6b 	bl	800084c <__aeabi_ddiv>
 8005b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b7a:	e029      	b.n	8005bd0 <_dtoa_r+0x3d8>
 8005b7c:	2502      	movs	r5, #2
 8005b7e:	e7f2      	b.n	8005b66 <_dtoa_r+0x36e>
 8005b80:	07f9      	lsls	r1, r7, #31
 8005b82:	d508      	bpl.n	8005b96 <_dtoa_r+0x39e>
 8005b84:	ec51 0b18 	vmov	r0, r1, d8
 8005b88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b8c:	f7fa fd34 	bl	80005f8 <__aeabi_dmul>
 8005b90:	ec41 0b18 	vmov	d8, r0, r1
 8005b94:	3501      	adds	r5, #1
 8005b96:	107f      	asrs	r7, r7, #1
 8005b98:	3608      	adds	r6, #8
 8005b9a:	e7e5      	b.n	8005b68 <_dtoa_r+0x370>
 8005b9c:	f000 80a6 	beq.w	8005cec <_dtoa_r+0x4f4>
 8005ba0:	f1ca 0600 	rsb	r6, sl, #0
 8005ba4:	4ba5      	ldr	r3, [pc, #660]	; (8005e3c <_dtoa_r+0x644>)
 8005ba6:	4fa6      	ldr	r7, [pc, #664]	; (8005e40 <_dtoa_r+0x648>)
 8005ba8:	f006 020f 	and.w	r2, r6, #15
 8005bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bb8:	f7fa fd1e 	bl	80005f8 <__aeabi_dmul>
 8005bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc0:	1136      	asrs	r6, r6, #4
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2502      	movs	r5, #2
 8005bc6:	2e00      	cmp	r6, #0
 8005bc8:	f040 8085 	bne.w	8005cd6 <_dtoa_r+0x4de>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1d2      	bne.n	8005b76 <_dtoa_r+0x37e>
 8005bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 808c 	beq.w	8005cf0 <_dtoa_r+0x4f8>
 8005bd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005bdc:	4b99      	ldr	r3, [pc, #612]	; (8005e44 <_dtoa_r+0x64c>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	4630      	mov	r0, r6
 8005be2:	4639      	mov	r1, r7
 8005be4:	f7fa ff7a 	bl	8000adc <__aeabi_dcmplt>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f000 8081 	beq.w	8005cf0 <_dtoa_r+0x4f8>
 8005bee:	9b01      	ldr	r3, [sp, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d07d      	beq.n	8005cf0 <_dtoa_r+0x4f8>
 8005bf4:	f1b9 0f00 	cmp.w	r9, #0
 8005bf8:	dd3c      	ble.n	8005c74 <_dtoa_r+0x47c>
 8005bfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005bfe:	9307      	str	r3, [sp, #28]
 8005c00:	2200      	movs	r2, #0
 8005c02:	4b91      	ldr	r3, [pc, #580]	; (8005e48 <_dtoa_r+0x650>)
 8005c04:	4630      	mov	r0, r6
 8005c06:	4639      	mov	r1, r7
 8005c08:	f7fa fcf6 	bl	80005f8 <__aeabi_dmul>
 8005c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c10:	3501      	adds	r5, #1
 8005c12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005c16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f7fa fc82 	bl	8000524 <__aeabi_i2d>
 8005c20:	4632      	mov	r2, r6
 8005c22:	463b      	mov	r3, r7
 8005c24:	f7fa fce8 	bl	80005f8 <__aeabi_dmul>
 8005c28:	4b88      	ldr	r3, [pc, #544]	; (8005e4c <_dtoa_r+0x654>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f7fa fb2e 	bl	800028c <__adddf3>
 8005c30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c38:	9303      	str	r3, [sp, #12]
 8005c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d15c      	bne.n	8005cfa <_dtoa_r+0x502>
 8005c40:	4b83      	ldr	r3, [pc, #524]	; (8005e50 <_dtoa_r+0x658>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	4630      	mov	r0, r6
 8005c46:	4639      	mov	r1, r7
 8005c48:	f7fa fb1e 	bl	8000288 <__aeabi_dsub>
 8005c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	f7fa ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	f040 8296 	bne.w	800618a <_dtoa_r+0x992>
 8005c5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005c62:	4630      	mov	r0, r6
 8005c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c68:	4639      	mov	r1, r7
 8005c6a:	f7fa ff37 	bl	8000adc <__aeabi_dcmplt>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f040 8288 	bne.w	8006184 <_dtoa_r+0x98c>
 8005c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f2c0 8158 	blt.w	8005f34 <_dtoa_r+0x73c>
 8005c84:	f1ba 0f0e 	cmp.w	sl, #14
 8005c88:	f300 8154 	bgt.w	8005f34 <_dtoa_r+0x73c>
 8005c8c:	4b6b      	ldr	r3, [pc, #428]	; (8005e3c <_dtoa_r+0x644>)
 8005c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f280 80e3 	bge.w	8005e64 <_dtoa_r+0x66c>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f300 80df 	bgt.w	8005e64 <_dtoa_r+0x66c>
 8005ca6:	f040 826d 	bne.w	8006184 <_dtoa_r+0x98c>
 8005caa:	4b69      	ldr	r3, [pc, #420]	; (8005e50 <_dtoa_r+0x658>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	4640      	mov	r0, r8
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	f7fa fca1 	bl	80005f8 <__aeabi_dmul>
 8005cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cba:	f7fa ff23 	bl	8000b04 <__aeabi_dcmpge>
 8005cbe:	9e01      	ldr	r6, [sp, #4]
 8005cc0:	4637      	mov	r7, r6
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f040 8243 	bne.w	800614e <_dtoa_r+0x956>
 8005cc8:	9d00      	ldr	r5, [sp, #0]
 8005cca:	2331      	movs	r3, #49	; 0x31
 8005ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8005cd0:	f10a 0a01 	add.w	sl, sl, #1
 8005cd4:	e23f      	b.n	8006156 <_dtoa_r+0x95e>
 8005cd6:	07f2      	lsls	r2, r6, #31
 8005cd8:	d505      	bpl.n	8005ce6 <_dtoa_r+0x4ee>
 8005cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cde:	f7fa fc8b 	bl	80005f8 <__aeabi_dmul>
 8005ce2:	3501      	adds	r5, #1
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	1076      	asrs	r6, r6, #1
 8005ce8:	3708      	adds	r7, #8
 8005cea:	e76c      	b.n	8005bc6 <_dtoa_r+0x3ce>
 8005cec:	2502      	movs	r5, #2
 8005cee:	e76f      	b.n	8005bd0 <_dtoa_r+0x3d8>
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8005cf8:	e78d      	b.n	8005c16 <_dtoa_r+0x41e>
 8005cfa:	9900      	ldr	r1, [sp, #0]
 8005cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d00:	4b4e      	ldr	r3, [pc, #312]	; (8005e3c <_dtoa_r+0x644>)
 8005d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d06:	4401      	add	r1, r0
 8005d08:	9102      	str	r1, [sp, #8]
 8005d0a:	9908      	ldr	r1, [sp, #32]
 8005d0c:	eeb0 8a47 	vmov.f32	s16, s14
 8005d10:	eef0 8a67 	vmov.f32	s17, s15
 8005d14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d1c:	2900      	cmp	r1, #0
 8005d1e:	d045      	beq.n	8005dac <_dtoa_r+0x5b4>
 8005d20:	494c      	ldr	r1, [pc, #304]	; (8005e54 <_dtoa_r+0x65c>)
 8005d22:	2000      	movs	r0, #0
 8005d24:	f7fa fd92 	bl	800084c <__aeabi_ddiv>
 8005d28:	ec53 2b18 	vmov	r2, r3, d8
 8005d2c:	f7fa faac 	bl	8000288 <__aeabi_dsub>
 8005d30:	9d00      	ldr	r5, [sp, #0]
 8005d32:	ec41 0b18 	vmov	d8, r0, r1
 8005d36:	4639      	mov	r1, r7
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7fa ff0d 	bl	8000b58 <__aeabi_d2iz>
 8005d3e:	900c      	str	r0, [sp, #48]	; 0x30
 8005d40:	f7fa fbf0 	bl	8000524 <__aeabi_i2d>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fa9c 	bl	8000288 <__aeabi_dsub>
 8005d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d52:	3330      	adds	r3, #48	; 0x30
 8005d54:	f805 3b01 	strb.w	r3, [r5], #1
 8005d58:	ec53 2b18 	vmov	r2, r3, d8
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	460f      	mov	r7, r1
 8005d60:	f7fa febc 	bl	8000adc <__aeabi_dcmplt>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d165      	bne.n	8005e34 <_dtoa_r+0x63c>
 8005d68:	4632      	mov	r2, r6
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	4935      	ldr	r1, [pc, #212]	; (8005e44 <_dtoa_r+0x64c>)
 8005d6e:	2000      	movs	r0, #0
 8005d70:	f7fa fa8a 	bl	8000288 <__aeabi_dsub>
 8005d74:	ec53 2b18 	vmov	r2, r3, d8
 8005d78:	f7fa feb0 	bl	8000adc <__aeabi_dcmplt>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	f040 80b9 	bne.w	8005ef4 <_dtoa_r+0x6fc>
 8005d82:	9b02      	ldr	r3, [sp, #8]
 8005d84:	429d      	cmp	r5, r3
 8005d86:	f43f af75 	beq.w	8005c74 <_dtoa_r+0x47c>
 8005d8a:	4b2f      	ldr	r3, [pc, #188]	; (8005e48 <_dtoa_r+0x650>)
 8005d8c:	ec51 0b18 	vmov	r0, r1, d8
 8005d90:	2200      	movs	r2, #0
 8005d92:	f7fa fc31 	bl	80005f8 <__aeabi_dmul>
 8005d96:	4b2c      	ldr	r3, [pc, #176]	; (8005e48 <_dtoa_r+0x650>)
 8005d98:	ec41 0b18 	vmov	d8, r0, r1
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4639      	mov	r1, r7
 8005da2:	f7fa fc29 	bl	80005f8 <__aeabi_dmul>
 8005da6:	4606      	mov	r6, r0
 8005da8:	460f      	mov	r7, r1
 8005daa:	e7c4      	b.n	8005d36 <_dtoa_r+0x53e>
 8005dac:	ec51 0b17 	vmov	r0, r1, d7
 8005db0:	f7fa fc22 	bl	80005f8 <__aeabi_dmul>
 8005db4:	9b02      	ldr	r3, [sp, #8]
 8005db6:	9d00      	ldr	r5, [sp, #0]
 8005db8:	930c      	str	r3, [sp, #48]	; 0x30
 8005dba:	ec41 0b18 	vmov	d8, r0, r1
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f7fa fec9 	bl	8000b58 <__aeabi_d2iz>
 8005dc6:	9011      	str	r0, [sp, #68]	; 0x44
 8005dc8:	f7fa fbac 	bl	8000524 <__aeabi_i2d>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f7fa fa58 	bl	8000288 <__aeabi_dsub>
 8005dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dda:	3330      	adds	r3, #48	; 0x30
 8005ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8005de0:	9b02      	ldr	r3, [sp, #8]
 8005de2:	429d      	cmp	r5, r3
 8005de4:	4606      	mov	r6, r0
 8005de6:	460f      	mov	r7, r1
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	d134      	bne.n	8005e58 <_dtoa_r+0x660>
 8005dee:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <_dtoa_r+0x65c>)
 8005df0:	ec51 0b18 	vmov	r0, r1, d8
 8005df4:	f7fa fa4a 	bl	800028c <__adddf3>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	4639      	mov	r1, r7
 8005e00:	f7fa fe8a 	bl	8000b18 <__aeabi_dcmpgt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d175      	bne.n	8005ef4 <_dtoa_r+0x6fc>
 8005e08:	ec53 2b18 	vmov	r2, r3, d8
 8005e0c:	4911      	ldr	r1, [pc, #68]	; (8005e54 <_dtoa_r+0x65c>)
 8005e0e:	2000      	movs	r0, #0
 8005e10:	f7fa fa3a 	bl	8000288 <__aeabi_dsub>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4630      	mov	r0, r6
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	f7fa fe5e 	bl	8000adc <__aeabi_dcmplt>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f43f af27 	beq.w	8005c74 <_dtoa_r+0x47c>
 8005e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e28:	1e6b      	subs	r3, r5, #1
 8005e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8005e2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e30:	2b30      	cmp	r3, #48	; 0x30
 8005e32:	d0f8      	beq.n	8005e26 <_dtoa_r+0x62e>
 8005e34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005e38:	e04a      	b.n	8005ed0 <_dtoa_r+0x6d8>
 8005e3a:	bf00      	nop
 8005e3c:	08007890 	.word	0x08007890
 8005e40:	08007868 	.word	0x08007868
 8005e44:	3ff00000 	.word	0x3ff00000
 8005e48:	40240000 	.word	0x40240000
 8005e4c:	401c0000 	.word	0x401c0000
 8005e50:	40140000 	.word	0x40140000
 8005e54:	3fe00000 	.word	0x3fe00000
 8005e58:	4baf      	ldr	r3, [pc, #700]	; (8006118 <_dtoa_r+0x920>)
 8005e5a:	f7fa fbcd 	bl	80005f8 <__aeabi_dmul>
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460f      	mov	r7, r1
 8005e62:	e7ac      	b.n	8005dbe <_dtoa_r+0x5c6>
 8005e64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e68:	9d00      	ldr	r5, [sp, #0]
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	4630      	mov	r0, r6
 8005e70:	4639      	mov	r1, r7
 8005e72:	f7fa fceb 	bl	800084c <__aeabi_ddiv>
 8005e76:	f7fa fe6f 	bl	8000b58 <__aeabi_d2iz>
 8005e7a:	9002      	str	r0, [sp, #8]
 8005e7c:	f7fa fb52 	bl	8000524 <__aeabi_i2d>
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	f7fa fbb8 	bl	80005f8 <__aeabi_dmul>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f7fa f9fa 	bl	8000288 <__aeabi_dsub>
 8005e94:	9e02      	ldr	r6, [sp, #8]
 8005e96:	9f01      	ldr	r7, [sp, #4]
 8005e98:	3630      	adds	r6, #48	; 0x30
 8005e9a:	f805 6b01 	strb.w	r6, [r5], #1
 8005e9e:	9e00      	ldr	r6, [sp, #0]
 8005ea0:	1bae      	subs	r6, r5, r6
 8005ea2:	42b7      	cmp	r7, r6
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	d137      	bne.n	8005f1a <_dtoa_r+0x722>
 8005eaa:	f7fa f9ef 	bl	800028c <__adddf3>
 8005eae:	4642      	mov	r2, r8
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460f      	mov	r7, r1
 8005eb6:	f7fa fe2f 	bl	8000b18 <__aeabi_dcmpgt>
 8005eba:	b9c8      	cbnz	r0, 8005ef0 <_dtoa_r+0x6f8>
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec8:	b110      	cbz	r0, 8005ed0 <_dtoa_r+0x6d8>
 8005eca:	9b02      	ldr	r3, [sp, #8]
 8005ecc:	07d9      	lsls	r1, r3, #31
 8005ece:	d40f      	bmi.n	8005ef0 <_dtoa_r+0x6f8>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	4659      	mov	r1, fp
 8005ed4:	f000 fcf6 	bl	80068c4 <_Bfree>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	702b      	strb	r3, [r5, #0]
 8005edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ede:	f10a 0001 	add.w	r0, sl, #1
 8005ee2:	6018      	str	r0, [r3, #0]
 8005ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f43f acd8 	beq.w	800589c <_dtoa_r+0xa4>
 8005eec:	601d      	str	r5, [r3, #0]
 8005eee:	e4d5      	b.n	800589c <_dtoa_r+0xa4>
 8005ef0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005efc:	2a39      	cmp	r2, #57	; 0x39
 8005efe:	d108      	bne.n	8005f12 <_dtoa_r+0x71a>
 8005f00:	9a00      	ldr	r2, [sp, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d1f7      	bne.n	8005ef6 <_dtoa_r+0x6fe>
 8005f06:	9a07      	ldr	r2, [sp, #28]
 8005f08:	9900      	ldr	r1, [sp, #0]
 8005f0a:	3201      	adds	r2, #1
 8005f0c:	9207      	str	r2, [sp, #28]
 8005f0e:	2230      	movs	r2, #48	; 0x30
 8005f10:	700a      	strb	r2, [r1, #0]
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	3201      	adds	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e78c      	b.n	8005e34 <_dtoa_r+0x63c>
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <_dtoa_r+0x920>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f7fa fb6b 	bl	80005f8 <__aeabi_dmul>
 8005f22:	2200      	movs	r2, #0
 8005f24:	2300      	movs	r3, #0
 8005f26:	4606      	mov	r6, r0
 8005f28:	460f      	mov	r7, r1
 8005f2a:	f7fa fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d09b      	beq.n	8005e6a <_dtoa_r+0x672>
 8005f32:	e7cd      	b.n	8005ed0 <_dtoa_r+0x6d8>
 8005f34:	9a08      	ldr	r2, [sp, #32]
 8005f36:	2a00      	cmp	r2, #0
 8005f38:	f000 80c4 	beq.w	80060c4 <_dtoa_r+0x8cc>
 8005f3c:	9a05      	ldr	r2, [sp, #20]
 8005f3e:	2a01      	cmp	r2, #1
 8005f40:	f300 80a8 	bgt.w	8006094 <_dtoa_r+0x89c>
 8005f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	f000 80a0 	beq.w	800608c <_dtoa_r+0x894>
 8005f4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f50:	9e06      	ldr	r6, [sp, #24]
 8005f52:	4645      	mov	r5, r8
 8005f54:	9a04      	ldr	r2, [sp, #16]
 8005f56:	2101      	movs	r1, #1
 8005f58:	441a      	add	r2, r3
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4498      	add	r8, r3
 8005f5e:	9204      	str	r2, [sp, #16]
 8005f60:	f000 fd6c 	bl	8006a3c <__i2b>
 8005f64:	4607      	mov	r7, r0
 8005f66:	2d00      	cmp	r5, #0
 8005f68:	dd0b      	ble.n	8005f82 <_dtoa_r+0x78a>
 8005f6a:	9b04      	ldr	r3, [sp, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dd08      	ble.n	8005f82 <_dtoa_r+0x78a>
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	9a04      	ldr	r2, [sp, #16]
 8005f74:	bfa8      	it	ge
 8005f76:	462b      	movge	r3, r5
 8005f78:	eba8 0803 	sub.w	r8, r8, r3
 8005f7c:	1aed      	subs	r5, r5, r3
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	9304      	str	r3, [sp, #16]
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	b1fb      	cbz	r3, 8005fc6 <_dtoa_r+0x7ce>
 8005f86:	9b08      	ldr	r3, [sp, #32]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 809f 	beq.w	80060cc <_dtoa_r+0x8d4>
 8005f8e:	2e00      	cmp	r6, #0
 8005f90:	dd11      	ble.n	8005fb6 <_dtoa_r+0x7be>
 8005f92:	4639      	mov	r1, r7
 8005f94:	4632      	mov	r2, r6
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 fe0c 	bl	8006bb4 <__pow5mult>
 8005f9c:	465a      	mov	r2, fp
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 fd60 	bl	8006a68 <__multiply>
 8005fa8:	4659      	mov	r1, fp
 8005faa:	9007      	str	r0, [sp, #28]
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 fc89 	bl	80068c4 <_Bfree>
 8005fb2:	9b07      	ldr	r3, [sp, #28]
 8005fb4:	469b      	mov	fp, r3
 8005fb6:	9b06      	ldr	r3, [sp, #24]
 8005fb8:	1b9a      	subs	r2, r3, r6
 8005fba:	d004      	beq.n	8005fc6 <_dtoa_r+0x7ce>
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f000 fdf8 	bl	8006bb4 <__pow5mult>
 8005fc4:	4683      	mov	fp, r0
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fd37 	bl	8006a3c <__i2b>
 8005fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	dd7c      	ble.n	80060d0 <_dtoa_r+0x8d8>
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4601      	mov	r1, r0
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fdea 	bl	8006bb4 <__pow5mult>
 8005fe0:	9b05      	ldr	r3, [sp, #20]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	dd76      	ble.n	80060d6 <_dtoa_r+0x8de>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9306      	str	r3, [sp, #24]
 8005fec:	6933      	ldr	r3, [r6, #16]
 8005fee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ff2:	6918      	ldr	r0, [r3, #16]
 8005ff4:	f000 fcd2 	bl	800699c <__hi0bits>
 8005ff8:	f1c0 0020 	rsb	r0, r0, #32
 8005ffc:	9b04      	ldr	r3, [sp, #16]
 8005ffe:	4418      	add	r0, r3
 8006000:	f010 001f 	ands.w	r0, r0, #31
 8006004:	f000 8086 	beq.w	8006114 <_dtoa_r+0x91c>
 8006008:	f1c0 0320 	rsb	r3, r0, #32
 800600c:	2b04      	cmp	r3, #4
 800600e:	dd7f      	ble.n	8006110 <_dtoa_r+0x918>
 8006010:	f1c0 001c 	rsb	r0, r0, #28
 8006014:	9b04      	ldr	r3, [sp, #16]
 8006016:	4403      	add	r3, r0
 8006018:	4480      	add	r8, r0
 800601a:	4405      	add	r5, r0
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	f1b8 0f00 	cmp.w	r8, #0
 8006022:	dd05      	ble.n	8006030 <_dtoa_r+0x838>
 8006024:	4659      	mov	r1, fp
 8006026:	4642      	mov	r2, r8
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fe1d 	bl	8006c68 <__lshift>
 800602e:	4683      	mov	fp, r0
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	dd05      	ble.n	8006042 <_dtoa_r+0x84a>
 8006036:	4631      	mov	r1, r6
 8006038:	461a      	mov	r2, r3
 800603a:	4620      	mov	r0, r4
 800603c:	f000 fe14 	bl	8006c68 <__lshift>
 8006040:	4606      	mov	r6, r0
 8006042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006044:	2b00      	cmp	r3, #0
 8006046:	d069      	beq.n	800611c <_dtoa_r+0x924>
 8006048:	4631      	mov	r1, r6
 800604a:	4658      	mov	r0, fp
 800604c:	f000 fe78 	bl	8006d40 <__mcmp>
 8006050:	2800      	cmp	r0, #0
 8006052:	da63      	bge.n	800611c <_dtoa_r+0x924>
 8006054:	2300      	movs	r3, #0
 8006056:	4659      	mov	r1, fp
 8006058:	220a      	movs	r2, #10
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fc54 	bl	8006908 <__multadd>
 8006060:	9b08      	ldr	r3, [sp, #32]
 8006062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006066:	4683      	mov	fp, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 818f 	beq.w	800638c <_dtoa_r+0xb94>
 800606e:	4639      	mov	r1, r7
 8006070:	2300      	movs	r3, #0
 8006072:	220a      	movs	r2, #10
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fc47 	bl	8006908 <__multadd>
 800607a:	f1b9 0f00 	cmp.w	r9, #0
 800607e:	4607      	mov	r7, r0
 8006080:	f300 808e 	bgt.w	80061a0 <_dtoa_r+0x9a8>
 8006084:	9b05      	ldr	r3, [sp, #20]
 8006086:	2b02      	cmp	r3, #2
 8006088:	dc50      	bgt.n	800612c <_dtoa_r+0x934>
 800608a:	e089      	b.n	80061a0 <_dtoa_r+0x9a8>
 800608c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800608e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006092:	e75d      	b.n	8005f50 <_dtoa_r+0x758>
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	1e5e      	subs	r6, r3, #1
 8006098:	9b06      	ldr	r3, [sp, #24]
 800609a:	42b3      	cmp	r3, r6
 800609c:	bfbf      	itttt	lt
 800609e:	9b06      	ldrlt	r3, [sp, #24]
 80060a0:	9606      	strlt	r6, [sp, #24]
 80060a2:	1af2      	sublt	r2, r6, r3
 80060a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80060a6:	bfb6      	itet	lt
 80060a8:	189b      	addlt	r3, r3, r2
 80060aa:	1b9e      	subge	r6, r3, r6
 80060ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	bfb8      	it	lt
 80060b2:	2600      	movlt	r6, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bfb5      	itete	lt
 80060b8:	eba8 0503 	sublt.w	r5, r8, r3
 80060bc:	9b01      	ldrge	r3, [sp, #4]
 80060be:	2300      	movlt	r3, #0
 80060c0:	4645      	movge	r5, r8
 80060c2:	e747      	b.n	8005f54 <_dtoa_r+0x75c>
 80060c4:	9e06      	ldr	r6, [sp, #24]
 80060c6:	9f08      	ldr	r7, [sp, #32]
 80060c8:	4645      	mov	r5, r8
 80060ca:	e74c      	b.n	8005f66 <_dtoa_r+0x76e>
 80060cc:	9a06      	ldr	r2, [sp, #24]
 80060ce:	e775      	b.n	8005fbc <_dtoa_r+0x7c4>
 80060d0:	9b05      	ldr	r3, [sp, #20]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	dc18      	bgt.n	8006108 <_dtoa_r+0x910>
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	b9b3      	cbnz	r3, 8006108 <_dtoa_r+0x910>
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060e0:	b9a3      	cbnz	r3, 800610c <_dtoa_r+0x914>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060e8:	0d1b      	lsrs	r3, r3, #20
 80060ea:	051b      	lsls	r3, r3, #20
 80060ec:	b12b      	cbz	r3, 80060fa <_dtoa_r+0x902>
 80060ee:	9b04      	ldr	r3, [sp, #16]
 80060f0:	3301      	adds	r3, #1
 80060f2:	9304      	str	r3, [sp, #16]
 80060f4:	f108 0801 	add.w	r8, r8, #1
 80060f8:	2301      	movs	r3, #1
 80060fa:	9306      	str	r3, [sp, #24]
 80060fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f47f af74 	bne.w	8005fec <_dtoa_r+0x7f4>
 8006104:	2001      	movs	r0, #1
 8006106:	e779      	b.n	8005ffc <_dtoa_r+0x804>
 8006108:	2300      	movs	r3, #0
 800610a:	e7f6      	b.n	80060fa <_dtoa_r+0x902>
 800610c:	9b02      	ldr	r3, [sp, #8]
 800610e:	e7f4      	b.n	80060fa <_dtoa_r+0x902>
 8006110:	d085      	beq.n	800601e <_dtoa_r+0x826>
 8006112:	4618      	mov	r0, r3
 8006114:	301c      	adds	r0, #28
 8006116:	e77d      	b.n	8006014 <_dtoa_r+0x81c>
 8006118:	40240000 	.word	0x40240000
 800611c:	9b01      	ldr	r3, [sp, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	dc38      	bgt.n	8006194 <_dtoa_r+0x99c>
 8006122:	9b05      	ldr	r3, [sp, #20]
 8006124:	2b02      	cmp	r3, #2
 8006126:	dd35      	ble.n	8006194 <_dtoa_r+0x99c>
 8006128:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800612c:	f1b9 0f00 	cmp.w	r9, #0
 8006130:	d10d      	bne.n	800614e <_dtoa_r+0x956>
 8006132:	4631      	mov	r1, r6
 8006134:	464b      	mov	r3, r9
 8006136:	2205      	movs	r2, #5
 8006138:	4620      	mov	r0, r4
 800613a:	f000 fbe5 	bl	8006908 <__multadd>
 800613e:	4601      	mov	r1, r0
 8006140:	4606      	mov	r6, r0
 8006142:	4658      	mov	r0, fp
 8006144:	f000 fdfc 	bl	8006d40 <__mcmp>
 8006148:	2800      	cmp	r0, #0
 800614a:	f73f adbd 	bgt.w	8005cc8 <_dtoa_r+0x4d0>
 800614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006150:	9d00      	ldr	r5, [sp, #0]
 8006152:	ea6f 0a03 	mvn.w	sl, r3
 8006156:	f04f 0800 	mov.w	r8, #0
 800615a:	4631      	mov	r1, r6
 800615c:	4620      	mov	r0, r4
 800615e:	f000 fbb1 	bl	80068c4 <_Bfree>
 8006162:	2f00      	cmp	r7, #0
 8006164:	f43f aeb4 	beq.w	8005ed0 <_dtoa_r+0x6d8>
 8006168:	f1b8 0f00 	cmp.w	r8, #0
 800616c:	d005      	beq.n	800617a <_dtoa_r+0x982>
 800616e:	45b8      	cmp	r8, r7
 8006170:	d003      	beq.n	800617a <_dtoa_r+0x982>
 8006172:	4641      	mov	r1, r8
 8006174:	4620      	mov	r0, r4
 8006176:	f000 fba5 	bl	80068c4 <_Bfree>
 800617a:	4639      	mov	r1, r7
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fba1 	bl	80068c4 <_Bfree>
 8006182:	e6a5      	b.n	8005ed0 <_dtoa_r+0x6d8>
 8006184:	2600      	movs	r6, #0
 8006186:	4637      	mov	r7, r6
 8006188:	e7e1      	b.n	800614e <_dtoa_r+0x956>
 800618a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800618c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006190:	4637      	mov	r7, r6
 8006192:	e599      	b.n	8005cc8 <_dtoa_r+0x4d0>
 8006194:	9b08      	ldr	r3, [sp, #32]
 8006196:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 80fd 	beq.w	800639a <_dtoa_r+0xba2>
 80061a0:	2d00      	cmp	r5, #0
 80061a2:	dd05      	ble.n	80061b0 <_dtoa_r+0x9b8>
 80061a4:	4639      	mov	r1, r7
 80061a6:	462a      	mov	r2, r5
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fd5d 	bl	8006c68 <__lshift>
 80061ae:	4607      	mov	r7, r0
 80061b0:	9b06      	ldr	r3, [sp, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d05c      	beq.n	8006270 <_dtoa_r+0xa78>
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4620      	mov	r0, r4
 80061ba:	f000 fb43 	bl	8006844 <_Balloc>
 80061be:	4605      	mov	r5, r0
 80061c0:	b928      	cbnz	r0, 80061ce <_dtoa_r+0x9d6>
 80061c2:	4b80      	ldr	r3, [pc, #512]	; (80063c4 <_dtoa_r+0xbcc>)
 80061c4:	4602      	mov	r2, r0
 80061c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061ca:	f7ff bb2e 	b.w	800582a <_dtoa_r+0x32>
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	3202      	adds	r2, #2
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	f107 010c 	add.w	r1, r7, #12
 80061d8:	300c      	adds	r0, #12
 80061da:	f000 fb25 	bl	8006828 <memcpy>
 80061de:	2201      	movs	r2, #1
 80061e0:	4629      	mov	r1, r5
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 fd40 	bl	8006c68 <__lshift>
 80061e8:	9b00      	ldr	r3, [sp, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	444b      	add	r3, r9
 80061f2:	9307      	str	r3, [sp, #28]
 80061f4:	9b02      	ldr	r3, [sp, #8]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	46b8      	mov	r8, r7
 80061fc:	9306      	str	r3, [sp, #24]
 80061fe:	4607      	mov	r7, r0
 8006200:	9b01      	ldr	r3, [sp, #4]
 8006202:	4631      	mov	r1, r6
 8006204:	3b01      	subs	r3, #1
 8006206:	4658      	mov	r0, fp
 8006208:	9302      	str	r3, [sp, #8]
 800620a:	f7ff fa69 	bl	80056e0 <quorem>
 800620e:	4603      	mov	r3, r0
 8006210:	3330      	adds	r3, #48	; 0x30
 8006212:	9004      	str	r0, [sp, #16]
 8006214:	4641      	mov	r1, r8
 8006216:	4658      	mov	r0, fp
 8006218:	9308      	str	r3, [sp, #32]
 800621a:	f000 fd91 	bl	8006d40 <__mcmp>
 800621e:	463a      	mov	r2, r7
 8006220:	4681      	mov	r9, r0
 8006222:	4631      	mov	r1, r6
 8006224:	4620      	mov	r0, r4
 8006226:	f000 fda7 	bl	8006d78 <__mdiff>
 800622a:	68c2      	ldr	r2, [r0, #12]
 800622c:	9b08      	ldr	r3, [sp, #32]
 800622e:	4605      	mov	r5, r0
 8006230:	bb02      	cbnz	r2, 8006274 <_dtoa_r+0xa7c>
 8006232:	4601      	mov	r1, r0
 8006234:	4658      	mov	r0, fp
 8006236:	f000 fd83 	bl	8006d40 <__mcmp>
 800623a:	9b08      	ldr	r3, [sp, #32]
 800623c:	4602      	mov	r2, r0
 800623e:	4629      	mov	r1, r5
 8006240:	4620      	mov	r0, r4
 8006242:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006246:	f000 fb3d 	bl	80068c4 <_Bfree>
 800624a:	9b05      	ldr	r3, [sp, #20]
 800624c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800624e:	9d01      	ldr	r5, [sp, #4]
 8006250:	ea43 0102 	orr.w	r1, r3, r2
 8006254:	9b06      	ldr	r3, [sp, #24]
 8006256:	430b      	orrs	r3, r1
 8006258:	9b08      	ldr	r3, [sp, #32]
 800625a:	d10d      	bne.n	8006278 <_dtoa_r+0xa80>
 800625c:	2b39      	cmp	r3, #57	; 0x39
 800625e:	d029      	beq.n	80062b4 <_dtoa_r+0xabc>
 8006260:	f1b9 0f00 	cmp.w	r9, #0
 8006264:	dd01      	ble.n	800626a <_dtoa_r+0xa72>
 8006266:	9b04      	ldr	r3, [sp, #16]
 8006268:	3331      	adds	r3, #49	; 0x31
 800626a:	9a02      	ldr	r2, [sp, #8]
 800626c:	7013      	strb	r3, [r2, #0]
 800626e:	e774      	b.n	800615a <_dtoa_r+0x962>
 8006270:	4638      	mov	r0, r7
 8006272:	e7b9      	b.n	80061e8 <_dtoa_r+0x9f0>
 8006274:	2201      	movs	r2, #1
 8006276:	e7e2      	b.n	800623e <_dtoa_r+0xa46>
 8006278:	f1b9 0f00 	cmp.w	r9, #0
 800627c:	db06      	blt.n	800628c <_dtoa_r+0xa94>
 800627e:	9905      	ldr	r1, [sp, #20]
 8006280:	ea41 0909 	orr.w	r9, r1, r9
 8006284:	9906      	ldr	r1, [sp, #24]
 8006286:	ea59 0101 	orrs.w	r1, r9, r1
 800628a:	d120      	bne.n	80062ce <_dtoa_r+0xad6>
 800628c:	2a00      	cmp	r2, #0
 800628e:	ddec      	ble.n	800626a <_dtoa_r+0xa72>
 8006290:	4659      	mov	r1, fp
 8006292:	2201      	movs	r2, #1
 8006294:	4620      	mov	r0, r4
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	f000 fce6 	bl	8006c68 <__lshift>
 800629c:	4631      	mov	r1, r6
 800629e:	4683      	mov	fp, r0
 80062a0:	f000 fd4e 	bl	8006d40 <__mcmp>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	dc02      	bgt.n	80062b0 <_dtoa_r+0xab8>
 80062aa:	d1de      	bne.n	800626a <_dtoa_r+0xa72>
 80062ac:	07da      	lsls	r2, r3, #31
 80062ae:	d5dc      	bpl.n	800626a <_dtoa_r+0xa72>
 80062b0:	2b39      	cmp	r3, #57	; 0x39
 80062b2:	d1d8      	bne.n	8006266 <_dtoa_r+0xa6e>
 80062b4:	9a02      	ldr	r2, [sp, #8]
 80062b6:	2339      	movs	r3, #57	; 0x39
 80062b8:	7013      	strb	r3, [r2, #0]
 80062ba:	462b      	mov	r3, r5
 80062bc:	461d      	mov	r5, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062c4:	2a39      	cmp	r2, #57	; 0x39
 80062c6:	d050      	beq.n	800636a <_dtoa_r+0xb72>
 80062c8:	3201      	adds	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e745      	b.n	800615a <_dtoa_r+0x962>
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	dd03      	ble.n	80062da <_dtoa_r+0xae2>
 80062d2:	2b39      	cmp	r3, #57	; 0x39
 80062d4:	d0ee      	beq.n	80062b4 <_dtoa_r+0xabc>
 80062d6:	3301      	adds	r3, #1
 80062d8:	e7c7      	b.n	800626a <_dtoa_r+0xa72>
 80062da:	9a01      	ldr	r2, [sp, #4]
 80062dc:	9907      	ldr	r1, [sp, #28]
 80062de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062e2:	428a      	cmp	r2, r1
 80062e4:	d02a      	beq.n	800633c <_dtoa_r+0xb44>
 80062e6:	4659      	mov	r1, fp
 80062e8:	2300      	movs	r3, #0
 80062ea:	220a      	movs	r2, #10
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 fb0b 	bl	8006908 <__multadd>
 80062f2:	45b8      	cmp	r8, r7
 80062f4:	4683      	mov	fp, r0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	f04f 020a 	mov.w	r2, #10
 80062fe:	4641      	mov	r1, r8
 8006300:	4620      	mov	r0, r4
 8006302:	d107      	bne.n	8006314 <_dtoa_r+0xb1c>
 8006304:	f000 fb00 	bl	8006908 <__multadd>
 8006308:	4680      	mov	r8, r0
 800630a:	4607      	mov	r7, r0
 800630c:	9b01      	ldr	r3, [sp, #4]
 800630e:	3301      	adds	r3, #1
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	e775      	b.n	8006200 <_dtoa_r+0xa08>
 8006314:	f000 faf8 	bl	8006908 <__multadd>
 8006318:	4639      	mov	r1, r7
 800631a:	4680      	mov	r8, r0
 800631c:	2300      	movs	r3, #0
 800631e:	220a      	movs	r2, #10
 8006320:	4620      	mov	r0, r4
 8006322:	f000 faf1 	bl	8006908 <__multadd>
 8006326:	4607      	mov	r7, r0
 8006328:	e7f0      	b.n	800630c <_dtoa_r+0xb14>
 800632a:	f1b9 0f00 	cmp.w	r9, #0
 800632e:	9a00      	ldr	r2, [sp, #0]
 8006330:	bfcc      	ite	gt
 8006332:	464d      	movgt	r5, r9
 8006334:	2501      	movle	r5, #1
 8006336:	4415      	add	r5, r2
 8006338:	f04f 0800 	mov.w	r8, #0
 800633c:	4659      	mov	r1, fp
 800633e:	2201      	movs	r2, #1
 8006340:	4620      	mov	r0, r4
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	f000 fc90 	bl	8006c68 <__lshift>
 8006348:	4631      	mov	r1, r6
 800634a:	4683      	mov	fp, r0
 800634c:	f000 fcf8 	bl	8006d40 <__mcmp>
 8006350:	2800      	cmp	r0, #0
 8006352:	dcb2      	bgt.n	80062ba <_dtoa_r+0xac2>
 8006354:	d102      	bne.n	800635c <_dtoa_r+0xb64>
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	07db      	lsls	r3, r3, #31
 800635a:	d4ae      	bmi.n	80062ba <_dtoa_r+0xac2>
 800635c:	462b      	mov	r3, r5
 800635e:	461d      	mov	r5, r3
 8006360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006364:	2a30      	cmp	r2, #48	; 0x30
 8006366:	d0fa      	beq.n	800635e <_dtoa_r+0xb66>
 8006368:	e6f7      	b.n	800615a <_dtoa_r+0x962>
 800636a:	9a00      	ldr	r2, [sp, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d1a5      	bne.n	80062bc <_dtoa_r+0xac4>
 8006370:	f10a 0a01 	add.w	sl, sl, #1
 8006374:	2331      	movs	r3, #49	; 0x31
 8006376:	e779      	b.n	800626c <_dtoa_r+0xa74>
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <_dtoa_r+0xbd0>)
 800637a:	f7ff baaf 	b.w	80058dc <_dtoa_r+0xe4>
 800637e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006380:	2b00      	cmp	r3, #0
 8006382:	f47f aa86 	bne.w	8005892 <_dtoa_r+0x9a>
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <_dtoa_r+0xbd4>)
 8006388:	f7ff baa8 	b.w	80058dc <_dtoa_r+0xe4>
 800638c:	f1b9 0f00 	cmp.w	r9, #0
 8006390:	dc03      	bgt.n	800639a <_dtoa_r+0xba2>
 8006392:	9b05      	ldr	r3, [sp, #20]
 8006394:	2b02      	cmp	r3, #2
 8006396:	f73f aec9 	bgt.w	800612c <_dtoa_r+0x934>
 800639a:	9d00      	ldr	r5, [sp, #0]
 800639c:	4631      	mov	r1, r6
 800639e:	4658      	mov	r0, fp
 80063a0:	f7ff f99e 	bl	80056e0 <quorem>
 80063a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80063a8:	f805 3b01 	strb.w	r3, [r5], #1
 80063ac:	9a00      	ldr	r2, [sp, #0]
 80063ae:	1aaa      	subs	r2, r5, r2
 80063b0:	4591      	cmp	r9, r2
 80063b2:	ddba      	ble.n	800632a <_dtoa_r+0xb32>
 80063b4:	4659      	mov	r1, fp
 80063b6:	2300      	movs	r3, #0
 80063b8:	220a      	movs	r2, #10
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 faa4 	bl	8006908 <__multadd>
 80063c0:	4683      	mov	fp, r0
 80063c2:	e7eb      	b.n	800639c <_dtoa_r+0xba4>
 80063c4:	08007793 	.word	0x08007793
 80063c8:	080076ec 	.word	0x080076ec
 80063cc:	08007710 	.word	0x08007710

080063d0 <__sflush_r>:
 80063d0:	898a      	ldrh	r2, [r1, #12]
 80063d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d6:	4605      	mov	r5, r0
 80063d8:	0710      	lsls	r0, r2, #28
 80063da:	460c      	mov	r4, r1
 80063dc:	d458      	bmi.n	8006490 <__sflush_r+0xc0>
 80063de:	684b      	ldr	r3, [r1, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	dc05      	bgt.n	80063f0 <__sflush_r+0x20>
 80063e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	dc02      	bgt.n	80063f0 <__sflush_r+0x20>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	d0f9      	beq.n	80063ea <__sflush_r+0x1a>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063fc:	682f      	ldr	r7, [r5, #0]
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	d032      	beq.n	8006468 <__sflush_r+0x98>
 8006402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	075a      	lsls	r2, r3, #29
 8006408:	d505      	bpl.n	8006416 <__sflush_r+0x46>
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	1ac0      	subs	r0, r0, r3
 800640e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006410:	b10b      	cbz	r3, 8006416 <__sflush_r+0x46>
 8006412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006414:	1ac0      	subs	r0, r0, r3
 8006416:	2300      	movs	r3, #0
 8006418:	4602      	mov	r2, r0
 800641a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800641c:	6a21      	ldr	r1, [r4, #32]
 800641e:	4628      	mov	r0, r5
 8006420:	47b0      	blx	r6
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	d106      	bne.n	8006436 <__sflush_r+0x66>
 8006428:	6829      	ldr	r1, [r5, #0]
 800642a:	291d      	cmp	r1, #29
 800642c:	d82c      	bhi.n	8006488 <__sflush_r+0xb8>
 800642e:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <__sflush_r+0x108>)
 8006430:	40ca      	lsrs	r2, r1
 8006432:	07d6      	lsls	r6, r2, #31
 8006434:	d528      	bpl.n	8006488 <__sflush_r+0xb8>
 8006436:	2200      	movs	r2, #0
 8006438:	6062      	str	r2, [r4, #4]
 800643a:	04d9      	lsls	r1, r3, #19
 800643c:	6922      	ldr	r2, [r4, #16]
 800643e:	6022      	str	r2, [r4, #0]
 8006440:	d504      	bpl.n	800644c <__sflush_r+0x7c>
 8006442:	1c42      	adds	r2, r0, #1
 8006444:	d101      	bne.n	800644a <__sflush_r+0x7a>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	b903      	cbnz	r3, 800644c <__sflush_r+0x7c>
 800644a:	6560      	str	r0, [r4, #84]	; 0x54
 800644c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800644e:	602f      	str	r7, [r5, #0]
 8006450:	2900      	cmp	r1, #0
 8006452:	d0ca      	beq.n	80063ea <__sflush_r+0x1a>
 8006454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006458:	4299      	cmp	r1, r3
 800645a:	d002      	beq.n	8006462 <__sflush_r+0x92>
 800645c:	4628      	mov	r0, r5
 800645e:	f000 fd7f 	bl	8006f60 <_free_r>
 8006462:	2000      	movs	r0, #0
 8006464:	6360      	str	r0, [r4, #52]	; 0x34
 8006466:	e7c1      	b.n	80063ec <__sflush_r+0x1c>
 8006468:	6a21      	ldr	r1, [r4, #32]
 800646a:	2301      	movs	r3, #1
 800646c:	4628      	mov	r0, r5
 800646e:	47b0      	blx	r6
 8006470:	1c41      	adds	r1, r0, #1
 8006472:	d1c7      	bne.n	8006404 <__sflush_r+0x34>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0c4      	beq.n	8006404 <__sflush_r+0x34>
 800647a:	2b1d      	cmp	r3, #29
 800647c:	d001      	beq.n	8006482 <__sflush_r+0xb2>
 800647e:	2b16      	cmp	r3, #22
 8006480:	d101      	bne.n	8006486 <__sflush_r+0xb6>
 8006482:	602f      	str	r7, [r5, #0]
 8006484:	e7b1      	b.n	80063ea <__sflush_r+0x1a>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	e7ad      	b.n	80063ec <__sflush_r+0x1c>
 8006490:	690f      	ldr	r7, [r1, #16]
 8006492:	2f00      	cmp	r7, #0
 8006494:	d0a9      	beq.n	80063ea <__sflush_r+0x1a>
 8006496:	0793      	lsls	r3, r2, #30
 8006498:	680e      	ldr	r6, [r1, #0]
 800649a:	bf08      	it	eq
 800649c:	694b      	ldreq	r3, [r1, #20]
 800649e:	600f      	str	r7, [r1, #0]
 80064a0:	bf18      	it	ne
 80064a2:	2300      	movne	r3, #0
 80064a4:	eba6 0807 	sub.w	r8, r6, r7
 80064a8:	608b      	str	r3, [r1, #8]
 80064aa:	f1b8 0f00 	cmp.w	r8, #0
 80064ae:	dd9c      	ble.n	80063ea <__sflush_r+0x1a>
 80064b0:	6a21      	ldr	r1, [r4, #32]
 80064b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064b4:	4643      	mov	r3, r8
 80064b6:	463a      	mov	r2, r7
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b0      	blx	r6
 80064bc:	2800      	cmp	r0, #0
 80064be:	dc06      	bgt.n	80064ce <__sflush_r+0xfe>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	e78e      	b.n	80063ec <__sflush_r+0x1c>
 80064ce:	4407      	add	r7, r0
 80064d0:	eba8 0800 	sub.w	r8, r8, r0
 80064d4:	e7e9      	b.n	80064aa <__sflush_r+0xda>
 80064d6:	bf00      	nop
 80064d8:	20400001 	.word	0x20400001

080064dc <_fflush_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	690b      	ldr	r3, [r1, #16]
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	b913      	cbnz	r3, 80064ec <_fflush_r+0x10>
 80064e6:	2500      	movs	r5, #0
 80064e8:	4628      	mov	r0, r5
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	b118      	cbz	r0, 80064f6 <_fflush_r+0x1a>
 80064ee:	6983      	ldr	r3, [r0, #24]
 80064f0:	b90b      	cbnz	r3, 80064f6 <_fflush_r+0x1a>
 80064f2:	f000 f887 	bl	8006604 <__sinit>
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <_fflush_r+0x6c>)
 80064f8:	429c      	cmp	r4, r3
 80064fa:	d11b      	bne.n	8006534 <_fflush_r+0x58>
 80064fc:	686c      	ldr	r4, [r5, #4]
 80064fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0ef      	beq.n	80064e6 <_fflush_r+0xa>
 8006506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006508:	07d0      	lsls	r0, r2, #31
 800650a:	d404      	bmi.n	8006516 <_fflush_r+0x3a>
 800650c:	0599      	lsls	r1, r3, #22
 800650e:	d402      	bmi.n	8006516 <_fflush_r+0x3a>
 8006510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006512:	f000 f91a 	bl	800674a <__retarget_lock_acquire_recursive>
 8006516:	4628      	mov	r0, r5
 8006518:	4621      	mov	r1, r4
 800651a:	f7ff ff59 	bl	80063d0 <__sflush_r>
 800651e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006520:	07da      	lsls	r2, r3, #31
 8006522:	4605      	mov	r5, r0
 8006524:	d4e0      	bmi.n	80064e8 <_fflush_r+0xc>
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	059b      	lsls	r3, r3, #22
 800652a:	d4dd      	bmi.n	80064e8 <_fflush_r+0xc>
 800652c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800652e:	f000 f90d 	bl	800674c <__retarget_lock_release_recursive>
 8006532:	e7d9      	b.n	80064e8 <_fflush_r+0xc>
 8006534:	4b05      	ldr	r3, [pc, #20]	; (800654c <_fflush_r+0x70>)
 8006536:	429c      	cmp	r4, r3
 8006538:	d101      	bne.n	800653e <_fflush_r+0x62>
 800653a:	68ac      	ldr	r4, [r5, #8]
 800653c:	e7df      	b.n	80064fe <_fflush_r+0x22>
 800653e:	4b04      	ldr	r3, [pc, #16]	; (8006550 <_fflush_r+0x74>)
 8006540:	429c      	cmp	r4, r3
 8006542:	bf08      	it	eq
 8006544:	68ec      	ldreq	r4, [r5, #12]
 8006546:	e7da      	b.n	80064fe <_fflush_r+0x22>
 8006548:	080077c4 	.word	0x080077c4
 800654c:	080077e4 	.word	0x080077e4
 8006550:	080077a4 	.word	0x080077a4

08006554 <std>:
 8006554:	2300      	movs	r3, #0
 8006556:	b510      	push	{r4, lr}
 8006558:	4604      	mov	r4, r0
 800655a:	e9c0 3300 	strd	r3, r3, [r0]
 800655e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006562:	6083      	str	r3, [r0, #8]
 8006564:	8181      	strh	r1, [r0, #12]
 8006566:	6643      	str	r3, [r0, #100]	; 0x64
 8006568:	81c2      	strh	r2, [r0, #14]
 800656a:	6183      	str	r3, [r0, #24]
 800656c:	4619      	mov	r1, r3
 800656e:	2208      	movs	r2, #8
 8006570:	305c      	adds	r0, #92	; 0x5c
 8006572:	f7fe faf5 	bl	8004b60 <memset>
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <std+0x38>)
 8006578:	6263      	str	r3, [r4, #36]	; 0x24
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <std+0x3c>)
 800657c:	62a3      	str	r3, [r4, #40]	; 0x28
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <std+0x40>)
 8006580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <std+0x44>)
 8006584:	6224      	str	r4, [r4, #32]
 8006586:	6323      	str	r3, [r4, #48]	; 0x30
 8006588:	bd10      	pop	{r4, pc}
 800658a:	bf00      	nop
 800658c:	08007389 	.word	0x08007389
 8006590:	080073ab 	.word	0x080073ab
 8006594:	080073e3 	.word	0x080073e3
 8006598:	08007407 	.word	0x08007407

0800659c <_cleanup_r>:
 800659c:	4901      	ldr	r1, [pc, #4]	; (80065a4 <_cleanup_r+0x8>)
 800659e:	f000 b8af 	b.w	8006700 <_fwalk_reent>
 80065a2:	bf00      	nop
 80065a4:	080064dd 	.word	0x080064dd

080065a8 <__sfmoreglue>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	1e4a      	subs	r2, r1, #1
 80065ac:	2568      	movs	r5, #104	; 0x68
 80065ae:	4355      	muls	r5, r2
 80065b0:	460e      	mov	r6, r1
 80065b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065b6:	f000 fd23 	bl	8007000 <_malloc_r>
 80065ba:	4604      	mov	r4, r0
 80065bc:	b140      	cbz	r0, 80065d0 <__sfmoreglue+0x28>
 80065be:	2100      	movs	r1, #0
 80065c0:	e9c0 1600 	strd	r1, r6, [r0]
 80065c4:	300c      	adds	r0, #12
 80065c6:	60a0      	str	r0, [r4, #8]
 80065c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065cc:	f7fe fac8 	bl	8004b60 <memset>
 80065d0:	4620      	mov	r0, r4
 80065d2:	bd70      	pop	{r4, r5, r6, pc}

080065d4 <__sfp_lock_acquire>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__sfp_lock_acquire+0x8>)
 80065d6:	f000 b8b8 	b.w	800674a <__retarget_lock_acquire_recursive>
 80065da:	bf00      	nop
 80065dc:	200002e4 	.word	0x200002e4

080065e0 <__sfp_lock_release>:
 80065e0:	4801      	ldr	r0, [pc, #4]	; (80065e8 <__sfp_lock_release+0x8>)
 80065e2:	f000 b8b3 	b.w	800674c <__retarget_lock_release_recursive>
 80065e6:	bf00      	nop
 80065e8:	200002e4 	.word	0x200002e4

080065ec <__sinit_lock_acquire>:
 80065ec:	4801      	ldr	r0, [pc, #4]	; (80065f4 <__sinit_lock_acquire+0x8>)
 80065ee:	f000 b8ac 	b.w	800674a <__retarget_lock_acquire_recursive>
 80065f2:	bf00      	nop
 80065f4:	200002df 	.word	0x200002df

080065f8 <__sinit_lock_release>:
 80065f8:	4801      	ldr	r0, [pc, #4]	; (8006600 <__sinit_lock_release+0x8>)
 80065fa:	f000 b8a7 	b.w	800674c <__retarget_lock_release_recursive>
 80065fe:	bf00      	nop
 8006600:	200002df 	.word	0x200002df

08006604 <__sinit>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4604      	mov	r4, r0
 8006608:	f7ff fff0 	bl	80065ec <__sinit_lock_acquire>
 800660c:	69a3      	ldr	r3, [r4, #24]
 800660e:	b11b      	cbz	r3, 8006618 <__sinit+0x14>
 8006610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006614:	f7ff bff0 	b.w	80065f8 <__sinit_lock_release>
 8006618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800661c:	6523      	str	r3, [r4, #80]	; 0x50
 800661e:	4b13      	ldr	r3, [pc, #76]	; (800666c <__sinit+0x68>)
 8006620:	4a13      	ldr	r2, [pc, #76]	; (8006670 <__sinit+0x6c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	62a2      	str	r2, [r4, #40]	; 0x28
 8006626:	42a3      	cmp	r3, r4
 8006628:	bf04      	itt	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	61a3      	streq	r3, [r4, #24]
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f820 	bl	8006674 <__sfp>
 8006634:	6060      	str	r0, [r4, #4]
 8006636:	4620      	mov	r0, r4
 8006638:	f000 f81c 	bl	8006674 <__sfp>
 800663c:	60a0      	str	r0, [r4, #8]
 800663e:	4620      	mov	r0, r4
 8006640:	f000 f818 	bl	8006674 <__sfp>
 8006644:	2200      	movs	r2, #0
 8006646:	60e0      	str	r0, [r4, #12]
 8006648:	2104      	movs	r1, #4
 800664a:	6860      	ldr	r0, [r4, #4]
 800664c:	f7ff ff82 	bl	8006554 <std>
 8006650:	68a0      	ldr	r0, [r4, #8]
 8006652:	2201      	movs	r2, #1
 8006654:	2109      	movs	r1, #9
 8006656:	f7ff ff7d 	bl	8006554 <std>
 800665a:	68e0      	ldr	r0, [r4, #12]
 800665c:	2202      	movs	r2, #2
 800665e:	2112      	movs	r1, #18
 8006660:	f7ff ff78 	bl	8006554 <std>
 8006664:	2301      	movs	r3, #1
 8006666:	61a3      	str	r3, [r4, #24]
 8006668:	e7d2      	b.n	8006610 <__sinit+0xc>
 800666a:	bf00      	nop
 800666c:	080076d8 	.word	0x080076d8
 8006670:	0800659d 	.word	0x0800659d

08006674 <__sfp>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	4607      	mov	r7, r0
 8006678:	f7ff ffac 	bl	80065d4 <__sfp_lock_acquire>
 800667c:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <__sfp+0x84>)
 800667e:	681e      	ldr	r6, [r3, #0]
 8006680:	69b3      	ldr	r3, [r6, #24]
 8006682:	b913      	cbnz	r3, 800668a <__sfp+0x16>
 8006684:	4630      	mov	r0, r6
 8006686:	f7ff ffbd 	bl	8006604 <__sinit>
 800668a:	3648      	adds	r6, #72	; 0x48
 800668c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006690:	3b01      	subs	r3, #1
 8006692:	d503      	bpl.n	800669c <__sfp+0x28>
 8006694:	6833      	ldr	r3, [r6, #0]
 8006696:	b30b      	cbz	r3, 80066dc <__sfp+0x68>
 8006698:	6836      	ldr	r6, [r6, #0]
 800669a:	e7f7      	b.n	800668c <__sfp+0x18>
 800669c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066a0:	b9d5      	cbnz	r5, 80066d8 <__sfp+0x64>
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <__sfp+0x88>)
 80066a4:	60e3      	str	r3, [r4, #12]
 80066a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066aa:	6665      	str	r5, [r4, #100]	; 0x64
 80066ac:	f000 f84c 	bl	8006748 <__retarget_lock_init_recursive>
 80066b0:	f7ff ff96 	bl	80065e0 <__sfp_lock_release>
 80066b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066bc:	6025      	str	r5, [r4, #0]
 80066be:	61a5      	str	r5, [r4, #24]
 80066c0:	2208      	movs	r2, #8
 80066c2:	4629      	mov	r1, r5
 80066c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066c8:	f7fe fa4a 	bl	8004b60 <memset>
 80066cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066d4:	4620      	mov	r0, r4
 80066d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d8:	3468      	adds	r4, #104	; 0x68
 80066da:	e7d9      	b.n	8006690 <__sfp+0x1c>
 80066dc:	2104      	movs	r1, #4
 80066de:	4638      	mov	r0, r7
 80066e0:	f7ff ff62 	bl	80065a8 <__sfmoreglue>
 80066e4:	4604      	mov	r4, r0
 80066e6:	6030      	str	r0, [r6, #0]
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d1d5      	bne.n	8006698 <__sfp+0x24>
 80066ec:	f7ff ff78 	bl	80065e0 <__sfp_lock_release>
 80066f0:	230c      	movs	r3, #12
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	e7ee      	b.n	80066d4 <__sfp+0x60>
 80066f6:	bf00      	nop
 80066f8:	080076d8 	.word	0x080076d8
 80066fc:	ffff0001 	.word	0xffff0001

08006700 <_fwalk_reent>:
 8006700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006704:	4606      	mov	r6, r0
 8006706:	4688      	mov	r8, r1
 8006708:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800670c:	2700      	movs	r7, #0
 800670e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006712:	f1b9 0901 	subs.w	r9, r9, #1
 8006716:	d505      	bpl.n	8006724 <_fwalk_reent+0x24>
 8006718:	6824      	ldr	r4, [r4, #0]
 800671a:	2c00      	cmp	r4, #0
 800671c:	d1f7      	bne.n	800670e <_fwalk_reent+0xe>
 800671e:	4638      	mov	r0, r7
 8006720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006724:	89ab      	ldrh	r3, [r5, #12]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d907      	bls.n	800673a <_fwalk_reent+0x3a>
 800672a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800672e:	3301      	adds	r3, #1
 8006730:	d003      	beq.n	800673a <_fwalk_reent+0x3a>
 8006732:	4629      	mov	r1, r5
 8006734:	4630      	mov	r0, r6
 8006736:	47c0      	blx	r8
 8006738:	4307      	orrs	r7, r0
 800673a:	3568      	adds	r5, #104	; 0x68
 800673c:	e7e9      	b.n	8006712 <_fwalk_reent+0x12>
	...

08006740 <_localeconv_r>:
 8006740:	4800      	ldr	r0, [pc, #0]	; (8006744 <_localeconv_r+0x4>)
 8006742:	4770      	bx	lr
 8006744:	20000158 	.word	0x20000158

08006748 <__retarget_lock_init_recursive>:
 8006748:	4770      	bx	lr

0800674a <__retarget_lock_acquire_recursive>:
 800674a:	4770      	bx	lr

0800674c <__retarget_lock_release_recursive>:
 800674c:	4770      	bx	lr

0800674e <__swhatbuf_r>:
 800674e:	b570      	push	{r4, r5, r6, lr}
 8006750:	460e      	mov	r6, r1
 8006752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006756:	2900      	cmp	r1, #0
 8006758:	b096      	sub	sp, #88	; 0x58
 800675a:	4614      	mov	r4, r2
 800675c:	461d      	mov	r5, r3
 800675e:	da07      	bge.n	8006770 <__swhatbuf_r+0x22>
 8006760:	2300      	movs	r3, #0
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	89b3      	ldrh	r3, [r6, #12]
 8006766:	061a      	lsls	r2, r3, #24
 8006768:	d410      	bmi.n	800678c <__swhatbuf_r+0x3e>
 800676a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800676e:	e00e      	b.n	800678e <__swhatbuf_r+0x40>
 8006770:	466a      	mov	r2, sp
 8006772:	f000 fe9f 	bl	80074b4 <_fstat_r>
 8006776:	2800      	cmp	r0, #0
 8006778:	dbf2      	blt.n	8006760 <__swhatbuf_r+0x12>
 800677a:	9a01      	ldr	r2, [sp, #4]
 800677c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006780:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006784:	425a      	negs	r2, r3
 8006786:	415a      	adcs	r2, r3
 8006788:	602a      	str	r2, [r5, #0]
 800678a:	e7ee      	b.n	800676a <__swhatbuf_r+0x1c>
 800678c:	2340      	movs	r3, #64	; 0x40
 800678e:	2000      	movs	r0, #0
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	b016      	add	sp, #88	; 0x58
 8006794:	bd70      	pop	{r4, r5, r6, pc}
	...

08006798 <__smakebuf_r>:
 8006798:	898b      	ldrh	r3, [r1, #12]
 800679a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800679c:	079d      	lsls	r5, r3, #30
 800679e:	4606      	mov	r6, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	d507      	bpl.n	80067b4 <__smakebuf_r+0x1c>
 80067a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	2301      	movs	r3, #1
 80067ae:	6163      	str	r3, [r4, #20]
 80067b0:	b002      	add	sp, #8
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	ab01      	add	r3, sp, #4
 80067b6:	466a      	mov	r2, sp
 80067b8:	f7ff ffc9 	bl	800674e <__swhatbuf_r>
 80067bc:	9900      	ldr	r1, [sp, #0]
 80067be:	4605      	mov	r5, r0
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 fc1d 	bl	8007000 <_malloc_r>
 80067c6:	b948      	cbnz	r0, 80067dc <__smakebuf_r+0x44>
 80067c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067cc:	059a      	lsls	r2, r3, #22
 80067ce:	d4ef      	bmi.n	80067b0 <__smakebuf_r+0x18>
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	f043 0302 	orr.w	r3, r3, #2
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	e7e3      	b.n	80067a4 <__smakebuf_r+0xc>
 80067dc:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <__smakebuf_r+0x7c>)
 80067de:	62b3      	str	r3, [r6, #40]	; 0x28
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	6020      	str	r0, [r4, #0]
 80067e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e8:	81a3      	strh	r3, [r4, #12]
 80067ea:	9b00      	ldr	r3, [sp, #0]
 80067ec:	6163      	str	r3, [r4, #20]
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	6120      	str	r0, [r4, #16]
 80067f2:	b15b      	cbz	r3, 800680c <__smakebuf_r+0x74>
 80067f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 fe6d 	bl	80074d8 <_isatty_r>
 80067fe:	b128      	cbz	r0, 800680c <__smakebuf_r+0x74>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	89a0      	ldrh	r0, [r4, #12]
 800680e:	4305      	orrs	r5, r0
 8006810:	81a5      	strh	r5, [r4, #12]
 8006812:	e7cd      	b.n	80067b0 <__smakebuf_r+0x18>
 8006814:	0800659d 	.word	0x0800659d

08006818 <malloc>:
 8006818:	4b02      	ldr	r3, [pc, #8]	; (8006824 <malloc+0xc>)
 800681a:	4601      	mov	r1, r0
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	f000 bbef 	b.w	8007000 <_malloc_r>
 8006822:	bf00      	nop
 8006824:	20000004 	.word	0x20000004

08006828 <memcpy>:
 8006828:	440a      	add	r2, r1
 800682a:	4291      	cmp	r1, r2
 800682c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006830:	d100      	bne.n	8006834 <memcpy+0xc>
 8006832:	4770      	bx	lr
 8006834:	b510      	push	{r4, lr}
 8006836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800683a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800683e:	4291      	cmp	r1, r2
 8006840:	d1f9      	bne.n	8006836 <memcpy+0xe>
 8006842:	bd10      	pop	{r4, pc}

08006844 <_Balloc>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006848:	4604      	mov	r4, r0
 800684a:	460d      	mov	r5, r1
 800684c:	b976      	cbnz	r6, 800686c <_Balloc+0x28>
 800684e:	2010      	movs	r0, #16
 8006850:	f7ff ffe2 	bl	8006818 <malloc>
 8006854:	4602      	mov	r2, r0
 8006856:	6260      	str	r0, [r4, #36]	; 0x24
 8006858:	b920      	cbnz	r0, 8006864 <_Balloc+0x20>
 800685a:	4b18      	ldr	r3, [pc, #96]	; (80068bc <_Balloc+0x78>)
 800685c:	4818      	ldr	r0, [pc, #96]	; (80068c0 <_Balloc+0x7c>)
 800685e:	2166      	movs	r1, #102	; 0x66
 8006860:	f000 fde8 	bl	8007434 <__assert_func>
 8006864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006868:	6006      	str	r6, [r0, #0]
 800686a:	60c6      	str	r6, [r0, #12]
 800686c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800686e:	68f3      	ldr	r3, [r6, #12]
 8006870:	b183      	cbz	r3, 8006894 <_Balloc+0x50>
 8006872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800687a:	b9b8      	cbnz	r0, 80068ac <_Balloc+0x68>
 800687c:	2101      	movs	r1, #1
 800687e:	fa01 f605 	lsl.w	r6, r1, r5
 8006882:	1d72      	adds	r2, r6, #5
 8006884:	0092      	lsls	r2, r2, #2
 8006886:	4620      	mov	r0, r4
 8006888:	f000 fb5a 	bl	8006f40 <_calloc_r>
 800688c:	b160      	cbz	r0, 80068a8 <_Balloc+0x64>
 800688e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006892:	e00e      	b.n	80068b2 <_Balloc+0x6e>
 8006894:	2221      	movs	r2, #33	; 0x21
 8006896:	2104      	movs	r1, #4
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fb51 	bl	8006f40 <_calloc_r>
 800689e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068a0:	60f0      	str	r0, [r6, #12]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e4      	bne.n	8006872 <_Balloc+0x2e>
 80068a8:	2000      	movs	r0, #0
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	6802      	ldr	r2, [r0, #0]
 80068ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068b2:	2300      	movs	r3, #0
 80068b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068b8:	e7f7      	b.n	80068aa <_Balloc+0x66>
 80068ba:	bf00      	nop
 80068bc:	0800771d 	.word	0x0800771d
 80068c0:	08007804 	.word	0x08007804

080068c4 <_Bfree>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068c8:	4605      	mov	r5, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	b976      	cbnz	r6, 80068ec <_Bfree+0x28>
 80068ce:	2010      	movs	r0, #16
 80068d0:	f7ff ffa2 	bl	8006818 <malloc>
 80068d4:	4602      	mov	r2, r0
 80068d6:	6268      	str	r0, [r5, #36]	; 0x24
 80068d8:	b920      	cbnz	r0, 80068e4 <_Bfree+0x20>
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <_Bfree+0x3c>)
 80068dc:	4809      	ldr	r0, [pc, #36]	; (8006904 <_Bfree+0x40>)
 80068de:	218a      	movs	r1, #138	; 0x8a
 80068e0:	f000 fda8 	bl	8007434 <__assert_func>
 80068e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068e8:	6006      	str	r6, [r0, #0]
 80068ea:	60c6      	str	r6, [r0, #12]
 80068ec:	b13c      	cbz	r4, 80068fe <_Bfree+0x3a>
 80068ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068f0:	6862      	ldr	r2, [r4, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068f8:	6021      	str	r1, [r4, #0]
 80068fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	0800771d 	.word	0x0800771d
 8006904:	08007804 	.word	0x08007804

08006908 <__multadd>:
 8006908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690c:	690e      	ldr	r6, [r1, #16]
 800690e:	4607      	mov	r7, r0
 8006910:	4698      	mov	r8, r3
 8006912:	460c      	mov	r4, r1
 8006914:	f101 0014 	add.w	r0, r1, #20
 8006918:	2300      	movs	r3, #0
 800691a:	6805      	ldr	r5, [r0, #0]
 800691c:	b2a9      	uxth	r1, r5
 800691e:	fb02 8101 	mla	r1, r2, r1, r8
 8006922:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006926:	0c2d      	lsrs	r5, r5, #16
 8006928:	fb02 c505 	mla	r5, r2, r5, ip
 800692c:	b289      	uxth	r1, r1
 800692e:	3301      	adds	r3, #1
 8006930:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006934:	429e      	cmp	r6, r3
 8006936:	f840 1b04 	str.w	r1, [r0], #4
 800693a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800693e:	dcec      	bgt.n	800691a <__multadd+0x12>
 8006940:	f1b8 0f00 	cmp.w	r8, #0
 8006944:	d022      	beq.n	800698c <__multadd+0x84>
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	42b3      	cmp	r3, r6
 800694a:	dc19      	bgt.n	8006980 <__multadd+0x78>
 800694c:	6861      	ldr	r1, [r4, #4]
 800694e:	4638      	mov	r0, r7
 8006950:	3101      	adds	r1, #1
 8006952:	f7ff ff77 	bl	8006844 <_Balloc>
 8006956:	4605      	mov	r5, r0
 8006958:	b928      	cbnz	r0, 8006966 <__multadd+0x5e>
 800695a:	4602      	mov	r2, r0
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <__multadd+0x8c>)
 800695e:	480e      	ldr	r0, [pc, #56]	; (8006998 <__multadd+0x90>)
 8006960:	21b5      	movs	r1, #181	; 0xb5
 8006962:	f000 fd67 	bl	8007434 <__assert_func>
 8006966:	6922      	ldr	r2, [r4, #16]
 8006968:	3202      	adds	r2, #2
 800696a:	f104 010c 	add.w	r1, r4, #12
 800696e:	0092      	lsls	r2, r2, #2
 8006970:	300c      	adds	r0, #12
 8006972:	f7ff ff59 	bl	8006828 <memcpy>
 8006976:	4621      	mov	r1, r4
 8006978:	4638      	mov	r0, r7
 800697a:	f7ff ffa3 	bl	80068c4 <_Bfree>
 800697e:	462c      	mov	r4, r5
 8006980:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006984:	3601      	adds	r6, #1
 8006986:	f8c3 8014 	str.w	r8, [r3, #20]
 800698a:	6126      	str	r6, [r4, #16]
 800698c:	4620      	mov	r0, r4
 800698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006992:	bf00      	nop
 8006994:	08007793 	.word	0x08007793
 8006998:	08007804 	.word	0x08007804

0800699c <__hi0bits>:
 800699c:	0c03      	lsrs	r3, r0, #16
 800699e:	041b      	lsls	r3, r3, #16
 80069a0:	b9d3      	cbnz	r3, 80069d8 <__hi0bits+0x3c>
 80069a2:	0400      	lsls	r0, r0, #16
 80069a4:	2310      	movs	r3, #16
 80069a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069aa:	bf04      	itt	eq
 80069ac:	0200      	lsleq	r0, r0, #8
 80069ae:	3308      	addeq	r3, #8
 80069b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069b4:	bf04      	itt	eq
 80069b6:	0100      	lsleq	r0, r0, #4
 80069b8:	3304      	addeq	r3, #4
 80069ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069be:	bf04      	itt	eq
 80069c0:	0080      	lsleq	r0, r0, #2
 80069c2:	3302      	addeq	r3, #2
 80069c4:	2800      	cmp	r0, #0
 80069c6:	db05      	blt.n	80069d4 <__hi0bits+0x38>
 80069c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069cc:	f103 0301 	add.w	r3, r3, #1
 80069d0:	bf08      	it	eq
 80069d2:	2320      	moveq	r3, #32
 80069d4:	4618      	mov	r0, r3
 80069d6:	4770      	bx	lr
 80069d8:	2300      	movs	r3, #0
 80069da:	e7e4      	b.n	80069a6 <__hi0bits+0xa>

080069dc <__lo0bits>:
 80069dc:	6803      	ldr	r3, [r0, #0]
 80069de:	f013 0207 	ands.w	r2, r3, #7
 80069e2:	4601      	mov	r1, r0
 80069e4:	d00b      	beq.n	80069fe <__lo0bits+0x22>
 80069e6:	07da      	lsls	r2, r3, #31
 80069e8:	d424      	bmi.n	8006a34 <__lo0bits+0x58>
 80069ea:	0798      	lsls	r0, r3, #30
 80069ec:	bf49      	itett	mi
 80069ee:	085b      	lsrmi	r3, r3, #1
 80069f0:	089b      	lsrpl	r3, r3, #2
 80069f2:	2001      	movmi	r0, #1
 80069f4:	600b      	strmi	r3, [r1, #0]
 80069f6:	bf5c      	itt	pl
 80069f8:	600b      	strpl	r3, [r1, #0]
 80069fa:	2002      	movpl	r0, #2
 80069fc:	4770      	bx	lr
 80069fe:	b298      	uxth	r0, r3
 8006a00:	b9b0      	cbnz	r0, 8006a30 <__lo0bits+0x54>
 8006a02:	0c1b      	lsrs	r3, r3, #16
 8006a04:	2010      	movs	r0, #16
 8006a06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a0a:	bf04      	itt	eq
 8006a0c:	0a1b      	lsreq	r3, r3, #8
 8006a0e:	3008      	addeq	r0, #8
 8006a10:	071a      	lsls	r2, r3, #28
 8006a12:	bf04      	itt	eq
 8006a14:	091b      	lsreq	r3, r3, #4
 8006a16:	3004      	addeq	r0, #4
 8006a18:	079a      	lsls	r2, r3, #30
 8006a1a:	bf04      	itt	eq
 8006a1c:	089b      	lsreq	r3, r3, #2
 8006a1e:	3002      	addeq	r0, #2
 8006a20:	07da      	lsls	r2, r3, #31
 8006a22:	d403      	bmi.n	8006a2c <__lo0bits+0x50>
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	f100 0001 	add.w	r0, r0, #1
 8006a2a:	d005      	beq.n	8006a38 <__lo0bits+0x5c>
 8006a2c:	600b      	str	r3, [r1, #0]
 8006a2e:	4770      	bx	lr
 8006a30:	4610      	mov	r0, r2
 8006a32:	e7e8      	b.n	8006a06 <__lo0bits+0x2a>
 8006a34:	2000      	movs	r0, #0
 8006a36:	4770      	bx	lr
 8006a38:	2020      	movs	r0, #32
 8006a3a:	4770      	bx	lr

08006a3c <__i2b>:
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	460c      	mov	r4, r1
 8006a40:	2101      	movs	r1, #1
 8006a42:	f7ff feff 	bl	8006844 <_Balloc>
 8006a46:	4602      	mov	r2, r0
 8006a48:	b928      	cbnz	r0, 8006a56 <__i2b+0x1a>
 8006a4a:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <__i2b+0x24>)
 8006a4c:	4805      	ldr	r0, [pc, #20]	; (8006a64 <__i2b+0x28>)
 8006a4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a52:	f000 fcef 	bl	8007434 <__assert_func>
 8006a56:	2301      	movs	r3, #1
 8006a58:	6144      	str	r4, [r0, #20]
 8006a5a:	6103      	str	r3, [r0, #16]
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	bf00      	nop
 8006a60:	08007793 	.word	0x08007793
 8006a64:	08007804 	.word	0x08007804

08006a68 <__multiply>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	690a      	ldr	r2, [r1, #16]
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	bfb8      	it	lt
 8006a76:	460b      	movlt	r3, r1
 8006a78:	460d      	mov	r5, r1
 8006a7a:	bfbc      	itt	lt
 8006a7c:	4625      	movlt	r5, r4
 8006a7e:	461c      	movlt	r4, r3
 8006a80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006a84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a88:	68ab      	ldr	r3, [r5, #8]
 8006a8a:	6869      	ldr	r1, [r5, #4]
 8006a8c:	eb0a 0709 	add.w	r7, sl, r9
 8006a90:	42bb      	cmp	r3, r7
 8006a92:	b085      	sub	sp, #20
 8006a94:	bfb8      	it	lt
 8006a96:	3101      	addlt	r1, #1
 8006a98:	f7ff fed4 	bl	8006844 <_Balloc>
 8006a9c:	b930      	cbnz	r0, 8006aac <__multiply+0x44>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	4b42      	ldr	r3, [pc, #264]	; (8006bac <__multiply+0x144>)
 8006aa2:	4843      	ldr	r0, [pc, #268]	; (8006bb0 <__multiply+0x148>)
 8006aa4:	f240 115d 	movw	r1, #349	; 0x15d
 8006aa8:	f000 fcc4 	bl	8007434 <__assert_func>
 8006aac:	f100 0614 	add.w	r6, r0, #20
 8006ab0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006ab4:	4633      	mov	r3, r6
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4543      	cmp	r3, r8
 8006aba:	d31e      	bcc.n	8006afa <__multiply+0x92>
 8006abc:	f105 0c14 	add.w	ip, r5, #20
 8006ac0:	f104 0314 	add.w	r3, r4, #20
 8006ac4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006ac8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006acc:	9202      	str	r2, [sp, #8]
 8006ace:	ebac 0205 	sub.w	r2, ip, r5
 8006ad2:	3a15      	subs	r2, #21
 8006ad4:	f022 0203 	bic.w	r2, r2, #3
 8006ad8:	3204      	adds	r2, #4
 8006ada:	f105 0115 	add.w	r1, r5, #21
 8006ade:	458c      	cmp	ip, r1
 8006ae0:	bf38      	it	cc
 8006ae2:	2204      	movcc	r2, #4
 8006ae4:	9201      	str	r2, [sp, #4]
 8006ae6:	9a02      	ldr	r2, [sp, #8]
 8006ae8:	9303      	str	r3, [sp, #12]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d808      	bhi.n	8006b00 <__multiply+0x98>
 8006aee:	2f00      	cmp	r7, #0
 8006af0:	dc55      	bgt.n	8006b9e <__multiply+0x136>
 8006af2:	6107      	str	r7, [r0, #16]
 8006af4:	b005      	add	sp, #20
 8006af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afa:	f843 2b04 	str.w	r2, [r3], #4
 8006afe:	e7db      	b.n	8006ab8 <__multiply+0x50>
 8006b00:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b04:	f1ba 0f00 	cmp.w	sl, #0
 8006b08:	d020      	beq.n	8006b4c <__multiply+0xe4>
 8006b0a:	f105 0e14 	add.w	lr, r5, #20
 8006b0e:	46b1      	mov	r9, r6
 8006b10:	2200      	movs	r2, #0
 8006b12:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b16:	f8d9 b000 	ldr.w	fp, [r9]
 8006b1a:	b2a1      	uxth	r1, r4
 8006b1c:	fa1f fb8b 	uxth.w	fp, fp
 8006b20:	fb0a b101 	mla	r1, sl, r1, fp
 8006b24:	4411      	add	r1, r2
 8006b26:	f8d9 2000 	ldr.w	r2, [r9]
 8006b2a:	0c24      	lsrs	r4, r4, #16
 8006b2c:	0c12      	lsrs	r2, r2, #16
 8006b2e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b36:	b289      	uxth	r1, r1
 8006b38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b3c:	45f4      	cmp	ip, lr
 8006b3e:	f849 1b04 	str.w	r1, [r9], #4
 8006b42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b46:	d8e4      	bhi.n	8006b12 <__multiply+0xaa>
 8006b48:	9901      	ldr	r1, [sp, #4]
 8006b4a:	5072      	str	r2, [r6, r1]
 8006b4c:	9a03      	ldr	r2, [sp, #12]
 8006b4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b52:	3304      	adds	r3, #4
 8006b54:	f1b9 0f00 	cmp.w	r9, #0
 8006b58:	d01f      	beq.n	8006b9a <__multiply+0x132>
 8006b5a:	6834      	ldr	r4, [r6, #0]
 8006b5c:	f105 0114 	add.w	r1, r5, #20
 8006b60:	46b6      	mov	lr, r6
 8006b62:	f04f 0a00 	mov.w	sl, #0
 8006b66:	880a      	ldrh	r2, [r1, #0]
 8006b68:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006b6c:	fb09 b202 	mla	r2, r9, r2, fp
 8006b70:	4492      	add	sl, r2
 8006b72:	b2a4      	uxth	r4, r4
 8006b74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006b78:	f84e 4b04 	str.w	r4, [lr], #4
 8006b7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006b80:	f8be 2000 	ldrh.w	r2, [lr]
 8006b84:	0c24      	lsrs	r4, r4, #16
 8006b86:	fb09 2404 	mla	r4, r9, r4, r2
 8006b8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006b8e:	458c      	cmp	ip, r1
 8006b90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006b94:	d8e7      	bhi.n	8006b66 <__multiply+0xfe>
 8006b96:	9a01      	ldr	r2, [sp, #4]
 8006b98:	50b4      	str	r4, [r6, r2]
 8006b9a:	3604      	adds	r6, #4
 8006b9c:	e7a3      	b.n	8006ae6 <__multiply+0x7e>
 8006b9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1a5      	bne.n	8006af2 <__multiply+0x8a>
 8006ba6:	3f01      	subs	r7, #1
 8006ba8:	e7a1      	b.n	8006aee <__multiply+0x86>
 8006baa:	bf00      	nop
 8006bac:	08007793 	.word	0x08007793
 8006bb0:	08007804 	.word	0x08007804

08006bb4 <__pow5mult>:
 8006bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb8:	4615      	mov	r5, r2
 8006bba:	f012 0203 	ands.w	r2, r2, #3
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	d007      	beq.n	8006bd4 <__pow5mult+0x20>
 8006bc4:	4c25      	ldr	r4, [pc, #148]	; (8006c5c <__pow5mult+0xa8>)
 8006bc6:	3a01      	subs	r2, #1
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bce:	f7ff fe9b 	bl	8006908 <__multadd>
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	10ad      	asrs	r5, r5, #2
 8006bd6:	d03d      	beq.n	8006c54 <__pow5mult+0xa0>
 8006bd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006bda:	b97c      	cbnz	r4, 8006bfc <__pow5mult+0x48>
 8006bdc:	2010      	movs	r0, #16
 8006bde:	f7ff fe1b 	bl	8006818 <malloc>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6270      	str	r0, [r6, #36]	; 0x24
 8006be6:	b928      	cbnz	r0, 8006bf4 <__pow5mult+0x40>
 8006be8:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <__pow5mult+0xac>)
 8006bea:	481e      	ldr	r0, [pc, #120]	; (8006c64 <__pow5mult+0xb0>)
 8006bec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006bf0:	f000 fc20 	bl	8007434 <__assert_func>
 8006bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bf8:	6004      	str	r4, [r0, #0]
 8006bfa:	60c4      	str	r4, [r0, #12]
 8006bfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c04:	b94c      	cbnz	r4, 8006c1a <__pow5mult+0x66>
 8006c06:	f240 2171 	movw	r1, #625	; 0x271
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f7ff ff16 	bl	8006a3c <__i2b>
 8006c10:	2300      	movs	r3, #0
 8006c12:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c16:	4604      	mov	r4, r0
 8006c18:	6003      	str	r3, [r0, #0]
 8006c1a:	f04f 0900 	mov.w	r9, #0
 8006c1e:	07eb      	lsls	r3, r5, #31
 8006c20:	d50a      	bpl.n	8006c38 <__pow5mult+0x84>
 8006c22:	4639      	mov	r1, r7
 8006c24:	4622      	mov	r2, r4
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff ff1e 	bl	8006a68 <__multiply>
 8006c2c:	4639      	mov	r1, r7
 8006c2e:	4680      	mov	r8, r0
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff fe47 	bl	80068c4 <_Bfree>
 8006c36:	4647      	mov	r7, r8
 8006c38:	106d      	asrs	r5, r5, #1
 8006c3a:	d00b      	beq.n	8006c54 <__pow5mult+0xa0>
 8006c3c:	6820      	ldr	r0, [r4, #0]
 8006c3e:	b938      	cbnz	r0, 8006c50 <__pow5mult+0x9c>
 8006c40:	4622      	mov	r2, r4
 8006c42:	4621      	mov	r1, r4
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7ff ff0f 	bl	8006a68 <__multiply>
 8006c4a:	6020      	str	r0, [r4, #0]
 8006c4c:	f8c0 9000 	str.w	r9, [r0]
 8006c50:	4604      	mov	r4, r0
 8006c52:	e7e4      	b.n	8006c1e <__pow5mult+0x6a>
 8006c54:	4638      	mov	r0, r7
 8006c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08007958 	.word	0x08007958
 8006c60:	0800771d 	.word	0x0800771d
 8006c64:	08007804 	.word	0x08007804

08006c68 <__lshift>:
 8006c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	6849      	ldr	r1, [r1, #4]
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	4607      	mov	r7, r0
 8006c7a:	4691      	mov	r9, r2
 8006c7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c80:	f108 0601 	add.w	r6, r8, #1
 8006c84:	42b3      	cmp	r3, r6
 8006c86:	db0b      	blt.n	8006ca0 <__lshift+0x38>
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f7ff fddb 	bl	8006844 <_Balloc>
 8006c8e:	4605      	mov	r5, r0
 8006c90:	b948      	cbnz	r0, 8006ca6 <__lshift+0x3e>
 8006c92:	4602      	mov	r2, r0
 8006c94:	4b28      	ldr	r3, [pc, #160]	; (8006d38 <__lshift+0xd0>)
 8006c96:	4829      	ldr	r0, [pc, #164]	; (8006d3c <__lshift+0xd4>)
 8006c98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c9c:	f000 fbca 	bl	8007434 <__assert_func>
 8006ca0:	3101      	adds	r1, #1
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	e7ee      	b.n	8006c84 <__lshift+0x1c>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f100 0114 	add.w	r1, r0, #20
 8006cac:	f100 0210 	add.w	r2, r0, #16
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	4553      	cmp	r3, sl
 8006cb4:	db33      	blt.n	8006d1e <__lshift+0xb6>
 8006cb6:	6920      	ldr	r0, [r4, #16]
 8006cb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cbc:	f104 0314 	add.w	r3, r4, #20
 8006cc0:	f019 091f 	ands.w	r9, r9, #31
 8006cc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ccc:	d02b      	beq.n	8006d26 <__lshift+0xbe>
 8006cce:	f1c9 0e20 	rsb	lr, r9, #32
 8006cd2:	468a      	mov	sl, r1
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	fa00 f009 	lsl.w	r0, r0, r9
 8006cdc:	4302      	orrs	r2, r0
 8006cde:	f84a 2b04 	str.w	r2, [sl], #4
 8006ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce6:	459c      	cmp	ip, r3
 8006ce8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cec:	d8f3      	bhi.n	8006cd6 <__lshift+0x6e>
 8006cee:	ebac 0304 	sub.w	r3, ip, r4
 8006cf2:	3b15      	subs	r3, #21
 8006cf4:	f023 0303 	bic.w	r3, r3, #3
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	f104 0015 	add.w	r0, r4, #21
 8006cfe:	4584      	cmp	ip, r0
 8006d00:	bf38      	it	cc
 8006d02:	2304      	movcc	r3, #4
 8006d04:	50ca      	str	r2, [r1, r3]
 8006d06:	b10a      	cbz	r2, 8006d0c <__lshift+0xa4>
 8006d08:	f108 0602 	add.w	r6, r8, #2
 8006d0c:	3e01      	subs	r6, #1
 8006d0e:	4638      	mov	r0, r7
 8006d10:	612e      	str	r6, [r5, #16]
 8006d12:	4621      	mov	r1, r4
 8006d14:	f7ff fdd6 	bl	80068c4 <_Bfree>
 8006d18:	4628      	mov	r0, r5
 8006d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d22:	3301      	adds	r3, #1
 8006d24:	e7c5      	b.n	8006cb2 <__lshift+0x4a>
 8006d26:	3904      	subs	r1, #4
 8006d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d30:	459c      	cmp	ip, r3
 8006d32:	d8f9      	bhi.n	8006d28 <__lshift+0xc0>
 8006d34:	e7ea      	b.n	8006d0c <__lshift+0xa4>
 8006d36:	bf00      	nop
 8006d38:	08007793 	.word	0x08007793
 8006d3c:	08007804 	.word	0x08007804

08006d40 <__mcmp>:
 8006d40:	b530      	push	{r4, r5, lr}
 8006d42:	6902      	ldr	r2, [r0, #16]
 8006d44:	690c      	ldr	r4, [r1, #16]
 8006d46:	1b12      	subs	r2, r2, r4
 8006d48:	d10e      	bne.n	8006d68 <__mcmp+0x28>
 8006d4a:	f100 0314 	add.w	r3, r0, #20
 8006d4e:	3114      	adds	r1, #20
 8006d50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d60:	42a5      	cmp	r5, r4
 8006d62:	d003      	beq.n	8006d6c <__mcmp+0x2c>
 8006d64:	d305      	bcc.n	8006d72 <__mcmp+0x32>
 8006d66:	2201      	movs	r2, #1
 8006d68:	4610      	mov	r0, r2
 8006d6a:	bd30      	pop	{r4, r5, pc}
 8006d6c:	4283      	cmp	r3, r0
 8006d6e:	d3f3      	bcc.n	8006d58 <__mcmp+0x18>
 8006d70:	e7fa      	b.n	8006d68 <__mcmp+0x28>
 8006d72:	f04f 32ff 	mov.w	r2, #4294967295
 8006d76:	e7f7      	b.n	8006d68 <__mcmp+0x28>

08006d78 <__mdiff>:
 8006d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	4606      	mov	r6, r0
 8006d80:	4611      	mov	r1, r2
 8006d82:	4620      	mov	r0, r4
 8006d84:	4617      	mov	r7, r2
 8006d86:	f7ff ffdb 	bl	8006d40 <__mcmp>
 8006d8a:	1e05      	subs	r5, r0, #0
 8006d8c:	d110      	bne.n	8006db0 <__mdiff+0x38>
 8006d8e:	4629      	mov	r1, r5
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff fd57 	bl	8006844 <_Balloc>
 8006d96:	b930      	cbnz	r0, 8006da6 <__mdiff+0x2e>
 8006d98:	4b39      	ldr	r3, [pc, #228]	; (8006e80 <__mdiff+0x108>)
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	f240 2132 	movw	r1, #562	; 0x232
 8006da0:	4838      	ldr	r0, [pc, #224]	; (8006e84 <__mdiff+0x10c>)
 8006da2:	f000 fb47 	bl	8007434 <__assert_func>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db0:	bfa4      	itt	ge
 8006db2:	463b      	movge	r3, r7
 8006db4:	4627      	movge	r7, r4
 8006db6:	4630      	mov	r0, r6
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	bfa6      	itte	ge
 8006dbc:	461c      	movge	r4, r3
 8006dbe:	2500      	movge	r5, #0
 8006dc0:	2501      	movlt	r5, #1
 8006dc2:	f7ff fd3f 	bl	8006844 <_Balloc>
 8006dc6:	b920      	cbnz	r0, 8006dd2 <__mdiff+0x5a>
 8006dc8:	4b2d      	ldr	r3, [pc, #180]	; (8006e80 <__mdiff+0x108>)
 8006dca:	4602      	mov	r2, r0
 8006dcc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006dd0:	e7e6      	b.n	8006da0 <__mdiff+0x28>
 8006dd2:	693e      	ldr	r6, [r7, #16]
 8006dd4:	60c5      	str	r5, [r0, #12]
 8006dd6:	6925      	ldr	r5, [r4, #16]
 8006dd8:	f107 0114 	add.w	r1, r7, #20
 8006ddc:	f104 0914 	add.w	r9, r4, #20
 8006de0:	f100 0e14 	add.w	lr, r0, #20
 8006de4:	f107 0210 	add.w	r2, r7, #16
 8006de8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006dec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006df0:	46f2      	mov	sl, lr
 8006df2:	2700      	movs	r7, #0
 8006df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006df8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006dfc:	fa1f f883 	uxth.w	r8, r3
 8006e00:	fa17 f78b 	uxtah	r7, r7, fp
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	eba7 0808 	sub.w	r8, r7, r8
 8006e0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e12:	fa1f f888 	uxth.w	r8, r8
 8006e16:	141f      	asrs	r7, r3, #16
 8006e18:	454d      	cmp	r5, r9
 8006e1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e1e:	f84a 3b04 	str.w	r3, [sl], #4
 8006e22:	d8e7      	bhi.n	8006df4 <__mdiff+0x7c>
 8006e24:	1b2b      	subs	r3, r5, r4
 8006e26:	3b15      	subs	r3, #21
 8006e28:	f023 0303 	bic.w	r3, r3, #3
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	3415      	adds	r4, #21
 8006e30:	42a5      	cmp	r5, r4
 8006e32:	bf38      	it	cc
 8006e34:	2304      	movcc	r3, #4
 8006e36:	4419      	add	r1, r3
 8006e38:	4473      	add	r3, lr
 8006e3a:	469e      	mov	lr, r3
 8006e3c:	460d      	mov	r5, r1
 8006e3e:	4565      	cmp	r5, ip
 8006e40:	d30e      	bcc.n	8006e60 <__mdiff+0xe8>
 8006e42:	f10c 0203 	add.w	r2, ip, #3
 8006e46:	1a52      	subs	r2, r2, r1
 8006e48:	f022 0203 	bic.w	r2, r2, #3
 8006e4c:	3903      	subs	r1, #3
 8006e4e:	458c      	cmp	ip, r1
 8006e50:	bf38      	it	cc
 8006e52:	2200      	movcc	r2, #0
 8006e54:	441a      	add	r2, r3
 8006e56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006e5a:	b17b      	cbz	r3, 8006e7c <__mdiff+0x104>
 8006e5c:	6106      	str	r6, [r0, #16]
 8006e5e:	e7a5      	b.n	8006dac <__mdiff+0x34>
 8006e60:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e64:	fa17 f488 	uxtah	r4, r7, r8
 8006e68:	1422      	asrs	r2, r4, #16
 8006e6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006e6e:	b2a4      	uxth	r4, r4
 8006e70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006e74:	f84e 4b04 	str.w	r4, [lr], #4
 8006e78:	1417      	asrs	r7, r2, #16
 8006e7a:	e7e0      	b.n	8006e3e <__mdiff+0xc6>
 8006e7c:	3e01      	subs	r6, #1
 8006e7e:	e7ea      	b.n	8006e56 <__mdiff+0xde>
 8006e80:	08007793 	.word	0x08007793
 8006e84:	08007804 	.word	0x08007804

08006e88 <__d2b>:
 8006e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	2101      	movs	r1, #1
 8006e90:	ec57 6b10 	vmov	r6, r7, d0
 8006e94:	4690      	mov	r8, r2
 8006e96:	f7ff fcd5 	bl	8006844 <_Balloc>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	b930      	cbnz	r0, 8006eac <__d2b+0x24>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4b25      	ldr	r3, [pc, #148]	; (8006f38 <__d2b+0xb0>)
 8006ea2:	4826      	ldr	r0, [pc, #152]	; (8006f3c <__d2b+0xb4>)
 8006ea4:	f240 310a 	movw	r1, #778	; 0x30a
 8006ea8:	f000 fac4 	bl	8007434 <__assert_func>
 8006eac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006eb4:	bb35      	cbnz	r5, 8006f04 <__d2b+0x7c>
 8006eb6:	2e00      	cmp	r6, #0
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	d028      	beq.n	8006f0e <__d2b+0x86>
 8006ebc:	4668      	mov	r0, sp
 8006ebe:	9600      	str	r6, [sp, #0]
 8006ec0:	f7ff fd8c 	bl	80069dc <__lo0bits>
 8006ec4:	9900      	ldr	r1, [sp, #0]
 8006ec6:	b300      	cbz	r0, 8006f0a <__d2b+0x82>
 8006ec8:	9a01      	ldr	r2, [sp, #4]
 8006eca:	f1c0 0320 	rsb	r3, r0, #32
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	40c2      	lsrs	r2, r0
 8006ed6:	6163      	str	r3, [r4, #20]
 8006ed8:	9201      	str	r2, [sp, #4]
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	61a3      	str	r3, [r4, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf14      	ite	ne
 8006ee2:	2202      	movne	r2, #2
 8006ee4:	2201      	moveq	r2, #1
 8006ee6:	6122      	str	r2, [r4, #16]
 8006ee8:	b1d5      	cbz	r5, 8006f20 <__d2b+0x98>
 8006eea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006eee:	4405      	add	r5, r0
 8006ef0:	f8c9 5000 	str.w	r5, [r9]
 8006ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ef8:	f8c8 0000 	str.w	r0, [r8]
 8006efc:	4620      	mov	r0, r4
 8006efe:	b003      	add	sp, #12
 8006f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f08:	e7d5      	b.n	8006eb6 <__d2b+0x2e>
 8006f0a:	6161      	str	r1, [r4, #20]
 8006f0c:	e7e5      	b.n	8006eda <__d2b+0x52>
 8006f0e:	a801      	add	r0, sp, #4
 8006f10:	f7ff fd64 	bl	80069dc <__lo0bits>
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	6163      	str	r3, [r4, #20]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	6122      	str	r2, [r4, #16]
 8006f1c:	3020      	adds	r0, #32
 8006f1e:	e7e3      	b.n	8006ee8 <__d2b+0x60>
 8006f20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f28:	f8c9 0000 	str.w	r0, [r9]
 8006f2c:	6918      	ldr	r0, [r3, #16]
 8006f2e:	f7ff fd35 	bl	800699c <__hi0bits>
 8006f32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f36:	e7df      	b.n	8006ef8 <__d2b+0x70>
 8006f38:	08007793 	.word	0x08007793
 8006f3c:	08007804 	.word	0x08007804

08006f40 <_calloc_r>:
 8006f40:	b513      	push	{r0, r1, r4, lr}
 8006f42:	434a      	muls	r2, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	9201      	str	r2, [sp, #4]
 8006f48:	f000 f85a 	bl	8007000 <_malloc_r>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	b118      	cbz	r0, 8006f58 <_calloc_r+0x18>
 8006f50:	9a01      	ldr	r2, [sp, #4]
 8006f52:	2100      	movs	r1, #0
 8006f54:	f7fd fe04 	bl	8004b60 <memset>
 8006f58:	4620      	mov	r0, r4
 8006f5a:	b002      	add	sp, #8
 8006f5c:	bd10      	pop	{r4, pc}
	...

08006f60 <_free_r>:
 8006f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f62:	2900      	cmp	r1, #0
 8006f64:	d048      	beq.n	8006ff8 <_free_r+0x98>
 8006f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6a:	9001      	str	r0, [sp, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f72:	bfb8      	it	lt
 8006f74:	18e4      	addlt	r4, r4, r3
 8006f76:	f000 fae3 	bl	8007540 <__malloc_lock>
 8006f7a:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <_free_r+0x9c>)
 8006f7c:	9801      	ldr	r0, [sp, #4]
 8006f7e:	6813      	ldr	r3, [r2, #0]
 8006f80:	4615      	mov	r5, r2
 8006f82:	b933      	cbnz	r3, 8006f92 <_free_r+0x32>
 8006f84:	6063      	str	r3, [r4, #4]
 8006f86:	6014      	str	r4, [r2, #0]
 8006f88:	b003      	add	sp, #12
 8006f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f8e:	f000 badd 	b.w	800754c <__malloc_unlock>
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	d90b      	bls.n	8006fae <_free_r+0x4e>
 8006f96:	6821      	ldr	r1, [r4, #0]
 8006f98:	1862      	adds	r2, r4, r1
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	bf04      	itt	eq
 8006f9e:	681a      	ldreq	r2, [r3, #0]
 8006fa0:	685b      	ldreq	r3, [r3, #4]
 8006fa2:	6063      	str	r3, [r4, #4]
 8006fa4:	bf04      	itt	eq
 8006fa6:	1852      	addeq	r2, r2, r1
 8006fa8:	6022      	streq	r2, [r4, #0]
 8006faa:	602c      	str	r4, [r5, #0]
 8006fac:	e7ec      	b.n	8006f88 <_free_r+0x28>
 8006fae:	461a      	mov	r2, r3
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b10b      	cbz	r3, 8006fb8 <_free_r+0x58>
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d9fa      	bls.n	8006fae <_free_r+0x4e>
 8006fb8:	6811      	ldr	r1, [r2, #0]
 8006fba:	1855      	adds	r5, r2, r1
 8006fbc:	42a5      	cmp	r5, r4
 8006fbe:	d10b      	bne.n	8006fd8 <_free_r+0x78>
 8006fc0:	6824      	ldr	r4, [r4, #0]
 8006fc2:	4421      	add	r1, r4
 8006fc4:	1854      	adds	r4, r2, r1
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	d1dd      	bne.n	8006f88 <_free_r+0x28>
 8006fcc:	681c      	ldr	r4, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6053      	str	r3, [r2, #4]
 8006fd2:	4421      	add	r1, r4
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	e7d7      	b.n	8006f88 <_free_r+0x28>
 8006fd8:	d902      	bls.n	8006fe0 <_free_r+0x80>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	6003      	str	r3, [r0, #0]
 8006fde:	e7d3      	b.n	8006f88 <_free_r+0x28>
 8006fe0:	6825      	ldr	r5, [r4, #0]
 8006fe2:	1961      	adds	r1, r4, r5
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	bf04      	itt	eq
 8006fe8:	6819      	ldreq	r1, [r3, #0]
 8006fea:	685b      	ldreq	r3, [r3, #4]
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	bf04      	itt	eq
 8006ff0:	1949      	addeq	r1, r1, r5
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	6054      	str	r4, [r2, #4]
 8006ff6:	e7c7      	b.n	8006f88 <_free_r+0x28>
 8006ff8:	b003      	add	sp, #12
 8006ffa:	bd30      	pop	{r4, r5, pc}
 8006ffc:	200001f4 	.word	0x200001f4

08007000 <_malloc_r>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	1ccd      	adds	r5, r1, #3
 8007004:	f025 0503 	bic.w	r5, r5, #3
 8007008:	3508      	adds	r5, #8
 800700a:	2d0c      	cmp	r5, #12
 800700c:	bf38      	it	cc
 800700e:	250c      	movcc	r5, #12
 8007010:	2d00      	cmp	r5, #0
 8007012:	4606      	mov	r6, r0
 8007014:	db01      	blt.n	800701a <_malloc_r+0x1a>
 8007016:	42a9      	cmp	r1, r5
 8007018:	d903      	bls.n	8007022 <_malloc_r+0x22>
 800701a:	230c      	movs	r3, #12
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	2000      	movs	r0, #0
 8007020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007022:	f000 fa8d 	bl	8007540 <__malloc_lock>
 8007026:	4921      	ldr	r1, [pc, #132]	; (80070ac <_malloc_r+0xac>)
 8007028:	680a      	ldr	r2, [r1, #0]
 800702a:	4614      	mov	r4, r2
 800702c:	b99c      	cbnz	r4, 8007056 <_malloc_r+0x56>
 800702e:	4f20      	ldr	r7, [pc, #128]	; (80070b0 <_malloc_r+0xb0>)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	b923      	cbnz	r3, 800703e <_malloc_r+0x3e>
 8007034:	4621      	mov	r1, r4
 8007036:	4630      	mov	r0, r6
 8007038:	f000 f996 	bl	8007368 <_sbrk_r>
 800703c:	6038      	str	r0, [r7, #0]
 800703e:	4629      	mov	r1, r5
 8007040:	4630      	mov	r0, r6
 8007042:	f000 f991 	bl	8007368 <_sbrk_r>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	d123      	bne.n	8007092 <_malloc_r+0x92>
 800704a:	230c      	movs	r3, #12
 800704c:	6033      	str	r3, [r6, #0]
 800704e:	4630      	mov	r0, r6
 8007050:	f000 fa7c 	bl	800754c <__malloc_unlock>
 8007054:	e7e3      	b.n	800701e <_malloc_r+0x1e>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	1b5b      	subs	r3, r3, r5
 800705a:	d417      	bmi.n	800708c <_malloc_r+0x8c>
 800705c:	2b0b      	cmp	r3, #11
 800705e:	d903      	bls.n	8007068 <_malloc_r+0x68>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	441c      	add	r4, r3
 8007064:	6025      	str	r5, [r4, #0]
 8007066:	e004      	b.n	8007072 <_malloc_r+0x72>
 8007068:	6863      	ldr	r3, [r4, #4]
 800706a:	42a2      	cmp	r2, r4
 800706c:	bf0c      	ite	eq
 800706e:	600b      	streq	r3, [r1, #0]
 8007070:	6053      	strne	r3, [r2, #4]
 8007072:	4630      	mov	r0, r6
 8007074:	f000 fa6a 	bl	800754c <__malloc_unlock>
 8007078:	f104 000b 	add.w	r0, r4, #11
 800707c:	1d23      	adds	r3, r4, #4
 800707e:	f020 0007 	bic.w	r0, r0, #7
 8007082:	1ac2      	subs	r2, r0, r3
 8007084:	d0cc      	beq.n	8007020 <_malloc_r+0x20>
 8007086:	1a1b      	subs	r3, r3, r0
 8007088:	50a3      	str	r3, [r4, r2]
 800708a:	e7c9      	b.n	8007020 <_malloc_r+0x20>
 800708c:	4622      	mov	r2, r4
 800708e:	6864      	ldr	r4, [r4, #4]
 8007090:	e7cc      	b.n	800702c <_malloc_r+0x2c>
 8007092:	1cc4      	adds	r4, r0, #3
 8007094:	f024 0403 	bic.w	r4, r4, #3
 8007098:	42a0      	cmp	r0, r4
 800709a:	d0e3      	beq.n	8007064 <_malloc_r+0x64>
 800709c:	1a21      	subs	r1, r4, r0
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 f962 	bl	8007368 <_sbrk_r>
 80070a4:	3001      	adds	r0, #1
 80070a6:	d1dd      	bne.n	8007064 <_malloc_r+0x64>
 80070a8:	e7cf      	b.n	800704a <_malloc_r+0x4a>
 80070aa:	bf00      	nop
 80070ac:	200001f4 	.word	0x200001f4
 80070b0:	200001f8 	.word	0x200001f8

080070b4 <__sfputc_r>:
 80070b4:	6893      	ldr	r3, [r2, #8]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	b410      	push	{r4}
 80070bc:	6093      	str	r3, [r2, #8]
 80070be:	da08      	bge.n	80070d2 <__sfputc_r+0x1e>
 80070c0:	6994      	ldr	r4, [r2, #24]
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	db01      	blt.n	80070ca <__sfputc_r+0x16>
 80070c6:	290a      	cmp	r1, #10
 80070c8:	d103      	bne.n	80070d2 <__sfputc_r+0x1e>
 80070ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070ce:	f7fe ba47 	b.w	8005560 <__swbuf_r>
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	1c58      	adds	r0, r3, #1
 80070d6:	6010      	str	r0, [r2, #0]
 80070d8:	7019      	strb	r1, [r3, #0]
 80070da:	4608      	mov	r0, r1
 80070dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <__sfputs_r>:
 80070e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e4:	4606      	mov	r6, r0
 80070e6:	460f      	mov	r7, r1
 80070e8:	4614      	mov	r4, r2
 80070ea:	18d5      	adds	r5, r2, r3
 80070ec:	42ac      	cmp	r4, r5
 80070ee:	d101      	bne.n	80070f4 <__sfputs_r+0x12>
 80070f0:	2000      	movs	r0, #0
 80070f2:	e007      	b.n	8007104 <__sfputs_r+0x22>
 80070f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f8:	463a      	mov	r2, r7
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ffda 	bl	80070b4 <__sfputc_r>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d1f3      	bne.n	80070ec <__sfputs_r+0xa>
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007108 <_vfiprintf_r>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	460d      	mov	r5, r1
 800710e:	b09d      	sub	sp, #116	; 0x74
 8007110:	4614      	mov	r4, r2
 8007112:	4698      	mov	r8, r3
 8007114:	4606      	mov	r6, r0
 8007116:	b118      	cbz	r0, 8007120 <_vfiprintf_r+0x18>
 8007118:	6983      	ldr	r3, [r0, #24]
 800711a:	b90b      	cbnz	r3, 8007120 <_vfiprintf_r+0x18>
 800711c:	f7ff fa72 	bl	8006604 <__sinit>
 8007120:	4b89      	ldr	r3, [pc, #548]	; (8007348 <_vfiprintf_r+0x240>)
 8007122:	429d      	cmp	r5, r3
 8007124:	d11b      	bne.n	800715e <_vfiprintf_r+0x56>
 8007126:	6875      	ldr	r5, [r6, #4]
 8007128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800712a:	07d9      	lsls	r1, r3, #31
 800712c:	d405      	bmi.n	800713a <_vfiprintf_r+0x32>
 800712e:	89ab      	ldrh	r3, [r5, #12]
 8007130:	059a      	lsls	r2, r3, #22
 8007132:	d402      	bmi.n	800713a <_vfiprintf_r+0x32>
 8007134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007136:	f7ff fb08 	bl	800674a <__retarget_lock_acquire_recursive>
 800713a:	89ab      	ldrh	r3, [r5, #12]
 800713c:	071b      	lsls	r3, r3, #28
 800713e:	d501      	bpl.n	8007144 <_vfiprintf_r+0x3c>
 8007140:	692b      	ldr	r3, [r5, #16]
 8007142:	b9eb      	cbnz	r3, 8007180 <_vfiprintf_r+0x78>
 8007144:	4629      	mov	r1, r5
 8007146:	4630      	mov	r0, r6
 8007148:	f7fe fa5c 	bl	8005604 <__swsetup_r>
 800714c:	b1c0      	cbz	r0, 8007180 <_vfiprintf_r+0x78>
 800714e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007150:	07dc      	lsls	r4, r3, #31
 8007152:	d50e      	bpl.n	8007172 <_vfiprintf_r+0x6a>
 8007154:	f04f 30ff 	mov.w	r0, #4294967295
 8007158:	b01d      	add	sp, #116	; 0x74
 800715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715e:	4b7b      	ldr	r3, [pc, #492]	; (800734c <_vfiprintf_r+0x244>)
 8007160:	429d      	cmp	r5, r3
 8007162:	d101      	bne.n	8007168 <_vfiprintf_r+0x60>
 8007164:	68b5      	ldr	r5, [r6, #8]
 8007166:	e7df      	b.n	8007128 <_vfiprintf_r+0x20>
 8007168:	4b79      	ldr	r3, [pc, #484]	; (8007350 <_vfiprintf_r+0x248>)
 800716a:	429d      	cmp	r5, r3
 800716c:	bf08      	it	eq
 800716e:	68f5      	ldreq	r5, [r6, #12]
 8007170:	e7da      	b.n	8007128 <_vfiprintf_r+0x20>
 8007172:	89ab      	ldrh	r3, [r5, #12]
 8007174:	0598      	lsls	r0, r3, #22
 8007176:	d4ed      	bmi.n	8007154 <_vfiprintf_r+0x4c>
 8007178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800717a:	f7ff fae7 	bl	800674c <__retarget_lock_release_recursive>
 800717e:	e7e9      	b.n	8007154 <_vfiprintf_r+0x4c>
 8007180:	2300      	movs	r3, #0
 8007182:	9309      	str	r3, [sp, #36]	; 0x24
 8007184:	2320      	movs	r3, #32
 8007186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718a:	f8cd 800c 	str.w	r8, [sp, #12]
 800718e:	2330      	movs	r3, #48	; 0x30
 8007190:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007354 <_vfiprintf_r+0x24c>
 8007194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007198:	f04f 0901 	mov.w	r9, #1
 800719c:	4623      	mov	r3, r4
 800719e:	469a      	mov	sl, r3
 80071a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a4:	b10a      	cbz	r2, 80071aa <_vfiprintf_r+0xa2>
 80071a6:	2a25      	cmp	r2, #37	; 0x25
 80071a8:	d1f9      	bne.n	800719e <_vfiprintf_r+0x96>
 80071aa:	ebba 0b04 	subs.w	fp, sl, r4
 80071ae:	d00b      	beq.n	80071c8 <_vfiprintf_r+0xc0>
 80071b0:	465b      	mov	r3, fp
 80071b2:	4622      	mov	r2, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ff93 	bl	80070e2 <__sfputs_r>
 80071bc:	3001      	adds	r0, #1
 80071be:	f000 80aa 	beq.w	8007316 <_vfiprintf_r+0x20e>
 80071c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c4:	445a      	add	r2, fp
 80071c6:	9209      	str	r2, [sp, #36]	; 0x24
 80071c8:	f89a 3000 	ldrb.w	r3, [sl]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80a2 	beq.w	8007316 <_vfiprintf_r+0x20e>
 80071d2:	2300      	movs	r3, #0
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071dc:	f10a 0a01 	add.w	sl, sl, #1
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	9307      	str	r3, [sp, #28]
 80071e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e8:	931a      	str	r3, [sp, #104]	; 0x68
 80071ea:	4654      	mov	r4, sl
 80071ec:	2205      	movs	r2, #5
 80071ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f2:	4858      	ldr	r0, [pc, #352]	; (8007354 <_vfiprintf_r+0x24c>)
 80071f4:	f7f8 fff4 	bl	80001e0 <memchr>
 80071f8:	9a04      	ldr	r2, [sp, #16]
 80071fa:	b9d8      	cbnz	r0, 8007234 <_vfiprintf_r+0x12c>
 80071fc:	06d1      	lsls	r1, r2, #27
 80071fe:	bf44      	itt	mi
 8007200:	2320      	movmi	r3, #32
 8007202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007206:	0713      	lsls	r3, r2, #28
 8007208:	bf44      	itt	mi
 800720a:	232b      	movmi	r3, #43	; 0x2b
 800720c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007210:	f89a 3000 	ldrb.w	r3, [sl]
 8007214:	2b2a      	cmp	r3, #42	; 0x2a
 8007216:	d015      	beq.n	8007244 <_vfiprintf_r+0x13c>
 8007218:	9a07      	ldr	r2, [sp, #28]
 800721a:	4654      	mov	r4, sl
 800721c:	2000      	movs	r0, #0
 800721e:	f04f 0c0a 	mov.w	ip, #10
 8007222:	4621      	mov	r1, r4
 8007224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007228:	3b30      	subs	r3, #48	; 0x30
 800722a:	2b09      	cmp	r3, #9
 800722c:	d94e      	bls.n	80072cc <_vfiprintf_r+0x1c4>
 800722e:	b1b0      	cbz	r0, 800725e <_vfiprintf_r+0x156>
 8007230:	9207      	str	r2, [sp, #28]
 8007232:	e014      	b.n	800725e <_vfiprintf_r+0x156>
 8007234:	eba0 0308 	sub.w	r3, r0, r8
 8007238:	fa09 f303 	lsl.w	r3, r9, r3
 800723c:	4313      	orrs	r3, r2
 800723e:	9304      	str	r3, [sp, #16]
 8007240:	46a2      	mov	sl, r4
 8007242:	e7d2      	b.n	80071ea <_vfiprintf_r+0xe2>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	1d19      	adds	r1, r3, #4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	9103      	str	r1, [sp, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	bfbb      	ittet	lt
 8007250:	425b      	neglt	r3, r3
 8007252:	f042 0202 	orrlt.w	r2, r2, #2
 8007256:	9307      	strge	r3, [sp, #28]
 8007258:	9307      	strlt	r3, [sp, #28]
 800725a:	bfb8      	it	lt
 800725c:	9204      	strlt	r2, [sp, #16]
 800725e:	7823      	ldrb	r3, [r4, #0]
 8007260:	2b2e      	cmp	r3, #46	; 0x2e
 8007262:	d10c      	bne.n	800727e <_vfiprintf_r+0x176>
 8007264:	7863      	ldrb	r3, [r4, #1]
 8007266:	2b2a      	cmp	r3, #42	; 0x2a
 8007268:	d135      	bne.n	80072d6 <_vfiprintf_r+0x1ce>
 800726a:	9b03      	ldr	r3, [sp, #12]
 800726c:	1d1a      	adds	r2, r3, #4
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	9203      	str	r2, [sp, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	bfb8      	it	lt
 8007276:	f04f 33ff 	movlt.w	r3, #4294967295
 800727a:	3402      	adds	r4, #2
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007364 <_vfiprintf_r+0x25c>
 8007282:	7821      	ldrb	r1, [r4, #0]
 8007284:	2203      	movs	r2, #3
 8007286:	4650      	mov	r0, sl
 8007288:	f7f8 ffaa 	bl	80001e0 <memchr>
 800728c:	b140      	cbz	r0, 80072a0 <_vfiprintf_r+0x198>
 800728e:	2340      	movs	r3, #64	; 0x40
 8007290:	eba0 000a 	sub.w	r0, r0, sl
 8007294:	fa03 f000 	lsl.w	r0, r3, r0
 8007298:	9b04      	ldr	r3, [sp, #16]
 800729a:	4303      	orrs	r3, r0
 800729c:	3401      	adds	r4, #1
 800729e:	9304      	str	r3, [sp, #16]
 80072a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a4:	482c      	ldr	r0, [pc, #176]	; (8007358 <_vfiprintf_r+0x250>)
 80072a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072aa:	2206      	movs	r2, #6
 80072ac:	f7f8 ff98 	bl	80001e0 <memchr>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d03f      	beq.n	8007334 <_vfiprintf_r+0x22c>
 80072b4:	4b29      	ldr	r3, [pc, #164]	; (800735c <_vfiprintf_r+0x254>)
 80072b6:	bb1b      	cbnz	r3, 8007300 <_vfiprintf_r+0x1f8>
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	3307      	adds	r3, #7
 80072bc:	f023 0307 	bic.w	r3, r3, #7
 80072c0:	3308      	adds	r3, #8
 80072c2:	9303      	str	r3, [sp, #12]
 80072c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c6:	443b      	add	r3, r7
 80072c8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ca:	e767      	b.n	800719c <_vfiprintf_r+0x94>
 80072cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d0:	460c      	mov	r4, r1
 80072d2:	2001      	movs	r0, #1
 80072d4:	e7a5      	b.n	8007222 <_vfiprintf_r+0x11a>
 80072d6:	2300      	movs	r3, #0
 80072d8:	3401      	adds	r4, #1
 80072da:	9305      	str	r3, [sp, #20]
 80072dc:	4619      	mov	r1, r3
 80072de:	f04f 0c0a 	mov.w	ip, #10
 80072e2:	4620      	mov	r0, r4
 80072e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e8:	3a30      	subs	r2, #48	; 0x30
 80072ea:	2a09      	cmp	r2, #9
 80072ec:	d903      	bls.n	80072f6 <_vfiprintf_r+0x1ee>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0c5      	beq.n	800727e <_vfiprintf_r+0x176>
 80072f2:	9105      	str	r1, [sp, #20]
 80072f4:	e7c3      	b.n	800727e <_vfiprintf_r+0x176>
 80072f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fa:	4604      	mov	r4, r0
 80072fc:	2301      	movs	r3, #1
 80072fe:	e7f0      	b.n	80072e2 <_vfiprintf_r+0x1da>
 8007300:	ab03      	add	r3, sp, #12
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	462a      	mov	r2, r5
 8007306:	4b16      	ldr	r3, [pc, #88]	; (8007360 <_vfiprintf_r+0x258>)
 8007308:	a904      	add	r1, sp, #16
 800730a:	4630      	mov	r0, r6
 800730c:	f7fd fcd0 	bl	8004cb0 <_printf_float>
 8007310:	4607      	mov	r7, r0
 8007312:	1c78      	adds	r0, r7, #1
 8007314:	d1d6      	bne.n	80072c4 <_vfiprintf_r+0x1bc>
 8007316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007318:	07d9      	lsls	r1, r3, #31
 800731a:	d405      	bmi.n	8007328 <_vfiprintf_r+0x220>
 800731c:	89ab      	ldrh	r3, [r5, #12]
 800731e:	059a      	lsls	r2, r3, #22
 8007320:	d402      	bmi.n	8007328 <_vfiprintf_r+0x220>
 8007322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007324:	f7ff fa12 	bl	800674c <__retarget_lock_release_recursive>
 8007328:	89ab      	ldrh	r3, [r5, #12]
 800732a:	065b      	lsls	r3, r3, #25
 800732c:	f53f af12 	bmi.w	8007154 <_vfiprintf_r+0x4c>
 8007330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007332:	e711      	b.n	8007158 <_vfiprintf_r+0x50>
 8007334:	ab03      	add	r3, sp, #12
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	462a      	mov	r2, r5
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <_vfiprintf_r+0x258>)
 800733c:	a904      	add	r1, sp, #16
 800733e:	4630      	mov	r0, r6
 8007340:	f7fd ff5a 	bl	80051f8 <_printf_i>
 8007344:	e7e4      	b.n	8007310 <_vfiprintf_r+0x208>
 8007346:	bf00      	nop
 8007348:	080077c4 	.word	0x080077c4
 800734c:	080077e4 	.word	0x080077e4
 8007350:	080077a4 	.word	0x080077a4
 8007354:	08007964 	.word	0x08007964
 8007358:	0800796e 	.word	0x0800796e
 800735c:	08004cb1 	.word	0x08004cb1
 8007360:	080070e3 	.word	0x080070e3
 8007364:	0800796a 	.word	0x0800796a

08007368 <_sbrk_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4d06      	ldr	r5, [pc, #24]	; (8007384 <_sbrk_r+0x1c>)
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	f7fd fabe 	bl	80048f4 <_sbrk>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_sbrk_r+0x1a>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_sbrk_r+0x1a>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	200002e8 	.word	0x200002e8

08007388 <__sread>:
 8007388:	b510      	push	{r4, lr}
 800738a:	460c      	mov	r4, r1
 800738c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007390:	f000 f8e2 	bl	8007558 <_read_r>
 8007394:	2800      	cmp	r0, #0
 8007396:	bfab      	itete	ge
 8007398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800739a:	89a3      	ldrhlt	r3, [r4, #12]
 800739c:	181b      	addge	r3, r3, r0
 800739e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073a2:	bfac      	ite	ge
 80073a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073a6:	81a3      	strhlt	r3, [r4, #12]
 80073a8:	bd10      	pop	{r4, pc}

080073aa <__swrite>:
 80073aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ae:	461f      	mov	r7, r3
 80073b0:	898b      	ldrh	r3, [r1, #12]
 80073b2:	05db      	lsls	r3, r3, #23
 80073b4:	4605      	mov	r5, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	4616      	mov	r6, r2
 80073ba:	d505      	bpl.n	80073c8 <__swrite+0x1e>
 80073bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c0:	2302      	movs	r3, #2
 80073c2:	2200      	movs	r2, #0
 80073c4:	f000 f898 	bl	80074f8 <_lseek_r>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	4632      	mov	r2, r6
 80073d6:	463b      	mov	r3, r7
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073de:	f000 b817 	b.w	8007410 <_write_r>

080073e2 <__sseek>:
 80073e2:	b510      	push	{r4, lr}
 80073e4:	460c      	mov	r4, r1
 80073e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ea:	f000 f885 	bl	80074f8 <_lseek_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	bf15      	itete	ne
 80073f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073fe:	81a3      	strheq	r3, [r4, #12]
 8007400:	bf18      	it	ne
 8007402:	81a3      	strhne	r3, [r4, #12]
 8007404:	bd10      	pop	{r4, pc}

08007406 <__sclose>:
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 b831 	b.w	8007470 <_close_r>
	...

08007410 <_write_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d07      	ldr	r5, [pc, #28]	; (8007430 <_write_r+0x20>)
 8007414:	4604      	mov	r4, r0
 8007416:	4608      	mov	r0, r1
 8007418:	4611      	mov	r1, r2
 800741a:	2200      	movs	r2, #0
 800741c:	602a      	str	r2, [r5, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	f7fd fa17 	bl	8004852 <_write>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d102      	bne.n	800742e <_write_r+0x1e>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	b103      	cbz	r3, 800742e <_write_r+0x1e>
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	200002e8 	.word	0x200002e8

08007434 <__assert_func>:
 8007434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007436:	4614      	mov	r4, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <__assert_func+0x2c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4605      	mov	r5, r0
 8007440:	68d8      	ldr	r0, [r3, #12]
 8007442:	b14c      	cbz	r4, 8007458 <__assert_func+0x24>
 8007444:	4b07      	ldr	r3, [pc, #28]	; (8007464 <__assert_func+0x30>)
 8007446:	9100      	str	r1, [sp, #0]
 8007448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800744c:	4906      	ldr	r1, [pc, #24]	; (8007468 <__assert_func+0x34>)
 800744e:	462b      	mov	r3, r5
 8007450:	f000 f81e 	bl	8007490 <fiprintf>
 8007454:	f000 f89f 	bl	8007596 <abort>
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <__assert_func+0x38>)
 800745a:	461c      	mov	r4, r3
 800745c:	e7f3      	b.n	8007446 <__assert_func+0x12>
 800745e:	bf00      	nop
 8007460:	20000004 	.word	0x20000004
 8007464:	08007975 	.word	0x08007975
 8007468:	08007982 	.word	0x08007982
 800746c:	080079b0 	.word	0x080079b0

08007470 <_close_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d06      	ldr	r5, [pc, #24]	; (800748c <_close_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	f7fd fa05 	bl	800488a <_close>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_close_r+0x1a>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_close_r+0x1a>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	200002e8 	.word	0x200002e8

08007490 <fiprintf>:
 8007490:	b40e      	push	{r1, r2, r3}
 8007492:	b503      	push	{r0, r1, lr}
 8007494:	4601      	mov	r1, r0
 8007496:	ab03      	add	r3, sp, #12
 8007498:	4805      	ldr	r0, [pc, #20]	; (80074b0 <fiprintf+0x20>)
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	6800      	ldr	r0, [r0, #0]
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	f7ff fe31 	bl	8007108 <_vfiprintf_r>
 80074a6:	b002      	add	sp, #8
 80074a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ac:	b003      	add	sp, #12
 80074ae:	4770      	bx	lr
 80074b0:	20000004 	.word	0x20000004

080074b4 <_fstat_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	; (80074d4 <_fstat_r+0x20>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	f7fd f9ee 	bl	80048a2 <_fstat>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d102      	bne.n	80074d0 <_fstat_r+0x1c>
 80074ca:	682b      	ldr	r3, [r5, #0]
 80074cc:	b103      	cbz	r3, 80074d0 <_fstat_r+0x1c>
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	bf00      	nop
 80074d4:	200002e8 	.word	0x200002e8

080074d8 <_isatty_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d06      	ldr	r5, [pc, #24]	; (80074f4 <_isatty_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7fd f9ed 	bl	80048c2 <_isatty>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_isatty_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_isatty_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	200002e8 	.word	0x200002e8

080074f8 <_lseek_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d07      	ldr	r5, [pc, #28]	; (8007518 <_lseek_r+0x20>)
 80074fc:	4604      	mov	r4, r0
 80074fe:	4608      	mov	r0, r1
 8007500:	4611      	mov	r1, r2
 8007502:	2200      	movs	r2, #0
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7fd f9e6 	bl	80048d8 <_lseek>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_lseek_r+0x1e>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_lseek_r+0x1e>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	200002e8 	.word	0x200002e8

0800751c <__ascii_mbtowc>:
 800751c:	b082      	sub	sp, #8
 800751e:	b901      	cbnz	r1, 8007522 <__ascii_mbtowc+0x6>
 8007520:	a901      	add	r1, sp, #4
 8007522:	b142      	cbz	r2, 8007536 <__ascii_mbtowc+0x1a>
 8007524:	b14b      	cbz	r3, 800753a <__ascii_mbtowc+0x1e>
 8007526:	7813      	ldrb	r3, [r2, #0]
 8007528:	600b      	str	r3, [r1, #0]
 800752a:	7812      	ldrb	r2, [r2, #0]
 800752c:	1e10      	subs	r0, r2, #0
 800752e:	bf18      	it	ne
 8007530:	2001      	movne	r0, #1
 8007532:	b002      	add	sp, #8
 8007534:	4770      	bx	lr
 8007536:	4610      	mov	r0, r2
 8007538:	e7fb      	b.n	8007532 <__ascii_mbtowc+0x16>
 800753a:	f06f 0001 	mvn.w	r0, #1
 800753e:	e7f8      	b.n	8007532 <__ascii_mbtowc+0x16>

08007540 <__malloc_lock>:
 8007540:	4801      	ldr	r0, [pc, #4]	; (8007548 <__malloc_lock+0x8>)
 8007542:	f7ff b902 	b.w	800674a <__retarget_lock_acquire_recursive>
 8007546:	bf00      	nop
 8007548:	200002e0 	.word	0x200002e0

0800754c <__malloc_unlock>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__malloc_unlock+0x8>)
 800754e:	f7ff b8fd 	b.w	800674c <__retarget_lock_release_recursive>
 8007552:	bf00      	nop
 8007554:	200002e0 	.word	0x200002e0

08007558 <_read_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_read_r+0x20>)
 800755c:	4604      	mov	r4, r0
 800755e:	4608      	mov	r0, r1
 8007560:	4611      	mov	r1, r2
 8007562:	2200      	movs	r2, #0
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7fd f956 	bl	8004818 <_read>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_read_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_read_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	200002e8 	.word	0x200002e8

0800757c <__ascii_wctomb>:
 800757c:	b149      	cbz	r1, 8007592 <__ascii_wctomb+0x16>
 800757e:	2aff      	cmp	r2, #255	; 0xff
 8007580:	bf85      	ittet	hi
 8007582:	238a      	movhi	r3, #138	; 0x8a
 8007584:	6003      	strhi	r3, [r0, #0]
 8007586:	700a      	strbls	r2, [r1, #0]
 8007588:	f04f 30ff 	movhi.w	r0, #4294967295
 800758c:	bf98      	it	ls
 800758e:	2001      	movls	r0, #1
 8007590:	4770      	bx	lr
 8007592:	4608      	mov	r0, r1
 8007594:	4770      	bx	lr

08007596 <abort>:
 8007596:	b508      	push	{r3, lr}
 8007598:	2006      	movs	r0, #6
 800759a:	f000 f82b 	bl	80075f4 <raise>
 800759e:	2001      	movs	r0, #1
 80075a0:	f7fd f930 	bl	8004804 <_exit>

080075a4 <_raise_r>:
 80075a4:	291f      	cmp	r1, #31
 80075a6:	b538      	push	{r3, r4, r5, lr}
 80075a8:	4604      	mov	r4, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	d904      	bls.n	80075b8 <_raise_r+0x14>
 80075ae:	2316      	movs	r3, #22
 80075b0:	6003      	str	r3, [r0, #0]
 80075b2:	f04f 30ff 	mov.w	r0, #4294967295
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075ba:	b112      	cbz	r2, 80075c2 <_raise_r+0x1e>
 80075bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075c0:	b94b      	cbnz	r3, 80075d6 <_raise_r+0x32>
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 f830 	bl	8007628 <_getpid_r>
 80075c8:	462a      	mov	r2, r5
 80075ca:	4601      	mov	r1, r0
 80075cc:	4620      	mov	r0, r4
 80075ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075d2:	f000 b817 	b.w	8007604 <_kill_r>
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d00a      	beq.n	80075f0 <_raise_r+0x4c>
 80075da:	1c59      	adds	r1, r3, #1
 80075dc:	d103      	bne.n	80075e6 <_raise_r+0x42>
 80075de:	2316      	movs	r3, #22
 80075e0:	6003      	str	r3, [r0, #0]
 80075e2:	2001      	movs	r0, #1
 80075e4:	e7e7      	b.n	80075b6 <_raise_r+0x12>
 80075e6:	2400      	movs	r4, #0
 80075e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075ec:	4628      	mov	r0, r5
 80075ee:	4798      	blx	r3
 80075f0:	2000      	movs	r0, #0
 80075f2:	e7e0      	b.n	80075b6 <_raise_r+0x12>

080075f4 <raise>:
 80075f4:	4b02      	ldr	r3, [pc, #8]	; (8007600 <raise+0xc>)
 80075f6:	4601      	mov	r1, r0
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	f7ff bfd3 	b.w	80075a4 <_raise_r>
 80075fe:	bf00      	nop
 8007600:	20000004 	.word	0x20000004

08007604 <_kill_r>:
 8007604:	b538      	push	{r3, r4, r5, lr}
 8007606:	4d07      	ldr	r5, [pc, #28]	; (8007624 <_kill_r+0x20>)
 8007608:	2300      	movs	r3, #0
 800760a:	4604      	mov	r4, r0
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	f7fd f8e7 	bl	80047e4 <_kill>
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	d102      	bne.n	8007620 <_kill_r+0x1c>
 800761a:	682b      	ldr	r3, [r5, #0]
 800761c:	b103      	cbz	r3, 8007620 <_kill_r+0x1c>
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	bf00      	nop
 8007624:	200002e8 	.word	0x200002e8

08007628 <_getpid_r>:
 8007628:	f7fd b8d4 	b.w	80047d4 <_getpid>

0800762c <_init>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr

08007638 <_fini>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr
